<?xml version="1.0"?>
<doc>
  <assembly>
    <name>Troschuetz.Random</name>
  </assembly>
  <members>
    <member name="T:Troschuetz.Random.IDistribution">
      <summary>
              Declares common functionality for all random number distributions.
            </summary>
    </member>
    <member name="M:Troschuetz.Random.IDistribution.Reset">
      <summary>
              Resets the random number distribution, so that it produces the same random number sequence again.
            </summary>
      <returns>
        <see langword="true" />, if the random number distribution was reset; otherwise, <see langword="false" />.
            </returns>
      <ensures csharp="result == this.CanReset" vb="result = Me.CanReset">result == this.CanReset</ensures>
    </member>
    <member name="M:Troschuetz.Random.IDistribution.NextDouble">
      <summary>
              Returns a distributed floating point random number.
            </summary>
      <returns>A distributed double-precision floating point number.</returns>
      <ensures csharp="result &gt;= this.Minimum &amp;&amp; !!(result &lt;= this.Maximum)" vb="result &gt;= Me.Minimum AndAlso Not !(result &lt;= Me.Maximum)">result &gt;= this.Minimum &amp;&amp; !!(result &lt;= this.Maximum)</ensures>
    </member>
    <member name="P:Troschuetz.Random.IDistribution.Generator">
      <summary>
              Gets a <see cref="T:Troschuetz.Random.IGenerator" /> object that can be used as underlying random number generator.
            </summary>
    </member>
    <member name="P:Troschuetz.Random.IDistribution.CanReset">
      <summary>
              Gets a value indicating whether the random number distribution can be reset, 
              so that it produces the same random number sequence again.
            </summary>
    </member>
    <member name="P:Troschuetz.Random.IDistribution.Minimum">
      <summary>
              Gets the minimum possible value of distributed random numbers.
            </summary>
    </member>
    <member name="P:Troschuetz.Random.IDistribution.Maximum">
      <summary>
              Gets the maximum possible value of distributed random numbers.
            </summary>
    </member>
    <member name="P:Troschuetz.Random.IDistribution.Mean">
      <summary>
              Gets the mean of distributed random numbers.
            </summary>
      <exception cref="T:System.NotSupportedException">
              Thrown if mean is not defined for given distribution with some parameters.
            </exception>
    </member>
    <member name="P:Troschuetz.Random.IDistribution.Median">
      <summary>
              Gets the median of distributed random numbers.
            </summary>
      <exception cref="T:System.NotSupportedException">
              Thrown if median is not defined for given distribution with some parameters.
            </exception>
    </member>
    <member name="P:Troschuetz.Random.IDistribution.Variance">
      <summary>
              Gets the variance of distributed random numbers.
            </summary>
      <exception cref="T:System.NotSupportedException">
              Thrown if variance is not defined for given distribution with some parameters.
            </exception>
    </member>
    <member name="P:Troschuetz.Random.IDistribution.Mode">
      <summary>
              Gets the mode of distributed random numbers.
            </summary>
      <exception cref="T:System.NotSupportedException">
              Thrown if mode is not defined for given distribution with some parameters.
            </exception>
    </member>
    <member name="T:Troschuetz.Random.IAlphaDistribution`1">
      <summary>
              Models a distribution with an alpha parameter.
            </summary>
      <typeparam name="TNum">The numeric type of the parameter.</typeparam>
    </member>
    <member name="M:Troschuetz.Random.IAlphaDistribution`1.IsValidAlpha(`0)">
      <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.IAlphaDistribution`1.Alpha" />.
            </summary>
      <param name="value">The value to check.</param>
      <returns>
        <see langword="true" /> if value is valid for parameter <see cref="P:Troschuetz.Random.IAlphaDistribution`1.Alpha" />;
              otherwise, <see langword="false" />.
            </returns>
      <pure />
    </member>
    <member name="P:Troschuetz.Random.IAlphaDistribution`1.Alpha">
      <summary>
              Gets or sets the parameter alpha which is used for generation of distributed random numbers.
            </summary>
      <setter>
        <requires exception="T:System.ArgumentOutOfRangeException" csharp="this.IsValidAlpha(value)" vb="Me.IsValidAlpha(value)">this.IsValidAlpha(value)</requires>
        <ensures csharp="this.Alpha.Equals((object)value)" vb="Me.Alpha.Equals(((Object)value))">this.Alpha.Equals((object)value)</ensures>
      </setter>
      <exception cref="T:System.ArgumentOutOfRangeException">!this.IsValidAlpha(value)</exception>
    </member>
    <member name="T:Troschuetz.Random.IBetaDistribution`1">
      <summary>
              Models a distribution with a beta parameter.
            </summary>
      <typeparam name="TNum">The numeric type of the parameter.</typeparam>
    </member>
    <member name="M:Troschuetz.Random.IBetaDistribution`1.IsValidBeta(`0)">
      <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.IBetaDistribution`1.Beta" />.
            </summary>
      <param name="value">The value to check.</param>
      <returns>
        <see langword="true" /> if value is valid for parameter <see cref="P:Troschuetz.Random.IBetaDistribution`1.Beta" />;
              otherwise, <see langword="false" />.
            </returns>
      <pure />
    </member>
    <member name="P:Troschuetz.Random.IBetaDistribution`1.Beta">
      <summary>
              Gets or sets the parameter beta which is used for generation of distributed random numbers.
            </summary>
      <setter>
        <requires exception="T:System.ArgumentOutOfRangeException" csharp="this.IsValidBeta(value)" vb="Me.IsValidBeta(value)">this.IsValidBeta(value)</requires>
        <ensures csharp="this.Beta.Equals((object)value)" vb="Me.Beta.Equals(((Object)value))">this.Beta.Equals((object)value)</ensures>
      </setter>
      <exception cref="T:System.ArgumentOutOfRangeException">!this.IsValidBeta(value)</exception>
    </member>
    <member name="T:Troschuetz.Random.IGammaDistribution`1">
      <summary>
              Models a distribution with a gamma parameter.
            </summary>
      <typeparam name="TNum">The numeric type of the parameter.</typeparam>
    </member>
    <member name="M:Troschuetz.Random.IGammaDistribution`1.IsValidGamma(`0)">
      <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.IGammaDistribution`1.Gamma" />.
            </summary>
      <param name="value">The value to check.</param>
      <returns>
        <see langword="true" /> if value is valid for parameter <see cref="P:Troschuetz.Random.IGammaDistribution`1.Gamma" />;
              otherwise, <see langword="false" />.
            </returns>
      <pure />
    </member>
    <member name="P:Troschuetz.Random.IGammaDistribution`1.Gamma">
      <summary>
              Gets or sets the parameter gamma which is used for generation of distributed random numbers.
            </summary>
      <setter>
        <requires exception="T:System.ArgumentOutOfRangeException" csharp="this.IsValidGamma(value)" vb="Me.IsValidGamma(value)">this.IsValidGamma(value)</requires>
        <ensures csharp="this.Gamma.Equals((object)value)" vb="Me.Gamma.Equals(((Object)value))">this.Gamma.Equals((object)value)</ensures>
      </setter>
      <exception cref="T:System.ArgumentOutOfRangeException">!this.IsValidGamma(value)</exception>
    </member>
    <member name="T:Troschuetz.Random.ILambdaDistribution`1">
      <summary>
              Models a distribution with a lambda parameter.
            </summary>
      <typeparam name="TNum">The numeric type of the parameter.</typeparam>
    </member>
    <member name="M:Troschuetz.Random.ILambdaDistribution`1.IsValidLambda(`0)">
      <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.ILambdaDistribution`1.Lambda" />.
            </summary>
      <param name="value">The value to check.</param>
      <returns>
        <see langword="true" /> if value is valid for parameter <see cref="P:Troschuetz.Random.ILambdaDistribution`1.Lambda" />;
              otherwise, <see langword="false" />.
            </returns>
      <pure />
    </member>
    <member name="P:Troschuetz.Random.ILambdaDistribution`1.Lambda">
      <summary>
              Gets or sets the parameter lambda which is used for generation of distributed random numbers.
            </summary>
      <setter>
        <requires exception="T:System.ArgumentOutOfRangeException" csharp="this.IsValidLambda(value)" vb="Me.IsValidLambda(value)">this.IsValidLambda(value)</requires>
        <ensures csharp="this.Lambda.Equals((object)value)" vb="Me.Lambda.Equals(((Object)value))">this.Lambda.Equals((object)value)</ensures>
      </setter>
      <exception cref="T:System.ArgumentOutOfRangeException">!this.IsValidLambda(value)</exception>
    </member>
    <member name="T:Troschuetz.Random.IMuDistribution`1">
      <summary>
              Models a distribution with a mu parameter.
            </summary>
      <typeparam name="TNum">The numeric type of the parameter.</typeparam>
    </member>
    <member name="M:Troschuetz.Random.IMuDistribution`1.IsValidMu(`0)">
      <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.IMuDistribution`1.Mu" />.
            </summary>
      <param name="value">The value to check.</param>
      <returns>
        <see langword="true" /> if value is valid for parameter <see cref="P:Troschuetz.Random.IMuDistribution`1.Mu" />;
              otherwise, <see langword="false" />.
            </returns>
      <pure />
    </member>
    <member name="P:Troschuetz.Random.IMuDistribution`1.Mu">
      <summary>
              Gets or sets the parameter mu which is used for generation of distributed random numbers.
            </summary>
      <setter>
        <requires exception="T:System.ArgumentOutOfRangeException" csharp="this.IsValidMu(value)" vb="Me.IsValidMu(value)">this.IsValidMu(value)</requires>
        <ensures csharp="this.Mu.Equals((object)value)" vb="Me.Mu.Equals(((Object)value))">this.Mu.Equals((object)value)</ensures>
      </setter>
      <exception cref="T:System.ArgumentOutOfRangeException">!this.IsValidMu(value)</exception>
    </member>
    <member name="T:Troschuetz.Random.INuDistribution`1">
      <summary>
              Models a distribution with a nu parameter.
            </summary>
      <typeparam name="TNum">The numeric type of the parameter.</typeparam>
    </member>
    <member name="M:Troschuetz.Random.INuDistribution`1.IsValidNu(`0)">
      <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.INuDistribution`1.Nu" />.
            </summary>
      <param name="value">The value to check.</param>
      <returns>
        <see langword="true" /> if value is valid for parameter <see cref="P:Troschuetz.Random.INuDistribution`1.Nu" />;
              otherwise, <see langword="false" />.
            </returns>
      <pure />
    </member>
    <member name="P:Troschuetz.Random.INuDistribution`1.Nu">
      <summary>
              Gets or sets the parameter nu which is used for generation of distributed random numbers.
            </summary>
      <setter>
        <requires exception="T:System.ArgumentOutOfRangeException" csharp="this.IsValidNu(value)" vb="Me.IsValidNu(value)">this.IsValidNu(value)</requires>
        <ensures csharp="this.Nu.Equals((object)value)" vb="Me.Nu.Equals(((Object)value))">this.Nu.Equals((object)value)</ensures>
      </setter>
      <exception cref="T:System.ArgumentOutOfRangeException">!this.IsValidNu(value)</exception>
    </member>
    <member name="T:Troschuetz.Random.ISigmaDistribution`1">
      <summary>
              Models a distribution with a sigma parameter.
            </summary>
      <typeparam name="TNum">The numeric type of the parameter.</typeparam>
    </member>
    <member name="M:Troschuetz.Random.ISigmaDistribution`1.IsValidSigma(`0)">
      <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.ISigmaDistribution`1.Sigma" />.
            </summary>
      <param name="value">The value to check.</param>
      <returns>
        <see langword="true" /> if value is valid for parameter <see cref="P:Troschuetz.Random.ISigmaDistribution`1.Sigma" />;
              otherwise, <see langword="false" />.
            </returns>
      <pure />
    </member>
    <member name="P:Troschuetz.Random.ISigmaDistribution`1.Sigma">
      <summary>
              Gets or sets the parameter sigma which is used for generation of distributed random numbers.
            </summary>
      <setter>
        <requires exception="T:System.ArgumentOutOfRangeException" csharp="this.IsValidSigma(value)" vb="Me.IsValidSigma(value)">this.IsValidSigma(value)</requires>
        <ensures csharp="this.Sigma.Equals((object)value)" vb="Me.Sigma.Equals(((Object)value))">this.Sigma.Equals((object)value)</ensures>
      </setter>
      <exception cref="T:System.ArgumentOutOfRangeException">!this.IsValidSigma(value)</exception>
    </member>
    <member name="T:Troschuetz.Random.IThetaDistribution`1">
      <summary>
              Models a distribution with a theta parameter.
            </summary>
      <typeparam name="TNum">The numeric type of the parameter.</typeparam>
    </member>
    <member name="M:Troschuetz.Random.IThetaDistribution`1.IsValidTheta(`0)">
      <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.IThetaDistribution`1.Theta" />.
            </summary>
      <param name="value">The value to check.</param>
      <returns>
        <see langword="true" /> if value is valid for parameter <see cref="P:Troschuetz.Random.IThetaDistribution`1.Theta" />;
              otherwise, <see langword="false" />.
            </returns>
      <pure />
    </member>
    <member name="P:Troschuetz.Random.IThetaDistribution`1.Theta">
      <summary>
              Gets or sets the parameter theta which is used for generation of distributed random numbers.
            </summary>
      <setter>
        <requires exception="T:System.ArgumentOutOfRangeException" csharp="this.IsValidTheta(value)" vb="Me.IsValidTheta(value)">this.IsValidTheta(value)</requires>
        <ensures csharp="this.Theta.Equals((object)value)" vb="Me.Theta.Equals(((Object)value))">this.Theta.Equals((object)value)</ensures>
      </setter>
      <exception cref="T:System.ArgumentOutOfRangeException">!this.IsValidTheta(value)</exception>
    </member>
    <member name="T:Troschuetz.Random.IWeightsDistribution`1">
      <summary>
              Models a distribution with a weights parameter.
            </summary>
      <typeparam name="T">The numeric type of the parameter.</typeparam>
    </member>
    <member name="M:Troschuetz.Random.IWeightsDistribution`1.AreValidWeights(System.Collections.Generic.IEnumerable{`0})">
      <summary>
              Determines whether specified values are valid for parameter <see cref="P:Troschuetz.Random.IWeightsDistribution`1.Weights" />.
            </summary>
      <param name="values">The values to check.</param>
      <returns>
        <see langword="true" /> if value is valid for parameter <see cref="P:Troschuetz.Random.IWeightsDistribution`1.Weights" />;
              otherwise, <see langword="false" />.
            </returns>
      <pure />
    </member>
    <member name="P:Troschuetz.Random.IWeightsDistribution`1.Weights">
      <summary>
              Gets or sets the parameter weights which is used for generation of distributed random numbers.
            </summary>
      <getter>
        <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      </getter>
      <setter>
        <requires exception="T:System.ArgumentNullException" csharp="value != null" vb="value &lt;&gt; Nothing">value != null</requires>
        <requires exception="T:System.ArgumentException" csharp="value.Count != 0" vb="value.Count &lt;&gt; 0">value.Count != 0</requires>
        <requires exception="T:System.ArgumentOutOfRangeException" csharp="this.AreValidWeights(value)" vb="Me.AreValidWeights(value)">this.AreValidWeights(value)</requires>
        <ensures csharp="Equals((object)this.Weights.Count, (object)value.Count)" vb="Equals(((Object)Me.Weights.Count), ((Object)value.Count))">object.Equals((object)this.Weights.Count, (object)value.Count)</ensures>
      </setter>
      <exception cref="T:System.ArgumentNullException">value == null</exception>
      <exception cref="T:System.ArgumentException">value.Count == 0</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">!this.AreValidWeights(value)</exception>
    </member>
    <member name="T:Troschuetz.Random.IGenerator">
      <summary>
              Declares common functionality for all random number generators.
            </summary>
    </member>
    <member name="M:Troschuetz.Random.IGenerator.Reset">
      <summary>
              Resets the random number generator, so that it produces the same random number sequence again.
            </summary>
      <returns>
              True if the random number generator was reset; otherwise, false.
            </returns>
      <ensures csharp="result == this.CanReset" vb="result = Me.CanReset">result == this.CanReset</ensures>
    </member>
    <member name="M:Troschuetz.Random.IGenerator.Next">
      <summary>
              Returns a nonnegative random number less than <see cref="F:System.Int32.MaxValue" />.
            </summary>
      <returns>
              A 32-bit signed integer greater than or equal to 0, and less than <see cref="F:System.Int32.MaxValue" />; 
              that is, the range of return values includes 0 but not <see cref="F:System.Int32.MaxValue" />.
            </returns>
      <ensures csharp="result &gt;= 0 &amp;&amp; result &lt; int.MaxValue" vb="result &gt;= 0 AndAlso result &lt; int.MaxValue">result &gt;= 0 &amp;&amp; result &lt; int.MaxValue</ensures>
    </member>
    <member name="M:Troschuetz.Random.IGenerator.NextInclusiveMaxValue">
      <summary>
              Returns a nonnegative random number less than or equal to <see cref="F:System.Int32.MaxValue" />.
            </summary>
      <returns>
              A 32-bit signed integer greater than or equal to 0, and less than or equal to <see cref="F:System.Int32.MaxValue" />; 
              that is, the range of return values includes 0 and <see cref="F:System.Int32.MaxValue" />.
            </returns>
      <ensures csharp="result &gt;= 0 &amp;&amp; !(result &gt; int.MaxValue)" vb="result &gt;= 0 AndAlso Not result &gt; int.MaxValue">result &gt;= 0 &amp;&amp; !(result &gt; int.MaxValue)</ensures>
    </member>
    <member name="M:Troschuetz.Random.IGenerator.Next(System.Int32)">
      <summary>
              Returns a nonnegative random number less than the specified maximum.
            </summary>
      <param name="maxValue">
              The exclusive upper bound of the random number to be generated.  
            </param>
      <returns>
              A 32-bit signed integer greater than or equal to 0, and less than <paramref name="maxValue" />; 
              that is, the range of return values includes 0 but not <paramref name="maxValue" />. 
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maxValue" /> must be greater than or equal to 0.
            </exception>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="maxValue &gt;= 0" vb="maxValue &gt;= 0">maxValue &gt;= 0</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">maxValue &lt; 0</exception>
      <ensures csharp="result &gt;= 0 &amp;&amp; result &lt; maxValue" vb="result &gt;= 0 AndAlso result &lt; maxValue">result &gt;= 0 &amp;&amp; result &lt; maxValue</ensures>
    </member>
    <member name="M:Troschuetz.Random.IGenerator.Next(System.Int32,System.Int32)">
      <summary>
              Returns a random number within the specified range. 
            </summary>
      <param name="minValue">
              The inclusive lower bound of the random number to be generated. 
            </param>
      <param name="maxValue">
              The exclusive upper bound of the random number to be generated. 
              <paramref name="maxValue" /> must be greater than or equal to <paramref name="minValue" />. 
            </param>
      <returns>
              A 32-bit signed integer greater than or equal to <paramref name="minValue" />, and less than 
              <paramref name="maxValue" />; that is, the range of return values includes <paramref name="minValue" /> but 
              not <paramref name="maxValue" />. 
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maxValue" /> must be greater than or equal to <paramref name="minValue" />.
            </exception>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="maxValue &gt;= minValue" vb="maxValue &gt;= minValue">maxValue &gt;= minValue</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">maxValue &lt; minValue</exception>
      <ensures csharp="result &gt;= minValue &amp;&amp; result &lt; maxValue" vb="result &gt;= minValue AndAlso result &lt; maxValue">result &gt;= minValue &amp;&amp; result &lt; maxValue</ensures>
    </member>
    <member name="M:Troschuetz.Random.IGenerator.NextDouble">
      <summary>
              Returns a nonnegative floating point random number less than 1.0.
            </summary>
      <returns>
              A double-precision floating point number greater than or equal to 0.0, and less than 1.0; 
              that is, the range of return values includes 0.0 but not 1.0. 
            </returns>
      <ensures csharp="result &gt;= 0.0 &amp;&amp; result &lt; 1.0" vb="result &gt;= 0 AndAlso result &lt; 1">result &gt;= 0.0 &amp;&amp; result &lt; 1.0</ensures>
    </member>
    <member name="M:Troschuetz.Random.IGenerator.NextDouble(System.Double)">
      <summary>
              Returns a nonnegative floating point random number less than the specified maximum.
            </summary>
      <param name="maxValue">
              The exclusive upper bound of the random number to be generated.
            </param>
      <returns>
              A double-precision floating point number greater than or equal to 0.0, 
              and less than <paramref name="maxValue" />; that is, the range of return values
              includes 0 but not <paramref name="maxValue" />. 
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maxValue" /> must be greater than or equal to 0.0.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="maxValue" /> cannot be <see cref="F:System.Double.PositiveInfinity" />.
            </exception>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="maxValue &gt;= 0.0" vb="maxValue &gt;= 0">maxValue &gt;= 0.0</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">maxValue &lt; 0.0</exception>
      <requires exception="T:System.ArgumentException" csharp="!IsPositiveInfinity(maxValue)" vb="Not IsPositiveInfinity(maxValue)">!double.IsPositiveInfinity(maxValue)</requires>
      <exception cref="T:System.ArgumentException">double.IsPositiveInfinity(maxValue)</exception>
      <ensures csharp="result &gt;= 0.0 &amp;&amp; result &lt; maxValue" vb="result &gt;= 0 AndAlso result &lt; maxValue">result &gt;= 0.0 &amp;&amp; result &lt; maxValue</ensures>
    </member>
    <member name="M:Troschuetz.Random.IGenerator.NextDouble(System.Double,System.Double)">
      <summary>
              Returns a floating point random number within the specified range. 
            </summary>
      <param name="minValue">
              The inclusive lower bound of the random number to be generated. 
            </param>
      <param name="maxValue">
              The exclusive upper bound of the random number to be generated. 
            </param>
      <returns>
              A double-precision floating point number greater than or equal to <paramref name="minValue" />,
              and less than <paramref name="maxValue" />; that is, the range of return values 
              includes <paramref name="minValue" /> but not <paramref name="maxValue" />. 
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maxValue" /> must be greater than or equal to <paramref name="minValue" />.
              The range between <paramref name="minValue" /> and <paramref name="maxValue" /> 
              must be less than or equal to <see cref="F:System.Double.MaxValue" />.
            </exception>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="maxValue &gt;= minValue" vb="maxValue &gt;= minValue">maxValue &gt;= minValue</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">maxValue &lt; minValue</exception>
      <requires exception="T:System.ArgumentException" csharp="!IsPositiveInfinity((maxValue - minValue))" vb="Not IsPositiveInfinity(maxValue - minValue)">!double.IsPositiveInfinity((maxValue - minValue))</requires>
      <exception cref="T:System.ArgumentException">double.IsPositiveInfinity(maxValue - minValue)</exception>
      <ensures csharp="result &gt;= minValue &amp;&amp; result &lt; maxValue" vb="result &gt;= minValue AndAlso result &lt; maxValue">result &gt;= minValue &amp;&amp; result &lt; maxValue</ensures>
    </member>
    <member name="M:Troschuetz.Random.IGenerator.NextUInt">
      <summary>
              Returns an unsigned random number.
            </summary>
      <returns>
              A 32-bit unsigned integer greater than or equal to <see cref="F:System.UInt32.MinValue" /> and 
              less than or equal to <see cref="F:System.UInt32.MaxValue" />.
            </returns>
      <ensures csharp="result &lt;= -1" vb="result &lt;= -1">result &lt;= -1</ensures>
    </member>
    <member name="M:Troschuetz.Random.IGenerator.NextUIntExclusiveMaxValue">
      <summary>
              Returns an unsigned random number less than <see cref="F:System.UInt32.MaxValue" />.
            </summary>
      <returns>
              A 32-bit unsigned integer greater than or equal to <see cref="F:System.UInt32.MinValue" /> and 
              less than <see cref="F:System.UInt32.MaxValue" />.
            </returns>
      <ensures csharp="result &lt; uint-1" vb="result &lt; UInteger -1">result &lt; uint-1</ensures>
    </member>
    <member name="M:Troschuetz.Random.IGenerator.NextUInt(System.UInt32)">
      <summary>
              Returns an unsigned random number less than the specified maximum.
            </summary>
      <param name="maxValue">
              The exclusive upper bound of the random number to be generated. 
            </param>
      <returns>
              A 32-bit unsigned integer greater than or equal to <see cref="F:System.UInt32.MinValue" /> and 
              less than <paramref name="maxValue" />; that is, the range of return values includes 
              <see cref="F:System.UInt32.MinValue" /> but not <paramref name="maxValue" />. 
            </returns>
      <ensures csharp="result &lt; maxValue" vb="result &lt; maxValue">result &lt; maxValue</ensures>
    </member>
    <member name="M:Troschuetz.Random.IGenerator.NextUInt(System.UInt32,System.UInt32)">
      <summary>
              Returns an unsigned random number within the specified range.
            </summary>
      <param name="minValue">
              The inclusive lower bound of the random number to be generated. 
            </param>
      <param name="maxValue">
              The exclusive upper bound of the random number to be generated. 
            </param>
      <returns>
              A 32-bit unsigned integer greater than or equal to <paramref name="minValue" /> and 
              less than <paramref name="maxValue" />; that is, the range of return values includes <paramref name="minValue" /> but 
              not <paramref name="maxValue" />. 
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maxValue" /> must be greater than or equal to <paramref name="minValue" />.
            </exception>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="maxValue &gt;= minValue" vb="maxValue &gt;= minValue">maxValue &gt;= minValue</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">maxValue &lt; minValue</exception>
      <ensures csharp="result &gt;= minValue &amp;&amp; result &lt; maxValue" vb="result &gt;= minValue AndAlso result &lt; maxValue">result &gt;= minValue &amp;&amp; result &lt; maxValue</ensures>
    </member>
    <member name="M:Troschuetz.Random.IGenerator.NextBoolean">
      <summary>
              Returns a random Boolean value.
            </summary>
      <remarks>
              Buffers 31 random bits for future calls, so the random number generator
              is only invoked once in every 31 calls.
            </remarks>
      <returns>A <see cref="T:System.Boolean" /> value.</returns>
    </member>
    <member name="M:Troschuetz.Random.IGenerator.NextBytes(System.Byte[])">
      <summary>
              Fills the elements of a specified array of bytes with random numbers. 
            </summary>
      <remarks>
              Each element of the array of bytes is set to a random number greater than or equal to 0,
              and less than or equal to <see cref="F:System.Byte.MaxValue" />.
            </remarks>
      <param name="buffer">An array of bytes to contain random numbers.</param>
      <requires exception="T:System.ArgumentNullException" csharp="buffer != null" vb="buffer &lt;&gt; Nothing">buffer != null</requires>
      <exception cref="T:System.ArgumentNullException">buffer == null</exception>
    </member>
    <member name="P:Troschuetz.Random.IGenerator.Seed">
      <summary>
              The seed value used by the generator.
            </summary>
    </member>
    <member name="P:Troschuetz.Random.IGenerator.CanReset">
      <summary>
              Gets a value indicating whether the random number generator can be reset, 
              so that it produces the same random number sequence again.
            </summary>
    </member>
    <member name="T:Troschuetz.Random.Distributions.Continuous.BetaDistribution`1">
      <summary>
              Provides generation of beta distributed random numbers.
            </summary>
      <remarks>
              The implementation of the <see cref="T:Troschuetz.Random.Distributions.Continuous.BetaDistribution" /> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/Beta_distribution">Wikipedia - Beta distribution</a> and
              <a href="http://www.xycoon.com/beta_randomnumbers.htm">Xycoon - Beta Distribution</a>.
            </remarks>
    </member>
    <member name="T:Troschuetz.Random.Distribution`1">
      <summary>
              Abstract class which implements some features shared across all distributions.
            </summary>
      <typeparam name="TGen">The type of the generator used by the distribution.</typeparam>
      <remarks>
              Generator type is explictly declared to allow better performances.
            </remarks>
    </member>
    <member name="F:Troschuetz.Random.Distribution`1.Gen">
      <summary>
              Stores a <see cref="!:TGen" /> object that can be used as underlying random number generator.
            </summary>
    </member>
    <member name="M:Troschuetz.Random.Distribution`1.Reset">
      <summary>
              Resets the random number distribution, so that it produces the same random number sequence again.
            </summary>
      <returns>
        <see langword="true" />, if the random number distribution was reset; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="P:Troschuetz.Random.Distribution`1.CanReset">
      <summary>
              Gets a value indicating whether the random number distribution can be reset, 
              so that it produces the same random number sequence again.
            </summary>
    </member>
    <member name="P:Troschuetz.Random.Distribution`1.Generator">
      <summary>
              Gets a <see cref="T:Troschuetz.Random.IGenerator" /> object that can be used as underlying random number generator.
            </summary>
    </member>
    <member name="T:Troschuetz.Random.IContinuousDistribution">
      <summary>
              Declares common functionality for all continuous random number distributions.
            </summary>
    </member>
    <member name="F:Troschuetz.Random.Distributions.Continuous.BetaDistribution`1.DefaultAlpha">
      <summary>
              The default value assigned to <see cref="P:Troschuetz.Random.Distributions.Continuous.BetaDistribution`1.Alpha" /> if none is specified. 
            </summary>
    </member>
    <member name="F:Troschuetz.Random.Distributions.Continuous.BetaDistribution`1.DefaultBeta">
      <summary>
              The default value assigned to <see cref="P:Troschuetz.Random.Distributions.Continuous.BetaDistribution`1.Beta" /> if none is specified. 
            </summary>
    </member>
    <member name="F:Troschuetz.Random.Distributions.Continuous.BetaDistribution`1._alpha">
      <summary>
              Stores the parameter alpha which is used for generation of beta distributed random numbers.
            </summary>
    </member>
    <member name="F:Troschuetz.Random.Distributions.Continuous.BetaDistribution`1._beta">
      <summary>
              Stores the parameter beta which is used for generation of beta distributed random numbers.
            </summary>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.BetaDistribution`1.#ctor(`0,System.Double,System.Double)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.BetaDistribution" /> class,
              using the specified <see cref="T:Troschuetz.Random.IGenerator" /> as underlying random number generator.
            </summary>
      <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator" /> object.</param>
      <param name="alpha">
              The parameter alpha which is used for generation of beta distributed random numbers.
            </param>
      <param name="beta">
              The parameter beta which is used for generation of beta distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="generator" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> or <paramref name="beta" /> are less than or equal to zero.
            </exception>
      <requires exception="T:System.ArgumentNullException" csharp="!ReferenceEquals((object)generator, null)" vb="Not ReferenceEquals(((Object)generator), Nothing)">!object.ReferenceEquals((object)generator, null)</requires>
      <exception cref="T:System.ArgumentNullException">object.ReferenceEquals((object)generator, null)</exception>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="AreValidParams(alpha, beta)" vb="AreValidParams(alpha, beta)">Troschuetz.Random.Distributions.Continuous.BetaDistribution&lt;TGen&gt;.AreValidParams(alpha, beta)</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">!Troschuetz.Random.Distributions.Continuous.BetaDistribution&lt;TGen&gt;.AreValidParams(alpha, beta)</exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.BetaDistribution`1.IsValidAlpha(System.Double)">
      <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.Distributions.Continuous.BetaDistribution`1.Alpha" />.
            </summary>
      <param name="value">The value to check.</param>
      <returns>
        <see langword="true" /> if value is greater than 0.0; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.BetaDistribution`1.IsValidBeta(System.Double)">
      <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.Distributions.Continuous.BetaDistribution`1.Beta" />.
            </summary>
      <param name="value">The value to check.</param>
      <returns>
        <see langword="true" /> if value is greater than 0.0; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.BetaDistribution`1.AreValidParams(System.Double,System.Double)">
      <summary>
              Determines whether beta distribution is defined under given parameters.
            </summary>
      <param name="alpha">
              The parameter alpha which is used for generation of beta distributed random numbers.
            </param>
      <param name="beta">
              The parameter beta which is used for generation of beta distributed random numbers.
            </param>
      <returns>
              True if <paramref name="alpha" /> and <paramref name="beta" /> are greater than zero;
              otherwise, it returns false.
            </returns>
      <pure />
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.BetaDistribution`1.Sample(`0,System.Double,System.Double)">
      <summary>
              Returns a beta distributed floating point random number.
            </summary>
      <param name="generator">The generator from which random number are drawn.</param>
      <param name="alpha">
              The parameter alpha which is used for generation of beta distributed random numbers.
            </param>
      <param name="beta">
              The parameter beta which is used for generation of beta distributed random numbers.
            </param>
      <returns>
              A beta distributed floating point random number.
            </returns>
    </member>
    <member name="P:Troschuetz.Random.Distributions.Continuous.BetaDistribution`1.Alpha">
      <summary>
              Gets or sets the parameter alpha which is used for generation of beta distributed random numbers.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is less than or equal to zero.
            </exception>
      <remarks>
              Calls <see cref="M:Troschuetz.Random.Distributions.Continuous.BetaDistribution`1.AreValidParams(System.Double,System.Double)" /> to determine whether a value is valid and therefore assignable.
            </remarks>
      <setter>
        <requires inheritedFrom="M:Troschuetz.Random.IAlphaDistribution`1.set_Alpha(`0)" inheritedFromTypeName="IAlphaDistribution" exception="T:System.ArgumentOutOfRangeException" csharp="this.IsValidAlpha(value)" vb="Me.IsValidAlpha(value)">this.IsValidAlpha(value)</requires>
        <ensures inheritedFrom="M:Troschuetz.Random.IAlphaDistribution`1.set_Alpha(`0)" inheritedFromTypeName="IAlphaDistribution" csharp="this.Alpha.Equals((object)value)" vb="Me.Alpha.Equals(((Object)value))">this.Alpha.Equals((object)value)</ensures>
      </setter>
      <exception cref="T:System.ArgumentOutOfRangeException">!this.IsValidAlpha(value)</exception>
    </member>
    <member name="P:Troschuetz.Random.Distributions.Continuous.BetaDistribution`1.Beta">
      <summary>
              Gets or sets the parameter beta which is used for generation of beta distributed random numbers.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is less than or equal to zero.
            </exception>
      <remarks>
              Calls <see cref="M:Troschuetz.Random.Distributions.Continuous.BetaDistribution`1.AreValidParams(System.Double,System.Double)" /> to determine whether a value is valid and therefore assignable.
            </remarks>
      <setter>
        <requires inheritedFrom="M:Troschuetz.Random.IBetaDistribution`1.set_Beta(`0)" inheritedFromTypeName="IBetaDistribution" exception="T:System.ArgumentOutOfRangeException" csharp="this.IsValidBeta(value)" vb="Me.IsValidBeta(value)">this.IsValidBeta(value)</requires>
        <ensures inheritedFrom="M:Troschuetz.Random.IBetaDistribution`1.set_Beta(`0)" inheritedFromTypeName="IBetaDistribution" csharp="this.Beta.Equals((object)value)" vb="Me.Beta.Equals(((Object)value))">this.Beta.Equals((object)value)</ensures>
      </setter>
      <exception cref="T:System.ArgumentOutOfRangeException">!this.IsValidBeta(value)</exception>
    </member>
    <member name="T:Troschuetz.Random.Distributions.Continuous.BetaDistribution">
      <summary>
              Provides generation of beta distributed random numbers.
            </summary>
      <remarks>
              The implementation of the <see cref="T:Troschuetz.Random.Distributions.Continuous.BetaDistribution" /> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/Beta_distribution">Wikipedia - Beta distribution</a> and
              <a href="http://www.xycoon.com/beta_randomnumbers.htm">Xycoon - Beta Distribution</a>.
            </remarks>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.BetaDistribution.#ctor">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.BetaDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> as underlying random number generator.
            </summary>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.BetaDistribution.#ctor(System.UInt32)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.BetaDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> with the specified seed value.
            </summary>
      <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.BetaDistribution.#ctor(Troschuetz.Random.IGenerator)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.BetaDistribution" /> class,
              using the specified <see cref="T:Troschuetz.Random.IGenerator" /> as underlying random number generator.
            </summary>
      <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator" /> object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="generator" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.BetaDistribution.#ctor(System.Double,System.Double)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.BetaDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> as underlying random number generator.
            </summary>
      <param name="alpha">
              The parameter alpha which is used for generation of beta distributed random numbers.
            </param>
      <param name="beta">
              The parameter beta which is used for generation of beta distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> or <paramref name="beta" /> are less than or equal to zero.
            </exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.BetaDistribution.#ctor(System.UInt32,System.Double,System.Double)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.BetaDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> with the specified seed value.
            </summary>
      <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
      <param name="alpha">
              The parameter alpha which is used for generation of beta distributed random numbers.
            </param>
      <param name="beta">
              The parameter beta which is used for generation of beta distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> or <paramref name="beta" /> are less than or equal to zero.
            </exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.BetaDistribution.#ctor(Troschuetz.Random.IGenerator,System.Double,System.Double)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.BetaDistribution" /> class,
              using the specified <see cref="T:Troschuetz.Random.IGenerator" /> as underlying random number generator.
            </summary>
      <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator" /> object.</param>
      <param name="alpha">
              The parameter alpha which is used for generation of beta distributed random numbers.
            </param>
      <param name="beta">
              The parameter beta which is used for generation of beta distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="generator" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> or <paramref name="beta" /> are less than or equal to zero.
            </exception>
    </member>
    <member name="T:Troschuetz.Random.Distributions.Continuous.BetaPrimeDistribution`1">
      <summary>
              Provides generation of beta-prime distributed random numbers.
            </summary>
      <remarks>
              The implementation of the <see cref="T:Troschuetz.Random.Distributions.Continuous.BetaPrimeDistribution" /> type bases upon information presented on
              <a href="http://www.xycoon.com/ibeta.htm">Xycoon - Inverted Beta Distribution</a>.
            </remarks>
    </member>
    <member name="F:Troschuetz.Random.Distributions.Continuous.BetaPrimeDistribution`1.DefaultAlpha">
      <summary>
              The default value assigned to <see cref="P:Troschuetz.Random.Distributions.Continuous.BetaPrimeDistribution`1.Alpha" /> if none is specified. 
            </summary>
    </member>
    <member name="F:Troschuetz.Random.Distributions.Continuous.BetaPrimeDistribution`1.DefaultBeta">
      <summary>
              The default value assigned to <see cref="P:Troschuetz.Random.Distributions.Continuous.BetaPrimeDistribution`1.Beta" /> if none is specified. 
            </summary>
    </member>
    <member name="F:Troschuetz.Random.Distributions.Continuous.BetaPrimeDistribution`1._alpha">
      <summary>
              Stores the parameter alpha which is used for generation of beta-prime distributed random numbers.
            </summary>
    </member>
    <member name="F:Troschuetz.Random.Distributions.Continuous.BetaPrimeDistribution`1._beta">
      <summary>
              Stores the parameter beta which is used for generation of beta-prime distributed random numbers.
            </summary>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.BetaPrimeDistribution`1.#ctor(`0,System.Double,System.Double)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.BetaPrimeDistribution" /> class,
              using the specified <see cref="T:Troschuetz.Random.IGenerator" /> as underlying random number generator.
            </summary>
      <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator" /> object.</param>
      <param name="alpha">
              The parameter alpha which is used for generation of beta prime distributed random numbers.
            </param>
      <param name="beta">
              The parameter beta which is used for generation of beta prime distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="generator" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> or <paramref name="beta" /> are less than or equal to one.
            </exception>
      <requires exception="T:System.ArgumentNullException" csharp="!ReferenceEquals((object)generator, null)" vb="Not ReferenceEquals(((Object)generator), Nothing)">!object.ReferenceEquals((object)generator, null)</requires>
      <exception cref="T:System.ArgumentNullException">object.ReferenceEquals((object)generator, null)</exception>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="AreValidParams(alpha, beta)" vb="AreValidParams(alpha, beta)">Troschuetz.Random.Distributions.Continuous.BetaPrimeDistribution&lt;TGen&gt;.AreValidParams(alpha, beta)</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">!Troschuetz.Random.Distributions.Continuous.BetaPrimeDistribution&lt;TGen&gt;.AreValidParams(alpha, beta)</exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.BetaPrimeDistribution`1.IsValidAlpha(System.Double)">
      <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.Distributions.Continuous.BetaPrimeDistribution`1.Alpha" />.
            </summary>
      <param name="value">The value to check.</param>
      <returns>
        <see langword="true" /> if value is greater than 1.0; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.BetaPrimeDistribution`1.IsValidBeta(System.Double)">
      <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.Distributions.Continuous.BetaPrimeDistribution`1.Beta" />.
            </summary>
      <param name="value">The value to check.</param>
      <returns>
        <see langword="true" /> if value is greater than 1.0; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.BetaPrimeDistribution`1.AreValidParams(System.Double,System.Double)">
      <summary>
              Determines whether beta prime distribution is defined under given parameters.
            </summary>
      <param name="alpha">
              The parameter alpha which is used for generation of beta prime distributed random numbers.
            </param>
      <param name="beta">
              The parameter beta which is used for generation of beta prime distributed random numbers.
            </param>
      <returns>
              True if <paramref name="alpha" /> and <paramref name="beta" /> are greater than one;
              otherwise, it returns false.
            </returns>
      <pure />
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.BetaPrimeDistribution`1.Sample(`0,System.Double,System.Double)">
      <summary>
              Returns a beta prime distributed floating point random number.
            </summary>
      <param name="generator">The generator from which random number are drawn.</param>
      <param name="alpha">
              The parameter alpha which is used for generation of beta prime distributed random numbers.
            </param>
      <param name="beta">
              The parameter beta which is used for generation of beta prime distributed random numbers.
            </param>
      <returns>
              A beta prime distributed floating point random number.
            </returns>
      <pure />
    </member>
    <member name="P:Troschuetz.Random.Distributions.Continuous.BetaPrimeDistribution`1.Alpha">
      <summary>
              Gets or sets the parameter alpha which is used for generation of beta-prime distributed random numbers.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is less than or equal to one.
            </exception>
      <remarks>
              Calls <see cref="M:Troschuetz.Random.Distributions.Continuous.BetaPrimeDistribution`1.AreValidParams(System.Double,System.Double)" /> to determine whether a value is valid and therefore assignable.
            </remarks>
      <setter>
        <requires inheritedFrom="M:Troschuetz.Random.IAlphaDistribution`1.set_Alpha(`0)" inheritedFromTypeName="IAlphaDistribution" exception="T:System.ArgumentOutOfRangeException" csharp="this.IsValidAlpha(value)" vb="Me.IsValidAlpha(value)">this.IsValidAlpha(value)</requires>
        <ensures inheritedFrom="M:Troschuetz.Random.IAlphaDistribution`1.set_Alpha(`0)" inheritedFromTypeName="IAlphaDistribution" csharp="this.Alpha.Equals((object)value)" vb="Me.Alpha.Equals(((Object)value))">this.Alpha.Equals((object)value)</ensures>
      </setter>
      <exception cref="T:System.ArgumentOutOfRangeException">!this.IsValidAlpha(value)</exception>
    </member>
    <member name="P:Troschuetz.Random.Distributions.Continuous.BetaPrimeDistribution`1.Beta">
      <summary>
              Gets or sets the parameter beta which is used for generation of beta-prime distributed random numbers.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is less than or equal to one.
            </exception>
      <remarks>
              Calls <see cref="M:Troschuetz.Random.Distributions.Continuous.BetaPrimeDistribution`1.AreValidParams(System.Double,System.Double)" /> to determine whether a value is valid and therefore assignable.
            </remarks>
      <setter>
        <requires inheritedFrom="M:Troschuetz.Random.IBetaDistribution`1.set_Beta(`0)" inheritedFromTypeName="IBetaDistribution" exception="T:System.ArgumentOutOfRangeException" csharp="this.IsValidBeta(value)" vb="Me.IsValidBeta(value)">this.IsValidBeta(value)</requires>
        <ensures inheritedFrom="M:Troschuetz.Random.IBetaDistribution`1.set_Beta(`0)" inheritedFromTypeName="IBetaDistribution" csharp="this.Beta.Equals((object)value)" vb="Me.Beta.Equals(((Object)value))">this.Beta.Equals((object)value)</ensures>
      </setter>
      <exception cref="T:System.ArgumentOutOfRangeException">!this.IsValidBeta(value)</exception>
    </member>
    <member name="T:Troschuetz.Random.Distributions.Continuous.BetaPrimeDistribution">
      <summary>
              Provides generation of beta-prime distributed random numbers.
            </summary>
      <remarks>
              The implementation of the <see cref="T:Troschuetz.Random.Distributions.Continuous.BetaPrimeDistribution" /> type bases upon information presented on
              <a href="http://www.xycoon.com/ibeta.htm">Xycoon - Inverted Beta Distribution</a>.
            </remarks>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.BetaPrimeDistribution.#ctor">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.BetaPrimeDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> as underlying random number generator.
            </summary>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.BetaPrimeDistribution.#ctor(System.UInt32)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.BetaPrimeDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> with the specified seed value.
            </summary>
      <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.BetaPrimeDistribution.#ctor(Troschuetz.Random.IGenerator)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.BetaPrimeDistribution" /> class,
              using the specified <see cref="T:Troschuetz.Random.IGenerator" /> as underlying random number generator.
            </summary>
      <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator" /> object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="generator" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.BetaPrimeDistribution.#ctor(System.Double,System.Double)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.BetaPrimeDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> as underlying random number generator.
            </summary>
      <param name="alpha">
              The parameter alpha which is used for generation of beta prime distributed random numbers.
            </param>
      <param name="beta">
              The parameter beta which is used for generation of beta prime distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> or <paramref name="beta" /> are less than or equal to one.
            </exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.BetaPrimeDistribution.#ctor(System.UInt32,System.Double,System.Double)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.BetaPrimeDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> with the specified seed value.
            </summary>
      <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
      <param name="alpha">
              The parameter alpha which is used for generation of beta prime distributed random numbers.
            </param>
      <param name="beta">
              The parameter beta which is used for generation of beta prime distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> or <paramref name="beta" /> are less than or equal to one.
            </exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.BetaPrimeDistribution.#ctor(Troschuetz.Random.IGenerator,System.Double,System.Double)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.BetaPrimeDistribution" /> class,
              using the specified <see cref="T:Troschuetz.Random.IGenerator" /> as underlying random number generator.
            </summary>
      <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator" /> object.</param>
      <param name="alpha">
              The parameter alpha which is used for generation of beta prime distributed random numbers.
            </param>
      <param name="beta">
              The parameter beta which is used for generation of beta prime distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="generator" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> or <paramref name="beta" /> are less than or equal to one.
            </exception>
    </member>
    <member name="T:Troschuetz.Random.Distributions.Continuous.CauchyDistribution`1">
      <summary>
              Provides generation of cauchy distributed random numbers.
            </summary>
      <remarks>
              The implementation of the <see cref="T:Troschuetz.Random.Distributions.Continuous.CauchyDistribution" /> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/Cauchy_distribution">Wikipedia - Cauchy distribution</a> and
              <a href="http://www.xycoon.com/cauchy2p_random.htm">Xycoon - Cauchy Distribution</a>.
            </remarks>
    </member>
    <member name="F:Troschuetz.Random.Distributions.Continuous.CauchyDistribution`1.DefaultAlpha">
      <summary>
              The default value assigned to <see cref="P:Troschuetz.Random.Distributions.Continuous.CauchyDistribution`1.Alpha" /> if none is specified. 
            </summary>
    </member>
    <member name="F:Troschuetz.Random.Distributions.Continuous.CauchyDistribution`1.DefaultGamma">
      <summary>
              The default value assigned to <see cref="P:Troschuetz.Random.Distributions.Continuous.CauchyDistribution`1.Gamma" /> if none is specified. 
            </summary>
    </member>
    <member name="F:Troschuetz.Random.Distributions.Continuous.CauchyDistribution`1._alpha">
      <summary>
              Stores the parameter alpha which is used for generation of cauchy distributed random numbers.
            </summary>
    </member>
    <member name="F:Troschuetz.Random.Distributions.Continuous.CauchyDistribution`1._gamma">
      <summary>
              Stores the parameter gamma which is used for generation of cauchy distributed random numbers.
            </summary>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.CauchyDistribution`1.#ctor(`0,System.Double,System.Double)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.CauchyDistribution" /> class,
              using the specified <see cref="T:Troschuetz.Random.IGenerator" /> as underlying random number generator.
            </summary>
      <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator" /> object.</param>
      <param name="alpha">
              The parameter alpha which is used for generation of cauchy distributed random numbers.
            </param>
      <param name="gamma">
              The parameter gamma which is used for generation of cauchy distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="generator" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="gamma" /> is less than or equal to zero.
            </exception>
      <requires exception="T:System.ArgumentNullException" csharp="!ReferenceEquals((object)generator, null)" vb="Not ReferenceEquals(((Object)generator), Nothing)">!object.ReferenceEquals((object)generator, null)</requires>
      <exception cref="T:System.ArgumentNullException">object.ReferenceEquals((object)generator, null)</exception>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="AreValidParams(alpha, gamma)" vb="AreValidParams(alpha, gamma)">Troschuetz.Random.Distributions.Continuous.CauchyDistribution&lt;TGen&gt;.AreValidParams(alpha, gamma)</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">!Troschuetz.Random.Distributions.Continuous.CauchyDistribution&lt;TGen&gt;.AreValidParams(alpha, gamma)</exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.CauchyDistribution`1.IsValidAlpha(System.Double)">
      <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.Distributions.Continuous.CauchyDistribution`1.Alpha" />.
            </summary>
      <param name="value">The value to check.</param>
      <returns>
        <see langword="true" />.</returns>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.CauchyDistribution`1.IsValidGamma(System.Double)">
      <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.Distributions.Continuous.CauchyDistribution`1.Gamma" />.
            </summary>
      <param name="value">The value to check.</param>
      <returns>
        <see langword="true" /> if value is greater than 0; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.CauchyDistribution`1.AreValidParams(System.Double,System.Double)">
      <summary>
              Determines whether cauchy distribution is defined under given parameters.
            </summary>
      <param name="alpha">
              The parameter alpha which is used for generation of cauchy distributed random numbers.
            </param>
      <param name="gamma">
              The parameter gamma which is used for generation of cauchy distributed random numbers.
            </param>
      <returns>
              True if <paramref name="gamma" /> is greater than zero; otherwise, it returns false.
            </returns>
      <pure />
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.CauchyDistribution`1.Sample(`0,System.Double,System.Double)">
      <summary>
              Returns a cauchy distributed floating point random number.
            </summary>
      <param name="generator">The generator from which random number are drawn.</param>
      <param name="alpha">
              The parameter alpha which is used for generation of cauchy distributed random numbers.
            </param>
      <param name="gamma">
              The parameter gamma which is used for generation of cauchy distributed random numbers.
            </param>
      <returns>
              A cauchy distributed floating point random number.
            </returns>
      <pure />
    </member>
    <member name="P:Troschuetz.Random.Distributions.Continuous.CauchyDistribution`1.Alpha">
      <summary>
              Gets or sets the parameter alpha of cauchy distributed random numbers which is used for their generation.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />.
            </exception>
      <remarks>
              Calls <see cref="M:Troschuetz.Random.Distributions.Continuous.CauchyDistribution`1.AreValidParams(System.Double,System.Double)" /> to determine whether a value is valid and therefore assignable.
            </remarks>
      <setter>
        <requires inheritedFrom="M:Troschuetz.Random.IAlphaDistribution`1.set_Alpha(`0)" inheritedFromTypeName="IAlphaDistribution" exception="T:System.ArgumentOutOfRangeException" csharp="this.IsValidAlpha(value)" vb="Me.IsValidAlpha(value)">this.IsValidAlpha(value)</requires>
        <ensures inheritedFrom="M:Troschuetz.Random.IAlphaDistribution`1.set_Alpha(`0)" inheritedFromTypeName="IAlphaDistribution" csharp="this.Alpha.Equals((object)value)" vb="Me.Alpha.Equals(((Object)value))">this.Alpha.Equals((object)value)</ensures>
      </setter>
      <exception cref="T:System.ArgumentOutOfRangeException">!this.IsValidAlpha(value)</exception>
    </member>
    <member name="P:Troschuetz.Random.Distributions.Continuous.CauchyDistribution`1.Gamma">
      <summary>
              Gets or sets the parameter gamma which is used for generation of cauchy distributed random numbers.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is less than or equal to zero.
            </exception>
      <remarks>
              Calls <see cref="M:Troschuetz.Random.Distributions.Continuous.CauchyDistribution`1.AreValidParams(System.Double,System.Double)" /> to determine whether a value is valid and therefore assignable.
            </remarks>
      <setter>
        <requires inheritedFrom="M:Troschuetz.Random.IGammaDistribution`1.set_Gamma(`0)" inheritedFromTypeName="IGammaDistribution" exception="T:System.ArgumentOutOfRangeException" csharp="this.IsValidGamma(value)" vb="Me.IsValidGamma(value)">this.IsValidGamma(value)</requires>
        <ensures inheritedFrom="M:Troschuetz.Random.IGammaDistribution`1.set_Gamma(`0)" inheritedFromTypeName="IGammaDistribution" csharp="this.Gamma.Equals((object)value)" vb="Me.Gamma.Equals(((Object)value))">this.Gamma.Equals((object)value)</ensures>
      </setter>
      <exception cref="T:System.ArgumentOutOfRangeException">!this.IsValidGamma(value)</exception>
    </member>
    <member name="T:Troschuetz.Random.Distributions.Continuous.CauchyDistribution">
      <summary>
              Provides generation of cauchy distributed random numbers.
            </summary>
      <remarks>
              The implementation of the <see cref="T:Troschuetz.Random.Distributions.Continuous.CauchyDistribution" /> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/Cauchy_distribution">Wikipedia - Cauchy distribution</a> and
              <a href="http://www.xycoon.com/cauchy2p_random.htm">Xycoon - Cauchy Distribution</a>.
            </remarks>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.CauchyDistribution.#ctor">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.CauchyDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> as underlying random number generator.
            </summary>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.CauchyDistribution.#ctor(System.UInt32)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.CauchyDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> with the specified seed value.
            </summary>
      <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.CauchyDistribution.#ctor(Troschuetz.Random.IGenerator)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.CauchyDistribution" /> class,
              using the specified <see cref="T:Troschuetz.Random.IGenerator" /> as underlying random number generator.
            </summary>
      <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator" /> object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="generator" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.CauchyDistribution.#ctor(System.Double,System.Double)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.CauchyDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> as underlying random number generator.
            </summary>
      <param name="alpha">
              The parameter alpha which is used for generation of cauchy distributed random numbers.
            </param>
      <param name="gamma">
              The parameter gamma which is used for generation of cauchy distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="gamma" /> is less than or equal to zero.
            </exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.CauchyDistribution.#ctor(System.UInt32,System.Double,System.Double)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.CauchyDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> with the specified seed value.
            </summary>
      <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
      <param name="alpha">
              The parameter alpha which is used for generation of cauchy distributed random numbers.
            </param>
      <param name="gamma">
              The parameter gamma which is used for generation of cauchy distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="gamma" /> is less than or equal to zero.
            </exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.CauchyDistribution.#ctor(Troschuetz.Random.IGenerator,System.Double,System.Double)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.CauchyDistribution" /> class,
              using the specified <see cref="T:Troschuetz.Random.IGenerator" /> as underlying random number generator.
            </summary>
      <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator" /> object.</param>
      <param name="alpha">
              The parameter alpha which is used for generation of cauchy distributed random numbers.
            </param>
      <param name="gamma">
              The parameter gamma which is used for generation of cauchy distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="generator" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="gamma" /> is less than or equal to zero.
            </exception>
    </member>
    <member name="T:Troschuetz.Random.Distributions.Continuous.ChiDistribution`1">
      <summary>
              Provides generation of chi distributed random numbers.
            </summary>
      <remarks>
              The implementation of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ChiDistribution" /> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/Chi_distribution">Wikipedia - Chi distribution</a>.
            </remarks>
    </member>
    <member name="F:Troschuetz.Random.Distributions.Continuous.ChiDistribution`1.DefaultAlpha">
      <summary>
              The default value assigned to <see cref="P:Troschuetz.Random.Distributions.Continuous.ChiDistribution`1.Alpha" /> if none is specified. 
            </summary>
    </member>
    <member name="F:Troschuetz.Random.Distributions.Continuous.ChiDistribution`1.LanczosCoefficients">
      <summary>
              Represents coefficients for the Lanczos approximation of the Gamma function.
            </summary>
    </member>
    <member name="F:Troschuetz.Random.Distributions.Continuous.ChiDistribution`1._alpha">
      <summary>
              Stores the parameter alpha which is used for generation of chi distributed random numbers.
            </summary>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.ChiDistribution`1.#ctor(`0,System.Int32)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ChiDistribution" /> class,
              using the specified <see cref="T:Troschuetz.Random.IGenerator" /> as underlying random number generator.
            </summary>
      <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator" /> object.</param>
      <param name="alpha">
              The parameter alpha which is used for generation of chi distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="generator" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> is less than or equal to zero.
            </exception>
      <requires exception="T:System.ArgumentNullException" csharp="!ReferenceEquals((object)generator, null)" vb="Not ReferenceEquals(((Object)generator), Nothing)">!object.ReferenceEquals((object)generator, null)</requires>
      <exception cref="T:System.ArgumentNullException">object.ReferenceEquals((object)generator, null)</exception>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="IsValidParam(alpha)" vb="IsValidParam(alpha)">Troschuetz.Random.Distributions.Continuous.ChiDistribution&lt;TGen&gt;.IsValidParam(alpha)</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">!Troschuetz.Random.Distributions.Continuous.ChiDistribution&lt;TGen&gt;.IsValidParam(alpha)</exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.ChiDistribution`1.IsValidAlpha(System.Int32)">
      <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.Distributions.Continuous.ChiDistribution`1.Alpha" />.
            </summary>
      <param name="value">The value to check.</param>
      <returns>
        <see langword="true" /> if value is greater than 0; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.ChiDistribution`1.Gamma(System.Double)">
      <summary>
              Represents a Lanczos approximation of the Gamma function.
            </summary>
      <param name="x">A double-precision floating point number.</param>
      <returns>
              A double-precision floating point number representing an approximation of Gamma(<paramref name="x" />).
            </returns>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.ChiDistribution`1.IsValidParam(System.Int32)">
      <summary>
              Determines whether chi distribution is defined under given parameter.
            </summary>
      <param name="alpha">
              The parameter alpha which is used for generation of chi distributed random numbers.
            </param>
      <returns>
              True if <paramref name="alpha" /> is greater than zero; otherwise, it returns false.
            </returns>
      <pure />
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.ChiDistribution`1.Sample(`0,System.Int32)">
      <summary>
              Returns a chi distributed floating point random number.
            </summary>
      <param name="generator">The generator from which random number are drawn.</param>
      <param name="alpha">
              The parameter alpha which is used for generation of chi distributed random numbers.
            </param>
      <returns>
              A chi distributed floating point random number.
            </returns>
      <pure />
    </member>
    <member name="P:Troschuetz.Random.Distributions.Continuous.ChiDistribution`1.Alpha">
      <summary>
              Gets or sets the parameter alpha which is used for generation of chi distributed random numbers.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is less than or equal to zero.
            </exception>
      <remarks>
              Calls <see cref="M:Troschuetz.Random.Distributions.Continuous.ChiDistribution`1.IsValidParam(System.Int32)" /> to determine whether a value is valid and therefore assignable.
            </remarks>
      <setter>
        <requires inheritedFrom="M:Troschuetz.Random.IAlphaDistribution`1.set_Alpha(`0)" inheritedFromTypeName="IAlphaDistribution" exception="T:System.ArgumentOutOfRangeException" csharp="this.IsValidAlpha(value)" vb="Me.IsValidAlpha(value)">this.IsValidAlpha(value)</requires>
        <ensures inheritedFrom="M:Troschuetz.Random.IAlphaDistribution`1.set_Alpha(`0)" inheritedFromTypeName="IAlphaDistribution" csharp="this.Alpha.Equals((object)value)" vb="Me.Alpha.Equals(((Object)value))">this.Alpha.Equals((object)value)</ensures>
      </setter>
      <exception cref="T:System.ArgumentOutOfRangeException">!this.IsValidAlpha(value)</exception>
    </member>
    <member name="T:Troschuetz.Random.Distributions.Continuous.ChiDistribution">
      <summary>
              Provides generation of chi distributed random numbers.
            </summary>
      <remarks>
              The implementation of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ChiDistribution" /> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/Chi_distribution">Wikipedia - Chi distribution</a>.
            </remarks>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.ChiDistribution.#ctor">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ChiDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> as underlying random number generator.
            </summary>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.ChiDistribution.#ctor(System.UInt32)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ChiDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> with the specified seed value.
            </summary>
      <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.ChiDistribution.#ctor(Troschuetz.Random.IGenerator)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ChiDistribution" /> class,
              using the specified <see cref="T:Troschuetz.Random.IGenerator" /> as underlying random number generator.
            </summary>
      <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator" /> object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="generator" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.ChiDistribution.#ctor(System.Int32)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ChiDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> as underlying random number generator.
            </summary>
      <param name="alpha">
              The parameter alpha which is used for generation of chi distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> is less than or equal to zero.
            </exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.ChiDistribution.#ctor(System.UInt32,System.Int32)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ChiDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> with the specified seed value.
            </summary>
      <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
      <param name="alpha">
              The parameter alpha which is used for generation of chi distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> is less than or equal to zero.
            </exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.ChiDistribution.#ctor(Troschuetz.Random.IGenerator,System.Int32)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ChiDistribution" /> class,
              using the specified <see cref="T:Troschuetz.Random.IGenerator" /> as underlying random number generator.
            </summary>
      <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator" /> object.</param>
      <param name="alpha">
              The parameter alpha which is used for generation of chi distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="generator" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> is less than or equal to zero.
            </exception>
    </member>
    <member name="T:Troschuetz.Random.Distributions.Continuous.ChiSquareDistribution`1">
      <summary>
              Provides generation of chi-square distributed random numbers.
            </summary>
      <remarks>
              The implementation of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ChiSquareDistribution" /> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/Chi-square_distribution">Wikipedia - Chi-square distribution</a>.
            </remarks>
    </member>
    <member name="F:Troschuetz.Random.Distributions.Continuous.ChiSquareDistribution`1.DefaultAlpha">
      <summary>
              The default value assigned to <see cref="P:Troschuetz.Random.Distributions.Continuous.ChiSquareDistribution`1.Alpha" /> if none is specified. 
            </summary>
    </member>
    <member name="F:Troschuetz.Random.Distributions.Continuous.ChiSquareDistribution`1._alpha">
      <summary>
              Stores the parameter alpha which is used for generation of chi square distributed random numbers.
            </summary>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.ChiSquareDistribution`1.#ctor(`0,System.Int32)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ChiSquareDistribution" /> class,
              using the specified <see cref="T:Troschuetz.Random.IGenerator" /> as underlying random number generator.
            </summary>
      <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator" /> object.</param>
      <param name="alpha">
              The parameter alpha which is used for generation of chi square distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="generator" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> is less than or equal to zero.
            </exception>
      <requires exception="T:System.ArgumentNullException" csharp="!ReferenceEquals((object)generator, null)" vb="Not ReferenceEquals(((Object)generator), Nothing)">!object.ReferenceEquals((object)generator, null)</requires>
      <exception cref="T:System.ArgumentNullException">object.ReferenceEquals((object)generator, null)</exception>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="IsValidParam(alpha)" vb="IsValidParam(alpha)">Troschuetz.Random.Distributions.Continuous.ChiSquareDistribution&lt;TGen&gt;.IsValidParam(alpha)</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">!Troschuetz.Random.Distributions.Continuous.ChiSquareDistribution&lt;TGen&gt;.IsValidParam(alpha)</exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.ChiSquareDistribution`1.IsValidAlpha(System.Int32)">
      <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.Distributions.Continuous.ChiSquareDistribution`1.Alpha" />.
            </summary>
      <param name="value">The value to check.</param>
      <returns>
        <see langword="true" /> if value is greater than 0; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.ChiSquareDistribution`1.IsValidParam(System.Int32)">
      <summary>
              Determines whether chi square distribution is defined under given parameter.
            </summary>
      <param name="alpha">
              The parameter alpha which is used for generation of chi square distributed random numbers.
            </param>
      <returns>
              True if <paramref name="alpha" /> is greater than zero; otherwise, it returns false.
            </returns>
      <pure />
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.ChiSquareDistribution`1.Sample(`0,System.Int32)">
      <summary>
              Returns a chi square distributed floating point random number.
            </summary>
      <param name="generator">The generator from which random number are drawn.</param>
      <param name="alpha">
              The parameter alpha which is used for generation of chi square distributed random numbers.
            </param>
      <returns>
              A chi square distributed floating point random number.
            </returns>
      <pure />
    </member>
    <member name="P:Troschuetz.Random.Distributions.Continuous.ChiSquareDistribution`1.Alpha">
      <summary>
              Gets or sets the parameter alpha which is used for generation of chi-square distributed random numbers.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is less than or equal to zero.
            </exception>
      <remarks>
              Calls <see cref="M:Troschuetz.Random.Distributions.Continuous.ChiSquareDistribution`1.IsValidParam(System.Int32)" /> to determine whether a value is valid and therefore assignable.
            </remarks>
      <setter>
        <requires inheritedFrom="M:Troschuetz.Random.IAlphaDistribution`1.set_Alpha(`0)" inheritedFromTypeName="IAlphaDistribution" exception="T:System.ArgumentOutOfRangeException" csharp="this.IsValidAlpha(value)" vb="Me.IsValidAlpha(value)">this.IsValidAlpha(value)</requires>
        <ensures inheritedFrom="M:Troschuetz.Random.IAlphaDistribution`1.set_Alpha(`0)" inheritedFromTypeName="IAlphaDistribution" csharp="this.Alpha.Equals((object)value)" vb="Me.Alpha.Equals(((Object)value))">this.Alpha.Equals((object)value)</ensures>
      </setter>
      <exception cref="T:System.ArgumentOutOfRangeException">!this.IsValidAlpha(value)</exception>
    </member>
    <member name="T:Troschuetz.Random.Distributions.Continuous.ChiSquareDistribution">
      <summary>
              Provides generation of chi-square distributed random numbers.
            </summary>
      <remarks>
              The implementation of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ChiSquareDistribution" /> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/Chi-square_distribution">Wikipedia - Chi-square distribution</a>.
            </remarks>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.ChiSquareDistribution.#ctor">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ChiSquareDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> as underlying random number generator.
            </summary>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.ChiSquareDistribution.#ctor(System.UInt32)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ChiSquareDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> with the specified seed value.
            </summary>
      <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.ChiSquareDistribution.#ctor(Troschuetz.Random.IGenerator)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ChiSquareDistribution" /> class,
              using the specified <see cref="T:Troschuetz.Random.IGenerator" /> as underlying random number generator.
            </summary>
      <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator" /> object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="generator" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.ChiSquareDistribution.#ctor(System.Int32)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ChiSquareDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> as underlying random number generator.
            </summary>
      <param name="alpha">
              The parameter alpha which is used for generation of chi square distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> is less than or equal to zero.
            </exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.ChiSquareDistribution.#ctor(System.UInt32,System.Int32)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ChiSquareDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> with the specified seed value.
            </summary>
      <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
      <param name="alpha">
              The parameter alpha which is used for generation of chi square distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> is less than or equal to zero.
            </exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.ChiSquareDistribution.#ctor(Troschuetz.Random.IGenerator,System.Int32)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ChiSquareDistribution" /> class,
              using the specified <see cref="T:Troschuetz.Random.IGenerator" /> as underlying random number generator.
            </summary>
      <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator" /> object.</param>
      <param name="alpha">
              The parameter alpha which is used for generation of chi square distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="generator" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> is less than or equal to zero.
            </exception>
    </member>
    <member name="T:Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution`1">
      <summary>
              Provides generation of continuous uniformly distributed random numbers.
            </summary>
      <remarks>
              The implementation of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution" /> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/Uniform_distribution_%28continuous%29"> 
              Wikipedia - Uniform distribution (continuous)</a>.
            </remarks>
    </member>
    <member name="F:Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution`1.DefaultAlpha">
      <summary>
              The default value assigned to <see cref="P:Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution`1.Alpha" /> if none is specified. 
            </summary>
    </member>
    <member name="F:Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution`1.DefaultBeta">
      <summary>
              The default value assigned to <see cref="P:Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution`1.Beta" /> if none is specified. 
            </summary>
    </member>
    <member name="F:Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution`1._alpha">
      <summary>
              Stores the parameter alpha which is used for generation of uniformly distributed random numbers.
            </summary>
    </member>
    <member name="F:Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution`1._beta">
      <summary>
              Stores the parameter beta which is used for generation of uniformly distributed random numbers.
            </summary>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution`1.#ctor(`0,System.Double,System.Double)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution" /> class,
              using the specified <see cref="T:Troschuetz.Random.IGenerator" /> as underlying random number generator.
            </summary>
      <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator" /> object.</param>
      <param name="alpha">
              The parameter alpha which is used for generation of continuous uniform distributed random numbers.
            </param>
      <param name="beta">
              The parameter beta which is used for generation of continuous uniform distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="generator" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> is greater than <paramref name="beta" />.
            </exception>
      <requires exception="T:System.ArgumentNullException" csharp="!ReferenceEquals((object)generator, null)" vb="Not ReferenceEquals(((Object)generator), Nothing)">!object.ReferenceEquals((object)generator, null)</requires>
      <exception cref="T:System.ArgumentNullException">object.ReferenceEquals((object)generator, null)</exception>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="AreValidParams(alpha, beta)" vb="AreValidParams(alpha, beta)">Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution&lt;TGen&gt;.AreValidParams(alpha, beta)</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">!Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution&lt;TGen&gt;.AreValidParams(alpha, beta)</exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution`1.IsValidAlpha(System.Double)">
      <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution`1.Alpha" />.
            </summary>
      <param name="value">The value to check.</param>
      <returns>
        <see langword="true" /> if value is less than or equal to <see cref="P:Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution`1.Beta" />; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution`1.IsValidBeta(System.Double)">
      <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution`1.Beta" />.
            </summary>
      <param name="value">The value to check.</param>
      <returns>
        <see langword="true" /> if value is greater than or equal to <see cref="P:Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution`1.Alpha" />;
              otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution`1.AreValidParams(System.Double,System.Double)">
      <summary>
              Determines whether continuous uniform distribution is defined under given parameters.
            </summary>
      <param name="alpha">
              The parameter alpha which is used for generation of continuous uniform distributed random numbers.
            </param>
      <param name="beta">
              The parameter beta which is used for generation of continuous uniform distributed random numbers.
            </param>
      <returns>
              True if <paramref name="alpha" /> is less than or equal to <paramref name="beta" />;
              otherwise, it returns false.
            </returns>
      <pure />
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution`1.Sample(`0,System.Double,System.Double)">
      <summary>
              Returns a continuous uniform distributed floating point random number.
            </summary>
      <param name="generator">The generator from which random number are drawn.</param>
      <param name="alpha">
              The parameter alpha which is used for generation of continuous uniform distributed random numbers.
            </param>
      <param name="beta">
              The parameter beta which is used for generation of continuous uniform distributed random numbers.
            </param>
      <returns>
              A continuous uniform distributed floating point random number.
            </returns>
      <pure />
    </member>
    <member name="P:Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution`1.Alpha">
      <summary>
              Gets or sets the parameter alpha which is used for generation of uniformly distributed random numbers.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is greater than <see cref="P:Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution`1.Beta" />.
            </exception>
      <remarks>
              Calls <see cref="M:Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution`1.AreValidParams(System.Double,System.Double)" /> to determine whether a value is valid and therefore assignable.
            </remarks>
      <setter>
        <requires inheritedFrom="M:Troschuetz.Random.IAlphaDistribution`1.set_Alpha(`0)" inheritedFromTypeName="IAlphaDistribution" exception="T:System.ArgumentOutOfRangeException" csharp="this.IsValidAlpha(value)" vb="Me.IsValidAlpha(value)">this.IsValidAlpha(value)</requires>
        <ensures inheritedFrom="M:Troschuetz.Random.IAlphaDistribution`1.set_Alpha(`0)" inheritedFromTypeName="IAlphaDistribution" csharp="this.Alpha.Equals((object)value)" vb="Me.Alpha.Equals(((Object)value))">this.Alpha.Equals((object)value)</ensures>
      </setter>
      <exception cref="T:System.ArgumentOutOfRangeException">!this.IsValidAlpha(value)</exception>
    </member>
    <member name="P:Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution`1.Beta">
      <summary>
              Gets or sets the parameter beta which is used for generation of uniformly distributed random numbers.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="P:Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution`1.Alpha" /> is greater than <paramref name="value" />.
            </exception>
      <remarks>
              Calls <see cref="M:Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution`1.AreValidParams(System.Double,System.Double)" /> to determine whether a value is valid and therefore assignable.
            </remarks>
      <setter>
        <requires inheritedFrom="M:Troschuetz.Random.IBetaDistribution`1.set_Beta(`0)" inheritedFromTypeName="IBetaDistribution" exception="T:System.ArgumentOutOfRangeException" csharp="this.IsValidBeta(value)" vb="Me.IsValidBeta(value)">this.IsValidBeta(value)</requires>
        <ensures inheritedFrom="M:Troschuetz.Random.IBetaDistribution`1.set_Beta(`0)" inheritedFromTypeName="IBetaDistribution" csharp="this.Beta.Equals((object)value)" vb="Me.Beta.Equals(((Object)value))">this.Beta.Equals((object)value)</ensures>
      </setter>
      <exception cref="T:System.ArgumentOutOfRangeException">!this.IsValidBeta(value)</exception>
    </member>
    <member name="T:Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution">
      <summary>
              Provides generation of continuous uniformly distributed random numbers.
            </summary>
      <remarks>
              The implementation of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution" /> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/Uniform_distribution_%28continuous%29"> 
              Wikipedia - Uniform distribution (continuous)</a>.
            </remarks>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution.#ctor">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> as underlying random number generator.
            </summary>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution.#ctor(System.UInt32)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> with the specified seed value.
            </summary>
      <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution.#ctor(Troschuetz.Random.IGenerator)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution" /> class,
              using the specified <see cref="T:Troschuetz.Random.IGenerator" /> as underlying random number generator.
            </summary>
      <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator" /> object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="generator" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution.#ctor(System.Double,System.Double)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> as underlying random number generator.
            </summary>
      <param name="alpha">
              The parameter alpha which is used for generation of continuous uniform distributed random numbers.
            </param>
      <param name="beta">
              The parameter beta which is used for generation of continuous uniform distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> is greater than <paramref name="beta" />.
            </exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution.#ctor(System.UInt32,System.Double,System.Double)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> with the specified seed value.
            </summary>
      <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
      <param name="alpha">
              The parameter alpha which is used for generation of continuous uniform distributed random numbers.
            </param>
      <param name="beta">
              The parameter beta which is used for generation of continuous uniform distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> is greater than <paramref name="beta" />.
            </exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution.#ctor(Troschuetz.Random.IGenerator,System.Double,System.Double)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution" /> class,
              using the specified <see cref="T:Troschuetz.Random.IGenerator" /> as underlying random number generator.
            </summary>
      <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator" /> object.</param>
      <param name="alpha">
              The parameter alpha which is used for generation of continuous uniform distributed random numbers.
            </param>
      <param name="beta">
              The parameter beta which is used for generation of continuous uniform distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="generator" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> is greater than <paramref name="beta" />.
            </exception>
    </member>
    <member name="T:Troschuetz.Random.Distributions.Continuous.ErlangDistribution`1">
      <summary>
              Provides generation of erlang distributed random numbers.
            </summary>
      <remarks>
              The implementation of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ErlangDistribution" /> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/Erlang_distribution">Wikipedia - Erlang distribution</a> and
              <a href="http://www.xycoon.com/erlang_random.htm">Xycoon - Erlang Distribution</a>.
            </remarks>
    </member>
    <member name="F:Troschuetz.Random.Distributions.Continuous.ErlangDistribution`1.DefaultAlpha">
      <summary>
              The default value assigned to <see cref="P:Troschuetz.Random.Distributions.Continuous.ErlangDistribution`1.Alpha" /> if none is specified. 
            </summary>
    </member>
    <member name="F:Troschuetz.Random.Distributions.Continuous.ErlangDistribution`1.DefaultLambda">
      <summary>
              The default value assigned to <see cref="P:Troschuetz.Random.Distributions.Continuous.ErlangDistribution`1.Lambda" /> if none is specified. 
            </summary>
    </member>
    <member name="F:Troschuetz.Random.Distributions.Continuous.ErlangDistribution`1._lambda">
      <summary>
              Stores the parameter lambda which is used for generation of rayleigh distributed random numbers.
            </summary>
    </member>
    <member name="F:Troschuetz.Random.Distributions.Continuous.ErlangDistribution`1._alpha">
      <summary>
              Stores the parameter alpha which is used for generation of rayleigh distributed random numbers.
            </summary>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.ErlangDistribution`1.#ctor(`0,System.Int32,System.Double)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ErlangDistribution" /> class,
              using the specified <see cref="T:Troschuetz.Random.IGenerator" /> as underlying random number generator.
            </summary>
      <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator" /> object.</param>
      <param name="alpha">
              The parameter alpha which is used for generation of erlang distributed random numbers.
            </param>
      <param name="lambda">
              The parameter lambda which is used for generation of erlang distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="generator" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> or <paramref name="lambda" /> are less than or equal to zero.
            </exception>
      <requires exception="T:System.ArgumentNullException" csharp="!ReferenceEquals((object)generator, null)" vb="Not ReferenceEquals(((Object)generator), Nothing)">!object.ReferenceEquals((object)generator, null)</requires>
      <exception cref="T:System.ArgumentNullException">object.ReferenceEquals((object)generator, null)</exception>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="AreValidParams(alpha, lambda)" vb="AreValidParams(alpha, lambda)">Troschuetz.Random.Distributions.Continuous.ErlangDistribution&lt;TGen&gt;.AreValidParams(alpha, lambda)</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">!Troschuetz.Random.Distributions.Continuous.ErlangDistribution&lt;TGen&gt;.AreValidParams(alpha, lambda)</exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.ErlangDistribution`1.IsValidAlpha(System.Int32)">
      <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.Distributions.Continuous.ErlangDistribution`1.Alpha" />.
            </summary>
      <param name="value">The value to check.</param>
      <returns>
        <see langword="true" /> if value is greater than 0; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.ErlangDistribution`1.IsValidLambda(System.Double)">
      <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.Distributions.Continuous.ErlangDistribution`1.Lambda" />.
            </summary>
      <param name="value">The value to check.</param>
      <returns>
        <see langword="true" /> if value is greater than 0.0; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.ErlangDistribution`1.AreValidParams(System.Int32,System.Double)">
      <summary>
              Determines whether erlang distribution is defined under given parameters.
            </summary>
      <param name="alpha">
              The parameter alpha which is used for generation of erlang distributed random numbers.
            </param>
      <param name="lambda">
              The parameter lambda which is used for generation of erlang distributed random numbers.
            </param>
      <returns>
              True if <paramref name="alpha" /> and <paramref name="lambda" /> are greater than zero;
              otherwise, it returns false.
            </returns>
      <pure />
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.ErlangDistribution`1.Sample(`0,System.Int32,System.Double)">
      <summary>
              Returns an erlang distributed floating point random number.
            </summary>
      <param name="generator">The generator from which random number are drawn.</param>
      <param name="alpha">
              The parameter alpha which is used for generation of erlang distributed random numbers.
            </param>
      <param name="lambda">
              The parameter lambda which is used for generation of erlang distributed random numbers.
            </param>
      <returns>
              An erlang distributed floating point random number.
            </returns>
      <pure />
    </member>
    <member name="P:Troschuetz.Random.Distributions.Continuous.ErlangDistribution`1.Alpha">
      <summary>
              Gets or sets the parameter alpha which is used for generation of erlang distributed random numbers.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is less than or equal to zero.
            </exception>
      <remarks>
              Calls <see cref="M:Troschuetz.Random.Distributions.Continuous.ErlangDistribution`1.AreValidParams(System.Int32,System.Double)" /> to determine whether a value is valid and therefore assignable.
            </remarks>
      <setter>
        <requires inheritedFrom="M:Troschuetz.Random.IAlphaDistribution`1.set_Alpha(`0)" inheritedFromTypeName="IAlphaDistribution" exception="T:System.ArgumentOutOfRangeException" csharp="this.IsValidAlpha(value)" vb="Me.IsValidAlpha(value)">this.IsValidAlpha(value)</requires>
        <ensures inheritedFrom="M:Troschuetz.Random.IAlphaDistribution`1.set_Alpha(`0)" inheritedFromTypeName="IAlphaDistribution" csharp="this.Alpha.Equals((object)value)" vb="Me.Alpha.Equals(((Object)value))">this.Alpha.Equals((object)value)</ensures>
      </setter>
      <exception cref="T:System.ArgumentOutOfRangeException">!this.IsValidAlpha(value)</exception>
    </member>
    <member name="P:Troschuetz.Random.Distributions.Continuous.ErlangDistribution`1.Lambda">
      <summary>
              Gets or sets the parameter lambda which is used for generation of erlang distributed random numbers.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is less than or equal to zero.
            </exception>
      <remarks>
              Calls <see cref="M:Troschuetz.Random.Distributions.Continuous.ErlangDistribution`1.AreValidParams(System.Int32,System.Double)" /> to determine whether a value is valid and therefore assignable.
            </remarks>
      <setter>
        <requires inheritedFrom="M:Troschuetz.Random.ILambdaDistribution`1.set_Lambda(`0)" inheritedFromTypeName="ILambdaDistribution" exception="T:System.ArgumentOutOfRangeException" csharp="this.IsValidLambda(value)" vb="Me.IsValidLambda(value)">this.IsValidLambda(value)</requires>
        <ensures inheritedFrom="M:Troschuetz.Random.ILambdaDistribution`1.set_Lambda(`0)" inheritedFromTypeName="ILambdaDistribution" csharp="this.Lambda.Equals((object)value)" vb="Me.Lambda.Equals(((Object)value))">this.Lambda.Equals((object)value)</ensures>
      </setter>
      <exception cref="T:System.ArgumentOutOfRangeException">!this.IsValidLambda(value)</exception>
    </member>
    <member name="T:Troschuetz.Random.Distributions.Continuous.ErlangDistribution">
      <summary>
              Provides generation of erlang distributed random numbers.
            </summary>
      <remarks>
              The implementation of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ErlangDistribution" /> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/Erlang_distribution">Wikipedia - Erlang distribution</a> and
              <a href="http://www.xycoon.com/erlang_random.htm">Xycoon - Erlang Distribution</a>.
            </remarks>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.ErlangDistribution.#ctor">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ErlangDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> as underlying random number generator.
            </summary>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.ErlangDistribution.#ctor(System.UInt32)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ErlangDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> with the specified seed value.
            </summary>
      <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.ErlangDistribution.#ctor(Troschuetz.Random.IGenerator)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ErlangDistribution" /> class,
              using the specified <see cref="T:Troschuetz.Random.IGenerator" /> as underlying random number generator.
            </summary>
      <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator" /> object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="generator" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.ErlangDistribution.#ctor(System.Int32,System.Double)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ErlangDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> as underlying random number generator.
            </summary>
      <param name="alpha">
              The parameter alpha which is used for generation of erlang distributed random numbers.
            </param>
      <param name="lambda">
              The parameter lambda which is used for generation of erlang distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> or <paramref name="lambda" /> are less than or equal to zero.
            </exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.ErlangDistribution.#ctor(System.UInt32,System.Int32,System.Double)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ErlangDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> with the specified seed value.
            </summary>
      <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
      <param name="alpha">
              The parameter alpha which is used for generation of erlang distributed random numbers.
            </param>
      <param name="lambda">
              The parameter lambda which is used for generation of erlang distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> or <paramref name="lambda" /> are less than or equal to zero.
            </exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.ErlangDistribution.#ctor(Troschuetz.Random.IGenerator,System.Int32,System.Double)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ErlangDistribution" /> class,
              using the specified <see cref="T:Troschuetz.Random.IGenerator" /> as underlying random number generator.
            </summary>
      <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator" /> object.</param>
      <param name="alpha">
              The parameter alpha which is used for generation of erlang distributed random numbers.
            </param>
      <param name="lambda">
              The parameter lambda which is used for generation of erlang distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="generator" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> or <paramref name="lambda" /> are less than or equal to zero.
            </exception>
    </member>
    <member name="T:Troschuetz.Random.Distributions.Continuous.ExponentialDistribution`1">
      <summary>
              Provides generation of exponential distributed random numbers.
            </summary>
      <remarks>
              The implementation of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ExponentialDistribution" /> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/Exponential_distribution">Wikipedia - Exponential distribution</a>.
            </remarks>
    </member>
    <member name="F:Troschuetz.Random.Distributions.Continuous.ExponentialDistribution`1.DefaultLambda">
      <summary>
              The default value assigned to <see cref="P:Troschuetz.Random.Distributions.Continuous.ExponentialDistribution`1.Lambda" /> if none is specified. 
            </summary>
    </member>
    <member name="F:Troschuetz.Random.Distributions.Continuous.ExponentialDistribution`1._lambda">
      <summary>
              Stores the parameter lambda which is used for generation of exponential distributed random numbers.
            </summary>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.ExponentialDistribution`1.#ctor(`0,System.Double)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ExponentialDistribution" /> class,
              using the specified <see cref="T:Troschuetz.Random.IGenerator" /> as underlying random number generator.
            </summary>
      <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator" /> object.</param>
      <param name="lambda">
              The parameter lambda which is used for generation of exponential distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="generator" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="lambda" /> is less than or equal to zero.
            </exception>
      <requires exception="T:System.ArgumentNullException" csharp="!ReferenceEquals((object)generator, null)" vb="Not ReferenceEquals(((Object)generator), Nothing)">!object.ReferenceEquals((object)generator, null)</requires>
      <exception cref="T:System.ArgumentNullException">object.ReferenceEquals((object)generator, null)</exception>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="IsValidParam(lambda)" vb="IsValidParam(lambda)">Troschuetz.Random.Distributions.Continuous.ExponentialDistribution&lt;TGen&gt;.IsValidParam(lambda)</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">!Troschuetz.Random.Distributions.Continuous.ExponentialDistribution&lt;TGen&gt;.IsValidParam(lambda)</exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.ExponentialDistribution`1.IsValidLambda(System.Double)">
      <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.Distributions.Continuous.ExponentialDistribution`1.Lambda" />.
            </summary>
      <param name="value">The value to check.</param>
      <returns>
        <see langword="true" /> if value is greater than 0.0; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.ExponentialDistribution`1.IsValidParam(System.Double)">
      <summary>
              Determines whether exponential distribution is defined under given parameter.
            </summary>
      <param name="lambda">
              The parameter lambda which is used for generation of exponential distributed random numbers.
            </param>
      <returns>
              True if <paramref name="lambda" /> is greater than zero; otherwise, it returns false.
            </returns>
      <pure />
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.ExponentialDistribution`1.Sample(`0,System.Double)">
      <summary>
              Returns an exponential distributed floating point random number.
            </summary>
      <param name="generator">The generator from which random number are drawn.</param>
      <param name="lambda">
              The parameter lambda which is used for generation of exponential distributed random numbers.
            </param>
      <returns>
              An exponential distributed floating point random number.
            </returns>
      <pure />
    </member>
    <member name="P:Troschuetz.Random.Distributions.Continuous.ExponentialDistribution`1.Lambda">
      <summary>
              Gets or sets the parameter lambda which is used for generation of exponential distributed random numbers.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is less than or equal to zero.
            </exception>
      <remarks>
              Calls <see cref="M:Troschuetz.Random.Distributions.Continuous.ExponentialDistribution`1.IsValidParam(System.Double)" /> to determine whether a value is valid and therefore assignable.
            </remarks>
      <setter>
        <requires inheritedFrom="M:Troschuetz.Random.ILambdaDistribution`1.set_Lambda(`0)" inheritedFromTypeName="ILambdaDistribution" exception="T:System.ArgumentOutOfRangeException" csharp="this.IsValidLambda(value)" vb="Me.IsValidLambda(value)">this.IsValidLambda(value)</requires>
        <ensures inheritedFrom="M:Troschuetz.Random.ILambdaDistribution`1.set_Lambda(`0)" inheritedFromTypeName="ILambdaDistribution" csharp="this.Lambda.Equals((object)value)" vb="Me.Lambda.Equals(((Object)value))">this.Lambda.Equals((object)value)</ensures>
      </setter>
      <exception cref="T:System.ArgumentOutOfRangeException">!this.IsValidLambda(value)</exception>
    </member>
    <member name="T:Troschuetz.Random.Distributions.Continuous.ExponentialDistribution">
      <summary>
              Provides generation of exponential distributed random numbers.
            </summary>
      <remarks>
              The implementation of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ExponentialDistribution" /> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/Exponential_distribution">Wikipedia - Exponential distribution</a>.
            </remarks>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.ExponentialDistribution.#ctor">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ExponentialDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> as underlying random number generator.
            </summary>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.ExponentialDistribution.#ctor(System.UInt32)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ExponentialDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> with the specified seed value.
            </summary>
      <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.ExponentialDistribution.#ctor(Troschuetz.Random.IGenerator)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ExponentialDistribution" /> class,
              using the specified <see cref="T:Troschuetz.Random.IGenerator" /> as underlying random number generator.
            </summary>
      <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator" /> object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="generator" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.ExponentialDistribution.#ctor(System.Double)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ExponentialDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> as underlying random number generator.
            </summary>
      <param name="lambda">
              The parameter lambda which is used for generation of exponential distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="lambda" /> is less than or equal to zero.
            </exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.ExponentialDistribution.#ctor(System.UInt32,System.Double)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ExponentialDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> with the specified seed value.
            </summary>
      <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
      <param name="lambda">
              The parameter lambda which is used for generation of exponential distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="lambda" /> is less than or equal to zero.
            </exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.ExponentialDistribution.#ctor(Troschuetz.Random.IGenerator,System.Double)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ExponentialDistribution" /> class,
              using the specified <see cref="T:Troschuetz.Random.IGenerator" /> as underlying random number generator.
            </summary>
      <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator" /> object.</param>
      <param name="lambda">
              The parameter lambda which is used for generation of exponential distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="generator" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="lambda" /> is less than or equal to zero.
            </exception>
    </member>
    <member name="T:Troschuetz.Random.Distributions.Continuous.FisherSnedecorDistribution`1">
      <summary>
              Provides generation of Fisher-Snedecor distributed random numbers.
            </summary>
      <remarks>
              The implementation of the <see cref="T:Troschuetz.Random.Distributions.Continuous.FisherSnedecorDistribution" /> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/F-distribution">Wikipedia - F-distribution</a>.
            </remarks>
    </member>
    <member name="F:Troschuetz.Random.Distributions.Continuous.FisherSnedecorDistribution`1.DefaultAlpha">
      <summary>
              The default value assigned to <see cref="P:Troschuetz.Random.Distributions.Continuous.FisherSnedecorDistribution`1.Alpha" /> if none is specified. 
            </summary>
    </member>
    <member name="F:Troschuetz.Random.Distributions.Continuous.FisherSnedecorDistribution`1.DefaultBeta">
      <summary>
              The default value assigned to <see cref="P:Troschuetz.Random.Distributions.Continuous.FisherSnedecorDistribution`1.Beta" /> if none is specified. 
            </summary>
    </member>
    <member name="F:Troschuetz.Random.Distributions.Continuous.FisherSnedecorDistribution`1._alpha">
      <summary>
              Stores the parameter alpha which is used for generation of Fisher-Snedecor distributed random numbers.
            </summary>
    </member>
    <member name="F:Troschuetz.Random.Distributions.Continuous.FisherSnedecorDistribution`1._beta">
      <summary>
              Stores the parameter beta which is used for generation of Fisher-Snedecor distributed random numbers.
            </summary>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.FisherSnedecorDistribution`1.#ctor(`0,System.Int32,System.Int32)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.FisherSnedecorDistribution" /> class,
              using the specified <see cref="T:Troschuetz.Random.IGenerator" /> as underlying random number generator.
            </summary>
      <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator" /> object.</param>
      <param name="alpha">
              The parameter alpha which is used for generation of fisher snedecor distributed random numbers.
            </param>
      <param name="beta">
              The parameter beta which is used for generation of fisher snedecor distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="generator" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> or <paramref name="beta" /> are less than or equal to zero.
            </exception>
      <requires exception="T:System.ArgumentNullException" csharp="!ReferenceEquals((object)generator, null)" vb="Not ReferenceEquals(((Object)generator), Nothing)">!object.ReferenceEquals((object)generator, null)</requires>
      <exception cref="T:System.ArgumentNullException">object.ReferenceEquals((object)generator, null)</exception>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="AreValidParams(alpha, beta)" vb="AreValidParams(alpha, beta)">Troschuetz.Random.Distributions.Continuous.FisherSnedecorDistribution&lt;TGen&gt;.AreValidParams(alpha, beta)</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">!Troschuetz.Random.Distributions.Continuous.FisherSnedecorDistribution&lt;TGen&gt;.AreValidParams(alpha, beta)</exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.FisherSnedecorDistribution`1.IsValidAlpha(System.Int32)">
      <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.Distributions.Continuous.FisherSnedecorDistribution`1.Alpha" />.
            </summary>
      <param name="value">The value to check.</param>
      <returns>
        <see langword="true" /> if value is greater than 0; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.FisherSnedecorDistribution`1.IsValidBeta(System.Int32)">
      <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.Distributions.Continuous.FisherSnedecorDistribution`1.Beta" />.
            </summary>
      <param name="value">The value to check.</param>
      <returns>
        <see langword="true" /> if value is greater than 0; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.FisherSnedecorDistribution`1.AreValidParams(System.Int32,System.Int32)">
      <summary>
              Determines whether fisher snedecor distribution is defined under given parameters.
            </summary>
      <param name="alpha">
              The parameter alpha which is used for generation of fisher snedecor distributed random numbers.
            </param>
      <param name="beta">
              The parameter beta which is used for generation of fisher snedecor distributed random numbers.
            </param>
      <returns>
              True if <paramref name="alpha" /> and <paramref name="beta" /> are greater than zero;
              otherwise, it returns false.
            </returns>
      <pure />
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.FisherSnedecorDistribution`1.Sample(`0,System.Int32,System.Int32)">
      <summary>
              Returns a fisher snedecor distributed floating point random number.
            </summary>
      <param name="generator">The generator from which random number are drawn.</param>
      <param name="alpha">
              The parameter alpha which is used for generation of fisher snedecor distributed random numbers.
            </param>
      <param name="beta">
              The parameter beta which is used for generation of fisher snedecor distributed random numbers.
            </param>
      <returns>
              A fisher snedecor distributed floating point random number.
            </returns>
      <pure />
    </member>
    <member name="P:Troschuetz.Random.Distributions.Continuous.FisherSnedecorDistribution`1.Alpha">
      <summary>
              Gets or sets the parameter alpha which is used for generation of Fisher-Snedecor distributed random numbers.
            </summary>
      <remarks>
              Calls <see cref="M:Troschuetz.Random.Distributions.Continuous.FisherSnedecorDistribution`1.AreValidParams(System.Int32,System.Int32)" /> to determine whether a value is valid and therefore assignable.
            </remarks>
      <setter>
        <requires inheritedFrom="M:Troschuetz.Random.IAlphaDistribution`1.set_Alpha(`0)" inheritedFromTypeName="IAlphaDistribution" exception="T:System.ArgumentOutOfRangeException" csharp="this.IsValidAlpha(value)" vb="Me.IsValidAlpha(value)">this.IsValidAlpha(value)</requires>
        <ensures inheritedFrom="M:Troschuetz.Random.IAlphaDistribution`1.set_Alpha(`0)" inheritedFromTypeName="IAlphaDistribution" csharp="this.Alpha.Equals((object)value)" vb="Me.Alpha.Equals(((Object)value))">this.Alpha.Equals((object)value)</ensures>
      </setter>
      <exception cref="T:System.ArgumentOutOfRangeException">!this.IsValidAlpha(value)</exception>
    </member>
    <member name="P:Troschuetz.Random.Distributions.Continuous.FisherSnedecorDistribution`1.Beta">
      <summary>
              Gets or sets the parameter beta which is used for generation of Fisher-Snedecor distributed random numbers.
            </summary>
      <remarks>
              Calls <see cref="M:Troschuetz.Random.Distributions.Continuous.FisherSnedecorDistribution`1.AreValidParams(System.Int32,System.Int32)" /> to determine whether a value is valid and therefore assignable.
            </remarks>
      <setter>
        <requires inheritedFrom="M:Troschuetz.Random.IBetaDistribution`1.set_Beta(`0)" inheritedFromTypeName="IBetaDistribution" exception="T:System.ArgumentOutOfRangeException" csharp="this.IsValidBeta(value)" vb="Me.IsValidBeta(value)">this.IsValidBeta(value)</requires>
        <ensures inheritedFrom="M:Troschuetz.Random.IBetaDistribution`1.set_Beta(`0)" inheritedFromTypeName="IBetaDistribution" csharp="this.Beta.Equals((object)value)" vb="Me.Beta.Equals(((Object)value))">this.Beta.Equals((object)value)</ensures>
      </setter>
      <exception cref="T:System.ArgumentOutOfRangeException">!this.IsValidBeta(value)</exception>
    </member>
    <member name="T:Troschuetz.Random.Distributions.Continuous.FisherSnedecorDistribution">
      <summary>
              Provides generation of Fisher-Snedecor distributed random numbers.
            </summary>
      <remarks>
              The implementation of the <see cref="T:Troschuetz.Random.Distributions.Continuous.FisherSnedecorDistribution" /> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/F-distribution">Wikipedia - F-distribution</a>.
            </remarks>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.FisherSnedecorDistribution.#ctor">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.FisherSnedecorDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> as underlying random number generator.
            </summary>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.FisherSnedecorDistribution.#ctor(System.UInt32)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.FisherSnedecorDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> with the specified seed value.
            </summary>
      <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.FisherSnedecorDistribution.#ctor(Troschuetz.Random.IGenerator)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.FisherSnedecorDistribution" /> class,
              using the specified <see cref="T:Troschuetz.Random.IGenerator" /> as underlying random number generator.
            </summary>
      <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator" /> object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="generator" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.FisherSnedecorDistribution.#ctor(System.Int32,System.Int32)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.FisherSnedecorDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> as underlying random number generator.
            </summary>
      <param name="alpha">
              The parameter alpha which is used for generation of fisher snedecor distributed random numbers.
            </param>
      <param name="beta">
              The parameter beta which is used for generation of fisher snedecor distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> or <paramref name="beta" /> are less than or equal to zero.
            </exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.FisherSnedecorDistribution.#ctor(System.UInt32,System.Int32,System.Int32)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.FisherSnedecorDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> with the specified seed value.
            </summary>
      <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
      <param name="alpha">
              The parameter alpha which is used for generation of fisher snedecor distributed random numbers.
            </param>
      <param name="beta">
              The parameter beta which is used for generation of fisher snedecor distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> or <paramref name="beta" /> are less than or equal to zero.
            </exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.FisherSnedecorDistribution.#ctor(Troschuetz.Random.IGenerator,System.Int32,System.Int32)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.FisherSnedecorDistribution" /> class,
              using the specified <see cref="T:Troschuetz.Random.IGenerator" /> as underlying random number generator.
            </summary>
      <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator" /> object.</param>
      <param name="alpha">
              The parameter alpha which is used for generation of fisher snedecor distributed random numbers.
            </param>
      <param name="beta">
              The parameter beta which is used for generation of fisher snedecor distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="generator" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> or <paramref name="beta" /> are less than or equal to zero.
            </exception>
    </member>
    <member name="T:Troschuetz.Random.Distributions.Continuous.FisherTippettDistribution`1">
      <summary>
              Provides generation of Fisher-Tippett distributed random numbers.
            </summary>
      <remarks>
              The implementation of the <see cref="T:Troschuetz.Random.Distributions.Continuous.FisherTippettDistribution" /> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/Laplace_distribution">Wikipedia - Fisher-Tippett distribution</a>.
            </remarks>
    </member>
    <member name="F:Troschuetz.Random.Distributions.Continuous.FisherTippettDistribution`1.DefaultAlpha">
      <summary>
              The default value assigned to <see cref="P:Troschuetz.Random.Distributions.Continuous.FisherTippettDistribution`1.Alpha" /> if none is specified. 
            </summary>
    </member>
    <member name="F:Troschuetz.Random.Distributions.Continuous.FisherTippettDistribution`1.DefaultMu">
      <summary>
              The default value assigned to <see cref="P:Troschuetz.Random.Distributions.Continuous.FisherTippettDistribution`1.Mu" /> if none is specified. 
            </summary>
    </member>
    <member name="F:Troschuetz.Random.Distributions.Continuous.FisherTippettDistribution`1._alpha">
      <summary>
              Stores the parameter alpha which is used for generation of fisher tippett distributed random numbers.
            </summary>
    </member>
    <member name="F:Troschuetz.Random.Distributions.Continuous.FisherTippettDistribution`1._mu">
      <summary>
              Stores the parameter mu which is used for generation of fisher tippett distributed random numbers.
            </summary>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.FisherTippettDistribution`1.#ctor(`0,System.Double,System.Double)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.FisherTippettDistribution" /> class,
              using the specified <see cref="T:Troschuetz.Random.IGenerator" /> as underlying random number generator.
            </summary>
      <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator" /> object.</param>
      <param name="alpha">
              The parameter alpha which is used for generation of fisher tippett distributed random numbers.
            </param>
      <param name="mu">
              The parameter mu which is used for generation of fisher tippett distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="generator" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> is less than or equal to zero.
            </exception>
      <requires exception="T:System.ArgumentNullException" csharp="!ReferenceEquals((object)generator, null)" vb="Not ReferenceEquals(((Object)generator), Nothing)">!object.ReferenceEquals((object)generator, null)</requires>
      <exception cref="T:System.ArgumentNullException">object.ReferenceEquals((object)generator, null)</exception>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="AreValidParams(alpha, mu)" vb="AreValidParams(alpha, mu)">Troschuetz.Random.Distributions.Continuous.FisherTippettDistribution&lt;TGen&gt;.AreValidParams(alpha, mu)</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">!Troschuetz.Random.Distributions.Continuous.FisherTippettDistribution&lt;TGen&gt;.AreValidParams(alpha, mu)</exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.FisherTippettDistribution`1.IsValidAlpha(System.Double)">
      <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.Distributions.Continuous.FisherTippettDistribution`1.Alpha" />.
            </summary>
      <param name="value">The value to check.</param>
      <returns>
        <see langword="true" /> if value is greater than 0.0; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.FisherTippettDistribution`1.IsValidMu(System.Double)">
      <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.Distributions.Continuous.FisherTippettDistribution`1.Mu" />.
            </summary>
      <param name="value">The value to check.</param>
      <returns>
        <see langword="true" />.</returns>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.FisherTippettDistribution`1.AreValidParams(System.Double,System.Double)">
      <summary>
              Determines whether fisher tippett distribution is defined under given parameters.
            </summary>
      <param name="alpha">
              The parameter alpha which is used for generation of fisher tippett distributed random numbers.
            </param>
      <param name="mu">
              The parameter mu which is used for generation of fisher tippett distributed random numbers.
            </param>
      <returns>
              True if <paramref name="alpha" /> is greater than zero; otherwise, it returns false.
            </returns>
      <pure />
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.FisherTippettDistribution`1.Sample(`0,System.Double,System.Double)">
      <summary>
              Returns a fisher tippett distributed floating point random number.
            </summary>
      <param name="generator">The generator from which random number are drawn.</param>
      <param name="alpha">
              The parameter alpha which is used for generation of fisher tippett distributed random numbers.
            </param>
      <param name="mu">
              The parameter mu which is used for generation of fisher tippett distributed random numbers.
            </param>
      <returns>
              A fisher tippett distributed floating point random number.
            </returns>
      <pure />
    </member>
    <member name="P:Troschuetz.Random.Distributions.Continuous.FisherTippettDistribution`1.Alpha">
      <summary>
              Gets or sets the parameter alpha which is used for generation of Fisher-Tippett distributed random numbers.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is less than or equal to zero.
            </exception>
      <remarks>
              Calls <see cref="M:Troschuetz.Random.Distributions.Continuous.FisherTippettDistribution`1.AreValidParams(System.Double,System.Double)" /> to determine whether a value is valid and therefore assignable.
            </remarks>
      <setter>
        <requires inheritedFrom="M:Troschuetz.Random.IAlphaDistribution`1.set_Alpha(`0)" inheritedFromTypeName="IAlphaDistribution" exception="T:System.ArgumentOutOfRangeException" csharp="this.IsValidAlpha(value)" vb="Me.IsValidAlpha(value)">this.IsValidAlpha(value)</requires>
        <ensures inheritedFrom="M:Troschuetz.Random.IAlphaDistribution`1.set_Alpha(`0)" inheritedFromTypeName="IAlphaDistribution" csharp="this.Alpha.Equals((object)value)" vb="Me.Alpha.Equals(((Object)value))">this.Alpha.Equals((object)value)</ensures>
      </setter>
      <exception cref="T:System.ArgumentOutOfRangeException">!this.IsValidAlpha(value)</exception>
    </member>
    <member name="P:Troschuetz.Random.Distributions.Continuous.FisherTippettDistribution`1.Mu">
      <summary>
              Gets or sets the parameter mu which is used for generation of Fisher-Tippett distributed random numbers.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />.
            </exception>
      <remarks>
              Call <see cref="M:Troschuetz.Random.Distributions.Continuous.FisherTippettDistribution`1.AreValidParams(System.Double,System.Double)" /> to determine whether a value is valid and therefore assignable.
            </remarks>
      <setter>
        <requires inheritedFrom="M:Troschuetz.Random.IMuDistribution`1.set_Mu(`0)" inheritedFromTypeName="IMuDistribution" exception="T:System.ArgumentOutOfRangeException" csharp="this.IsValidMu(value)" vb="Me.IsValidMu(value)">this.IsValidMu(value)</requires>
        <ensures inheritedFrom="M:Troschuetz.Random.IMuDistribution`1.set_Mu(`0)" inheritedFromTypeName="IMuDistribution" csharp="this.Mu.Equals((object)value)" vb="Me.Mu.Equals(((Object)value))">this.Mu.Equals((object)value)</ensures>
      </setter>
      <exception cref="T:System.ArgumentOutOfRangeException">!this.IsValidMu(value)</exception>
    </member>
    <member name="T:Troschuetz.Random.Distributions.Continuous.FisherTippettDistribution">
      <summary>
              Provides generation of Fisher-Tippett distributed random numbers.
            </summary>
      <remarks>
              The implementation of the <see cref="T:Troschuetz.Random.Distributions.Continuous.FisherTippettDistribution" /> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/Laplace_distribution">Wikipedia - Fisher-Tippett distribution</a>.
            </remarks>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.FisherTippettDistribution.#ctor">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.FisherTippettDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> as underlying random number generator.
            </summary>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.FisherTippettDistribution.#ctor(System.UInt32)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.FisherTippettDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> with the specified seed value.
            </summary>
      <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.FisherTippettDistribution.#ctor(Troschuetz.Random.IGenerator)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.FisherTippettDistribution" /> class,
              using the specified <see cref="T:Troschuetz.Random.IGenerator" /> as underlying random number generator.
            </summary>
      <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator" /> object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="generator" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.FisherTippettDistribution.#ctor(System.Double,System.Double)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.FisherTippettDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> as underlying random number generator.
            </summary>
      <param name="alpha">
              The parameter alpha which is used for generation of fisher tippett distributed random numbers.
            </param>
      <param name="mu">
              The parameter mu which is used for generation of fisher tippett distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> is less than or equal to zero.
            </exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.FisherTippettDistribution.#ctor(System.UInt32,System.Double,System.Double)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.FisherTippettDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> with the specified seed value.
            </summary>
      <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
      <param name="alpha">
              The parameter alpha which is used for generation of fisher tippett distributed random numbers.
            </param>
      <param name="mu">
              The parameter mu which is used for generation of fisher tippett distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> is less than or equal to zero.
            </exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.FisherTippettDistribution.#ctor(Troschuetz.Random.IGenerator,System.Double,System.Double)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.FisherTippettDistribution" /> class,
              using the specified <see cref="T:Troschuetz.Random.IGenerator" /> as underlying random number generator.
            </summary>
      <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator" /> object.</param>
      <param name="alpha">
              The parameter alpha which is used for generation of fisher tippett distributed random numbers.
            </param>
      <param name="mu">
              The parameter mu which is used for generation of fisher tippett distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="generator" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> is less than or equal to zero.
            </exception>
    </member>
    <member name="T:Troschuetz.Random.Distributions.Continuous.GammaDistribution`1">
      <summary>
              Provides generation of gamma distributed random numbers.
            </summary>
      <remarks>
              The implementation of the <see cref="T:Troschuetz.Random.Distributions.Continuous.GammaDistribution" /> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/Gamma_distribution">Wikipedia - Gamma distribution</a>.
            </remarks>
    </member>
    <member name="F:Troschuetz.Random.Distributions.Continuous.GammaDistribution`1.DefaultAlpha">
      <summary>
              The default value assigned to <see cref="P:Troschuetz.Random.Distributions.Continuous.GammaDistribution`1.Alpha" /> if none is specified. 
            </summary>
    </member>
    <member name="F:Troschuetz.Random.Distributions.Continuous.GammaDistribution`1.DefaultTheta">
      <summary>
              The default value assigned to <see cref="P:Troschuetz.Random.Distributions.Continuous.GammaDistribution`1.Theta" /> if none is specified. 
            </summary>
    </member>
    <member name="F:Troschuetz.Random.Distributions.Continuous.GammaDistribution`1._alpha">
      <summary>
              Stores the parameter alpha which is used for generation of gamma distributed random numbers.
            </summary>
    </member>
    <member name="F:Troschuetz.Random.Distributions.Continuous.GammaDistribution`1._theta">
      <summary>
              Stores the parameter theta which is used for generation of gamma distributed random numbers.
            </summary>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.GammaDistribution`1.#ctor(`0,System.Double,System.Double)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.GammaDistribution" /> class,
              using the specified <see cref="T:Troschuetz.Random.IGenerator" /> as underlying random number generator.
            </summary>
      <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator" /> object.</param>
      <param name="alpha">
              The parameter alpha which is used for generation of gamma distributed random numbers.
            </param>
      <param name="theta">
              The parameter theta which is used for generation of gamma distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="generator" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> or <paramref name="theta" /> are less than or equal to zero.
            </exception>
      <requires exception="T:System.ArgumentNullException" csharp="!ReferenceEquals((object)generator, null)" vb="Not ReferenceEquals(((Object)generator), Nothing)">!object.ReferenceEquals((object)generator, null)</requires>
      <exception cref="T:System.ArgumentNullException">object.ReferenceEquals((object)generator, null)</exception>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="AreValidParams(alpha, theta)" vb="AreValidParams(alpha, theta)">Troschuetz.Random.Distributions.Continuous.GammaDistribution&lt;TGen&gt;.AreValidParams(alpha, theta)</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">!Troschuetz.Random.Distributions.Continuous.GammaDistribution&lt;TGen&gt;.AreValidParams(alpha, theta)</exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.GammaDistribution`1.IsValidAlpha(System.Double)">
      <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.Distributions.Continuous.GammaDistribution`1.Alpha" />.
            </summary>
      <param name="value">The value to check.</param>
      <returns>
        <see langword="true" /> if value is greater than 0.0; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.GammaDistribution`1.IsValidTheta(System.Double)">
      <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.Distributions.Continuous.GammaDistribution`1.Theta" />.
            </summary>
      <param name="value">The value to check.</param>
      <returns>
        <see langword="true" /> if value is greater than 0.0; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.GammaDistribution`1.AreValidParams(System.Double,System.Double)">
      <summary>
              Determines whether gamma distribution is defined under given parameters.
            </summary>
      <param name="alpha">
              The parameter alpha which is used for generation of gamma distributed random numbers.
            </param>
      <param name="theta">
              The parameter theta which is used for generation of gamma distributed random numbers.
            </param>
      <returns>
              True if <paramref name="alpha" /> and <paramref name="theta" /> are greater than zero;
              otherwise, it returns false.
            </returns>
      <pure />
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.GammaDistribution`1.Sample(`0,System.Double,System.Double)">
      <summary>
              Returns a gamma distributed floating point random number.
            </summary>
      <param name="generator">The generator from which random number are drawn.</param>
      <param name="alpha">
              The parameter alpha which is used for generation of gamma distributed random numbers.
            </param>
      <param name="theta">
              The parameter theta which is used for generation of gamma distributed random numbers.
            </param>
      <returns>
              A gamma distributed floating point random number.
            </returns>
      <pure />
    </member>
    <member name="P:Troschuetz.Random.Distributions.Continuous.GammaDistribution`1.Alpha">
      <summary>
              Gets or sets the parameter alpha which is used for generation of gamma distributed random numbers.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is less than or equal to zero.
            </exception>
      <remarks>
              Calls <see cref="M:Troschuetz.Random.Distributions.Continuous.GammaDistribution`1.AreValidParams(System.Double,System.Double)" /> to determine whether a value is valid and therefore assignable.
            </remarks>
      <setter>
        <requires inheritedFrom="M:Troschuetz.Random.IAlphaDistribution`1.set_Alpha(`0)" inheritedFromTypeName="IAlphaDistribution" exception="T:System.ArgumentOutOfRangeException" csharp="this.IsValidAlpha(value)" vb="Me.IsValidAlpha(value)">this.IsValidAlpha(value)</requires>
        <ensures inheritedFrom="M:Troschuetz.Random.IAlphaDistribution`1.set_Alpha(`0)" inheritedFromTypeName="IAlphaDistribution" csharp="this.Alpha.Equals((object)value)" vb="Me.Alpha.Equals(((Object)value))">this.Alpha.Equals((object)value)</ensures>
      </setter>
      <exception cref="T:System.ArgumentOutOfRangeException">!this.IsValidAlpha(value)</exception>
    </member>
    <member name="P:Troschuetz.Random.Distributions.Continuous.GammaDistribution`1.Theta">
      <summary>
              Gets or sets the parameter theta which is used for generation of gamma distributed random numbers.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is less than or equal to zero.
            </exception>
      <remarks>
              Calls <see cref="M:Troschuetz.Random.Distributions.Continuous.GammaDistribution`1.AreValidParams(System.Double,System.Double)" /> to determine whether a value is valid and therefore assignable.
            </remarks>
      <setter>
        <requires inheritedFrom="M:Troschuetz.Random.IThetaDistribution`1.set_Theta(`0)" inheritedFromTypeName="IThetaDistribution" exception="T:System.ArgumentOutOfRangeException" csharp="this.IsValidTheta(value)" vb="Me.IsValidTheta(value)">this.IsValidTheta(value)</requires>
        <ensures inheritedFrom="M:Troschuetz.Random.IThetaDistribution`1.set_Theta(`0)" inheritedFromTypeName="IThetaDistribution" csharp="this.Theta.Equals((object)value)" vb="Me.Theta.Equals(((Object)value))">this.Theta.Equals((object)value)</ensures>
      </setter>
      <exception cref="T:System.ArgumentOutOfRangeException">!this.IsValidTheta(value)</exception>
    </member>
    <member name="T:Troschuetz.Random.Distributions.Continuous.GammaDistribution">
      <summary>
              Provides generation of gamma distributed random numbers.
            </summary>
      <remarks>
              The implementation of the <see cref="T:Troschuetz.Random.Distributions.Continuous.GammaDistribution" /> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/Gamma_distribution">Wikipedia - Gamma distribution</a>.
            </remarks>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.GammaDistribution.#ctor">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.GammaDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> as underlying random number generator.
            </summary>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.GammaDistribution.#ctor(System.UInt32)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.GammaDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> with the specified seed value.
            </summary>
      <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.GammaDistribution.#ctor(Troschuetz.Random.IGenerator)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.GammaDistribution" /> class,
              using the specified <see cref="T:Troschuetz.Random.IGenerator" /> as underlying random number generator.
            </summary>
      <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator" /> object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="generator" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.GammaDistribution.#ctor(System.Double,System.Double)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.GammaDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> as underlying random number generator.
            </summary>
      <param name="alpha">
              The parameter alpha which is used for generation of gamma distributed random numbers.
            </param>
      <param name="theta">
              The parameter theta which is used for generation of gamma distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> or <paramref name="theta" /> are less than or equal to zero.
            </exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.GammaDistribution.#ctor(System.UInt32,System.Double,System.Double)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.GammaDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> with the specified seed value.
            </summary>
      <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
      <param name="alpha">
              The parameter alpha which is used for generation of gamma distributed random numbers.
            </param>
      <param name="theta">
              The parameter theta which is used for generation of gamma distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> or <paramref name="theta" /> are less than or equal to zero.
            </exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.GammaDistribution.#ctor(Troschuetz.Random.IGenerator,System.Double,System.Double)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.GammaDistribution" /> class,
              using the specified <see cref="T:Troschuetz.Random.IGenerator" /> as underlying random number generator.
            </summary>
      <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator" /> object.</param>
      <param name="alpha">
              The parameter alpha which is used for generation of gamma distributed random numbers.
            </param>
      <param name="theta">
              The parameter theta which is used for generation of gamma distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="generator" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> or <paramref name="theta" /> are less than or equal to zero.
            </exception>
    </member>
    <member name="T:Troschuetz.Random.Distributions.Continuous.LaplaceDistribution`1">
      <summary>
              Provides generation of laplace distributed random numbers.
            </summary>
      <remarks>
              The implementation of the <see cref="T:Troschuetz.Random.Distributions.Continuous.LaplaceDistribution" /> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/Laplace_distribution">Wikipedia - Laplace distribution</a>.
            </remarks>
    </member>
    <member name="F:Troschuetz.Random.Distributions.Continuous.LaplaceDistribution`1.DefaultAlpha">
      <summary>
              The default value assigned to <see cref="P:Troschuetz.Random.Distributions.Continuous.LaplaceDistribution`1.Alpha" /> if none is specified. 
            </summary>
    </member>
    <member name="F:Troschuetz.Random.Distributions.Continuous.LaplaceDistribution`1.DefaultMu">
      <summary>
              The default value assigned to <see cref="P:Troschuetz.Random.Distributions.Continuous.LaplaceDistribution`1.Mu" /> if none is specified. 
            </summary>
    </member>
    <member name="F:Troschuetz.Random.Distributions.Continuous.LaplaceDistribution`1._alpha">
      <summary>
              Stores the parameter alpha which is used for generation of laplace distributed random numbers.
            </summary>
    </member>
    <member name="F:Troschuetz.Random.Distributions.Continuous.LaplaceDistribution`1._mu">
      <summary>
              Stores the parameter mu which is used for generation of laplace distributed random numbers.
            </summary>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.LaplaceDistribution`1.#ctor(`0,System.Double,System.Double)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.LaplaceDistribution" /> class,
              using the specified <see cref="T:Troschuetz.Random.IGenerator" /> as underlying random number generator.
            </summary>
      <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator" /> object.</param>
      <param name="alpha">
              The parameter alpha which is used for generation of laplace distributed random numbers.
            </param>
      <param name="mu">
              The parameter mu which is used for generation of laplace distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="generator" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> is less than or equal to zero.
            </exception>
      <requires exception="T:System.ArgumentNullException" csharp="!ReferenceEquals((object)generator, null)" vb="Not ReferenceEquals(((Object)generator), Nothing)">!object.ReferenceEquals((object)generator, null)</requires>
      <exception cref="T:System.ArgumentNullException">object.ReferenceEquals((object)generator, null)</exception>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="AreValidParams(alpha, mu)" vb="AreValidParams(alpha, mu)">Troschuetz.Random.Distributions.Continuous.LaplaceDistribution&lt;TGen&gt;.AreValidParams(alpha, mu)</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">!Troschuetz.Random.Distributions.Continuous.LaplaceDistribution&lt;TGen&gt;.AreValidParams(alpha, mu)</exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.LaplaceDistribution`1.IsValidAlpha(System.Double)">
      <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.Distributions.Continuous.LaplaceDistribution`1.Alpha" />.
            </summary>
      <param name="value">The value to check.</param>
      <returns>
        <see langword="true" /> if value is greater than 0.0; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.LaplaceDistribution`1.IsValidMu(System.Double)">
      <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.Distributions.Continuous.LaplaceDistribution`1.Mu" />.
            </summary>
      <param name="value">The value to check.</param>
      <returns>
        <see langword="true" />.</returns>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.LaplaceDistribution`1.AreValidParams(System.Double,System.Double)">
      <summary>
              Determines whether laplace distribution is defined under given parameters.
            </summary>
      <param name="alpha">
              The parameter alpha which is used for generation of laplace distributed random numbers.
            </param>
      <param name="mu">
              The parameter mu which is used for generation of laplace distributed random numbers.
            </param>
      <returns>
              True if <paramref name="alpha" /> is greater than zero; otherwise, it returns false.
            </returns>
      <pure />
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.LaplaceDistribution`1.Sample(`0,System.Double,System.Double)">
      <summary>
              Returns a laplace distributed floating point random number.
            </summary>
      <param name="generator">The generator from which random number are drawn.</param>
      <param name="alpha">
              The parameter alpha which is used for generation of laplace distributed random numbers.
            </param>
      <param name="mu">
              The parameter mu which is used for generation of laplace distributed random numbers.
            </param>
      <returns>
              A laplace distributed floating point random number.
            </returns>
      <pure />
    </member>
    <member name="P:Troschuetz.Random.Distributions.Continuous.LaplaceDistribution`1.Alpha">
      <summary>
              Gets or sets the parameter alpha which is used for generation of laplace distributed random numbers.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is less than or equal to zero.
            </exception>
      <remarks>
              Calls <see cref="M:Troschuetz.Random.Distributions.Continuous.LaplaceDistribution`1.AreValidParams(System.Double,System.Double)" /> to determine whether a value is valid and therefore assignable.
            </remarks>
      <setter>
        <requires inheritedFrom="M:Troschuetz.Random.IAlphaDistribution`1.set_Alpha(`0)" inheritedFromTypeName="IAlphaDistribution" exception="T:System.ArgumentOutOfRangeException" csharp="this.IsValidAlpha(value)" vb="Me.IsValidAlpha(value)">this.IsValidAlpha(value)</requires>
        <ensures inheritedFrom="M:Troschuetz.Random.IAlphaDistribution`1.set_Alpha(`0)" inheritedFromTypeName="IAlphaDistribution" csharp="this.Alpha.Equals((object)value)" vb="Me.Alpha.Equals(((Object)value))">this.Alpha.Equals((object)value)</ensures>
      </setter>
      <exception cref="T:System.ArgumentOutOfRangeException">!this.IsValidAlpha(value)</exception>
    </member>
    <member name="P:Troschuetz.Random.Distributions.Continuous.LaplaceDistribution`1.Mu">
      <summary>
              Gets or sets the parameter mu which is used for generation of laplace distributed random numbers.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />.
            </exception>
      <remarks>
              Calls <see cref="M:Troschuetz.Random.Distributions.Continuous.LaplaceDistribution`1.AreValidParams(System.Double,System.Double)" /> to determine whether a value is valid and therefore assignable.
            </remarks>
      <setter>
        <requires inheritedFrom="M:Troschuetz.Random.IMuDistribution`1.set_Mu(`0)" inheritedFromTypeName="IMuDistribution" exception="T:System.ArgumentOutOfRangeException" csharp="this.IsValidMu(value)" vb="Me.IsValidMu(value)">this.IsValidMu(value)</requires>
        <ensures inheritedFrom="M:Troschuetz.Random.IMuDistribution`1.set_Mu(`0)" inheritedFromTypeName="IMuDistribution" csharp="this.Mu.Equals((object)value)" vb="Me.Mu.Equals(((Object)value))">this.Mu.Equals((object)value)</ensures>
      </setter>
      <exception cref="T:System.ArgumentOutOfRangeException">!this.IsValidMu(value)</exception>
    </member>
    <member name="T:Troschuetz.Random.Distributions.Continuous.LaplaceDistribution">
      <summary>
              Provides generation of laplace distributed random numbers.
            </summary>
      <remarks>
              The implementation of the <see cref="T:Troschuetz.Random.Distributions.Continuous.LaplaceDistribution" /> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/Laplace_distribution">Wikipedia - Laplace distribution</a>.
            </remarks>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.LaplaceDistribution.#ctor">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.LaplaceDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> as underlying random number generator.
            </summary>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.LaplaceDistribution.#ctor(System.UInt32)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.LaplaceDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> with the specified seed value.
            </summary>
      <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.LaplaceDistribution.#ctor(Troschuetz.Random.IGenerator)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.LaplaceDistribution" /> class,
              using the specified <see cref="T:Troschuetz.Random.IGenerator" /> as underlying random number generator.
            </summary>
      <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator" /> object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="generator" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.LaplaceDistribution.#ctor(System.Double,System.Double)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.LaplaceDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> as underlying random number generator.
            </summary>
      <param name="alpha">
              The parameter alpha which is used for generation of laplace distributed random numbers.
            </param>
      <param name="mu">
              The parameter mu which is used for generation of laplace distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> is less than or equal to zero.
            </exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.LaplaceDistribution.#ctor(System.UInt32,System.Double,System.Double)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.LaplaceDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> with the specified seed value.
            </summary>
      <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
      <param name="alpha">
              The parameter alpha which is used for generation of laplace distributed random numbers.
            </param>
      <param name="mu">
              The parameter mu which is used for generation of laplace distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> is less than or equal to zero.
            </exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.LaplaceDistribution.#ctor(Troschuetz.Random.IGenerator,System.Double,System.Double)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.LaplaceDistribution" /> class,
              using the specified <see cref="T:Troschuetz.Random.IGenerator" /> as underlying random number generator.
            </summary>
      <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator" /> object.</param>
      <param name="alpha">
              The parameter alpha which is used for generation of laplace distributed random numbers.
            </param>
      <param name="mu">
              The parameter mu which is used for generation of laplace distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="generator" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> is less than or equal to zero.
            </exception>
    </member>
    <member name="T:Troschuetz.Random.Distributions.Continuous.LognormalDistribution`1">
      <summary>
              Provides generation of lognormal distributed random numbers.
            </summary>
      <remarks>
              The implementation of the <see cref="T:Troschuetz.Random.Distributions.Continuous.LognormalDistribution" /> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/Log-normal_distribution">Wikipedia - Lognormal Distribution</a> and
              the implementation in the <a href="http://www.boost.org/libs/random/index.html">Boost Random Number Library</a>.
            </remarks>
    </member>
    <member name="F:Troschuetz.Random.Distributions.Continuous.LognormalDistribution`1.DefaultMu">
      <summary>
              The default value assigned to <see cref="P:Troschuetz.Random.Distributions.Continuous.LognormalDistribution`1.Mu" /> if none is specified. 
            </summary>
    </member>
    <member name="F:Troschuetz.Random.Distributions.Continuous.LognormalDistribution`1.DefaultSigma">
      <summary>
              The default value assigned to <see cref="P:Troschuetz.Random.Distributions.Continuous.LognormalDistribution`1.Sigma" /> if none is specified. 
            </summary>
    </member>
    <member name="F:Troschuetz.Random.Distributions.Continuous.LognormalDistribution`1._mu">
      <summary>
              Stores the parameter mu which is used for generation of lognormal distributed random numbers.
            </summary>
    </member>
    <member name="F:Troschuetz.Random.Distributions.Continuous.LognormalDistribution`1._sigma">
      <summary>
              Stores the parameter sigma which is used for generation of lognormal distributed random numbers.
            </summary>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.LognormalDistribution`1.#ctor(`0,System.Double,System.Double)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.LognormalDistribution" /> class,
              using the specified <see cref="T:Troschuetz.Random.IGenerator" /> as underlying random number generator.
            </summary>
      <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator" /> object.</param>
      <param name="mu">
              The parameter mu which is used for generation of lognormal distributed random numbers.
            </param>
      <param name="sigma">
              The parameter sigma which is used for generation of lognormal distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="generator" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="sigma" /> is less than zero.
            </exception>
      <requires exception="T:System.ArgumentNullException" csharp="!ReferenceEquals((object)generator, null)" vb="Not ReferenceEquals(((Object)generator), Nothing)">!object.ReferenceEquals((object)generator, null)</requires>
      <exception cref="T:System.ArgumentNullException">object.ReferenceEquals((object)generator, null)</exception>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="AreValidParams(mu, sigma)" vb="AreValidParams(mu, sigma)">Troschuetz.Random.Distributions.Continuous.LognormalDistribution&lt;TGen&gt;.AreValidParams(mu, sigma)</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">!Troschuetz.Random.Distributions.Continuous.LognormalDistribution&lt;TGen&gt;.AreValidParams(mu, sigma)</exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.LognormalDistribution`1.IsValidMu(System.Double)">
      <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.Distributions.Continuous.LognormalDistribution`1.Mu" />.
            </summary>
      <param name="value">The value to check.</param>
      <returns>
        <see langword="true" />.</returns>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.LognormalDistribution`1.IsValidSigma(System.Double)">
      <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.Distributions.Continuous.LognormalDistribution`1.Sigma" />.
            </summary>
      <param name="value">The value to check.</param>
      <returns>
        <see langword="true" /> if value is greater than or equal to 0.0; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.LognormalDistribution`1.AreValidParams(System.Double,System.Double)">
      <summary>
              Determines whether lognormal distribution is defined under given parameters.
            </summary>
      <param name="mu">
              The parameter mu which is used for generation of lognormal distributed random numbers.
            </param>
      <param name="sigma">
              The parameter sigma which is used for generation of lognormal distributed random numbers.
            </param>
      <returns>
              True if <paramref name="sigma" /> is greater than or equal to zero; otherwise, it returns false.
            </returns>
      <pure />
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.LognormalDistribution`1.Sample(`0,System.Double,System.Double)">
      <summary>
              Returns a lognormal distributed floating point random number.
            </summary>
      <param name="generator">The generator from which random number are drawn.</param>
      <param name="mu">
              The parameter mu which is used for generation of lognormal distributed random numbers.
            </param>
      <param name="sigma">
              The parameter sigma which is used for generation of lognormal distributed random numbers.
            </param>
      <returns>
              A lognormal distributed floating point random number.
            </returns>
      <pure />
    </member>
    <member name="P:Troschuetz.Random.Distributions.Continuous.LognormalDistribution`1.Mu">
      <summary>
              Gets or sets the parameter mu which is used for generation of lognormal distributed random numbers.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />.
            </exception>
      <remarks>
              Calls <see cref="M:Troschuetz.Random.Distributions.Continuous.LognormalDistribution`1.AreValidParams(System.Double,System.Double)" /> to determine whether a value is valid and therefore assignable.
            </remarks>
      <setter>
        <requires inheritedFrom="M:Troschuetz.Random.IMuDistribution`1.set_Mu(`0)" inheritedFromTypeName="IMuDistribution" exception="T:System.ArgumentOutOfRangeException" csharp="this.IsValidMu(value)" vb="Me.IsValidMu(value)">this.IsValidMu(value)</requires>
        <ensures inheritedFrom="M:Troschuetz.Random.IMuDistribution`1.set_Mu(`0)" inheritedFromTypeName="IMuDistribution" csharp="this.Mu.Equals((object)value)" vb="Me.Mu.Equals(((Object)value))">this.Mu.Equals((object)value)</ensures>
      </setter>
      <exception cref="T:System.ArgumentOutOfRangeException">!this.IsValidMu(value)</exception>
    </member>
    <member name="P:Troschuetz.Random.Distributions.Continuous.LognormalDistribution`1.Sigma">
      <summary>
              Gets or sets the parameter sigma which is used for generation of lognormal distributed random numbers.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is less than zero.
            </exception>
      <remarks>
              Calls <see cref="M:Troschuetz.Random.Distributions.Continuous.LognormalDistribution`1.AreValidParams(System.Double,System.Double)" /> to determine whether a value is valid and therefore assignable.
            </remarks>
      <setter>
        <requires inheritedFrom="M:Troschuetz.Random.ISigmaDistribution`1.set_Sigma(`0)" inheritedFromTypeName="ISigmaDistribution" exception="T:System.ArgumentOutOfRangeException" csharp="this.IsValidSigma(value)" vb="Me.IsValidSigma(value)">this.IsValidSigma(value)</requires>
        <ensures inheritedFrom="M:Troschuetz.Random.ISigmaDistribution`1.set_Sigma(`0)" inheritedFromTypeName="ISigmaDistribution" csharp="this.Sigma.Equals((object)value)" vb="Me.Sigma.Equals(((Object)value))">this.Sigma.Equals((object)value)</ensures>
      </setter>
      <exception cref="T:System.ArgumentOutOfRangeException">!this.IsValidSigma(value)</exception>
    </member>
    <member name="T:Troschuetz.Random.Distributions.Continuous.LognormalDistribution">
      <summary>
              Provides generation of lognormal distributed random numbers.
            </summary>
      <remarks>
              The implementation of the <see cref="T:Troschuetz.Random.Distributions.Continuous.LognormalDistribution" /> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/Log-normal_distribution">Wikipedia - Lognormal Distribution</a> and
              the implementation in the <a href="http://www.boost.org/libs/random/index.html">Boost Random Number Library</a>.
            </remarks>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.LognormalDistribution.#ctor">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.LognormalDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> as underlying random number generator.
            </summary>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.LognormalDistribution.#ctor(System.UInt32)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.LognormalDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> with the specified seed value.
            </summary>
      <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.LognormalDistribution.#ctor(Troschuetz.Random.IGenerator)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.LognormalDistribution" /> class,
              using the specified <see cref="T:Troschuetz.Random.IGenerator" /> as underlying random number generator.
            </summary>
      <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator" /> object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="generator" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.LognormalDistribution.#ctor(System.Double,System.Double)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.LognormalDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> as underlying random number generator.
            </summary>
      <param name="mu">
              The parameter mu which is used for generation of lognormal distributed random numbers.
            </param>
      <param name="sigma">
              The parameter sigma which is used for generation of lognormal distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="sigma" /> is less than zero.
            </exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.LognormalDistribution.#ctor(System.UInt32,System.Double,System.Double)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.LognormalDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> with the specified seed value.
            </summary>
      <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
      <param name="mu">
              The parameter mu which is used for generation of lognormal distributed random numbers.
            </param>
      <param name="sigma">
              The parameter sigma which is used for generation of lognormal distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="sigma" /> is less than zero.
            </exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.LognormalDistribution.#ctor(Troschuetz.Random.IGenerator,System.Double,System.Double)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.LognormalDistribution" /> class,
              using the specified <see cref="T:Troschuetz.Random.IGenerator" /> as underlying random number generator.
            </summary>
      <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator" /> object.</param>
      <param name="mu">
              The parameter mu which is used for generation of lognormal distributed random numbers.
            </param>
      <param name="sigma">
              The parameter sigma which is used for generation of lognormal distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="generator" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="sigma" /> is less than zero.
            </exception>
    </member>
    <member name="T:Troschuetz.Random.Distributions.Continuous.NormalDistribution`1">
      <summary>
              Provides generation of normal distributed random numbers.
            </summary>
      <remarks>
              The implementation of the <see cref="T:Troschuetz.Random.Distributions.Continuous.NormalDistribution" /> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/Normal_distribution">Wikipedia - Normal distribution</a>
              and the implementation in the <a href="http://www.lkn.ei.tum.de/lehre/scn/cncl/doc/html/cncl_toc.html">
              Communication Networks Class Library</a>.
            </remarks>
    </member>
    <member name="F:Troschuetz.Random.Distributions.Continuous.NormalDistribution`1.DefaultMu">
      <summary>
              The default value assigned to <see cref="P:Troschuetz.Random.Distributions.Continuous.NormalDistribution`1.Mu" /> if none is specified. 
            </summary>
    </member>
    <member name="F:Troschuetz.Random.Distributions.Continuous.NormalDistribution`1.DefaultSigma">
      <summary>
              The default value assigned to <see cref="P:Troschuetz.Random.Distributions.Continuous.NormalDistribution`1.Sigma" /> if none is specified. 
            </summary>
    </member>
    <member name="F:Troschuetz.Random.Distributions.Continuous.NormalDistribution`1._mu">
      <summary>
              Stores the parameter mu which is used for generation of normal distributed random numbers.
            </summary>
    </member>
    <member name="F:Troschuetz.Random.Distributions.Continuous.NormalDistribution`1._sigma">
      <summary>
              Stores the parameter sigma which is used for generation of normal distributed random numbers.
            </summary>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.NormalDistribution`1.#ctor(`0,System.Double,System.Double)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.NormalDistribution`1" /> class,
              using the specified <see cref="T:Troschuetz.Random.IGenerator" /> as underlying random number generator.
            </summary>
      <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator" /> object.</param>
      <param name="mu">
              The parameter mu which is used for generation of normal distributed random numbers.
            </param>
      <param name="sigma">
              The parameter sigma which is used for generation of normal distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="generator" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="!:sigma" /> is less than or equal to zero.
            </exception>
      <requires exception="T:System.ArgumentNullException" csharp="!ReferenceEquals((object)generator, null)" vb="Not ReferenceEquals(((Object)generator), Nothing)">!object.ReferenceEquals((object)generator, null)</requires>
      <exception cref="T:System.ArgumentNullException">object.ReferenceEquals((object)generator, null)</exception>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="AreValidParams(mu, sigma)" vb="AreValidParams(mu, sigma)">Troschuetz.Random.Distributions.Continuous.NormalDistribution&lt;TGen&gt;.AreValidParams(mu, sigma)</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">!Troschuetz.Random.Distributions.Continuous.NormalDistribution&lt;TGen&gt;.AreValidParams(mu, sigma)</exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.NormalDistribution`1.IsValidMu(System.Double)">
      <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.Distributions.Continuous.NormalDistribution`1.Mu" />.
            </summary>
      <param name="value">The value to check.</param>
      <returns>
        <see langword="true" />.</returns>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.NormalDistribution`1.IsValidSigma(System.Double)">
      <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.Distributions.Continuous.NormalDistribution`1.Sigma" />.
            </summary>
      <param name="value">The value to check.</param>
      <returns>
        <see langword="true" /> if value is greater than 0.0; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.NormalDistribution`1.AreValidParams(System.Double,System.Double)">
      <summary>
              Determines whether normal distribution is defined under given parameters.
            </summary>
      <param name="mu">
              The parameter mu which is used for generation of normal distributed random numbers.
            </param>
      <param name="sigma">
              The parameter sigma which is used for generation of normal distributed random numbers.
            </param>
      <returns>
              True if <see cref="F:Troschuetz.Random.Distributions.Continuous.NormalDistribution`1._sigma" /> is greater than zero; otherwise, it returns false.
            </returns>
      <pure />
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.NormalDistribution`1.Sample(`0,System.Double,System.Double)">
      <summary>
              Returns a normal distributed floating point random number.
            </summary>
      <param name="generator">The generator from which random number are drawn.</param>
      <param name="mu">
              The parameter mu which is used for generation of normal distributed random numbers.
            </param>
      <param name="sigma">
              The parameter sigma which is used for generation of normal distributed random numbers.
            </param>
      <returns>
              A normal distributed floating point random number.
            </returns>
      <pure />
    </member>
    <member name="P:Troschuetz.Random.Distributions.Continuous.NormalDistribution`1.Mu">
      <summary>
              Gets or sets the parameter mu which is used for generation of normal distributed random numbers.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />.
            </exception>
      <remarks>
              Calls <see cref="M:Troschuetz.Random.Distributions.Continuous.NormalDistribution`1.AreValidParams(System.Double,System.Double)" /> to determine whether a value is valid and therefore assignable.
            </remarks>
      <setter>
        <requires inheritedFrom="M:Troschuetz.Random.IMuDistribution`1.set_Mu(`0)" inheritedFromTypeName="IMuDistribution" exception="T:System.ArgumentOutOfRangeException" csharp="this.IsValidMu(value)" vb="Me.IsValidMu(value)">this.IsValidMu(value)</requires>
        <ensures inheritedFrom="M:Troschuetz.Random.IMuDistribution`1.set_Mu(`0)" inheritedFromTypeName="IMuDistribution" csharp="this.Mu.Equals((object)value)" vb="Me.Mu.Equals(((Object)value))">this.Mu.Equals((object)value)</ensures>
      </setter>
      <exception cref="T:System.ArgumentOutOfRangeException">!this.IsValidMu(value)</exception>
    </member>
    <member name="P:Troschuetz.Random.Distributions.Continuous.NormalDistribution`1.Sigma">
      <summary>
              Gets or sets the parameter sigma which is used for generation of normal distributed random numbers.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is less than or equal to zero.
            </exception>
      <remarks>
              Calls <see cref="M:Troschuetz.Random.Distributions.Continuous.NormalDistribution`1.AreValidParams(System.Double,System.Double)" /> to determine whether a value is valid and therefore assignable.
            </remarks>
      <setter>
        <requires inheritedFrom="M:Troschuetz.Random.ISigmaDistribution`1.set_Sigma(`0)" inheritedFromTypeName="ISigmaDistribution" exception="T:System.ArgumentOutOfRangeException" csharp="this.IsValidSigma(value)" vb="Me.IsValidSigma(value)">this.IsValidSigma(value)</requires>
        <ensures inheritedFrom="M:Troschuetz.Random.ISigmaDistribution`1.set_Sigma(`0)" inheritedFromTypeName="ISigmaDistribution" csharp="this.Sigma.Equals((object)value)" vb="Me.Sigma.Equals(((Object)value))">this.Sigma.Equals((object)value)</ensures>
      </setter>
      <exception cref="T:System.ArgumentOutOfRangeException">!this.IsValidSigma(value)</exception>
    </member>
    <member name="T:Troschuetz.Random.Distributions.Continuous.NormalDistribution">
      <summary>
              Provides generation of normal distributed random numbers.
            </summary>
      <remarks>
              The implementation of the <see cref="T:Troschuetz.Random.Distributions.Continuous.NormalDistribution" /> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/Normal_distribution">Wikipedia - Normal distribution</a>
              and the implementation in the <a href="http://www.lkn.ei.tum.de/lehre/scn/cncl/doc/html/cncl_toc.html">
              Communication Networks Class Library</a>.
            </remarks>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.NormalDistribution.#ctor">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.NormalDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> as underlying random number generator.
            </summary>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.NormalDistribution.#ctor(System.UInt32)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.NormalDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> with the specified seed value.
            </summary>
      <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.NormalDistribution.#ctor(Troschuetz.Random.IGenerator)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.NormalDistribution" /> class,
              using the specified <see cref="T:Troschuetz.Random.IGenerator" /> as underlying random number generator.
            </summary>
      <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator" /> object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="generator" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.NormalDistribution.#ctor(System.Double,System.Double)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.NormalDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> as underlying random number generator.
            </summary>
      <param name="mu">
              The parameter mu which is used for generation of normal distributed random numbers.
            </param>
      <param name="sigma">
              The parameter sigma which is used for generation of normal distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="!:sigma" /> is less than or equal to zero.
            </exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.NormalDistribution.#ctor(System.UInt32,System.Double,System.Double)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.NormalDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> with the specified seed value.
            </summary>
      <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
      <param name="mu">
              The parameter mu which is used for generation of normal distributed random numbers.
            </param>
      <param name="sigma">
              The parameter sigma which is used for generation of normal distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="!:sigma" /> is less than or equal to zero.
            </exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.NormalDistribution.#ctor(Troschuetz.Random.IGenerator,System.Double,System.Double)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.NormalDistribution" /> class,
              using the specified <see cref="T:Troschuetz.Random.IGenerator" /> as underlying random number generator.
            </summary>
      <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator" /> object.</param>
      <param name="mu">
              The parameter mu which is used for generation of normal distributed random numbers.
            </param>
      <param name="sigma">
              The parameter sigma which is used for generation of normal distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="generator" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="!:sigma" /> is less than or equal to zero.
            </exception>
    </member>
    <member name="T:Troschuetz.Random.Distributions.Continuous.ParetoDistribution`1">
      <summary>
              Provides generation of pareto distributed random numbers.
            </summary>
      <remarks>
              The implementation of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ParetoDistribution" /> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/Pareto_distribution">Wikipedia - Pareto distribution</a> and
              <a href="http://www.xycoon.com/par_random.htm">Xycoon - Pareto Distribution</a>.
            </remarks>
    </member>
    <member name="F:Troschuetz.Random.Distributions.Continuous.ParetoDistribution`1.DefaultAlpha">
      <summary>
              The default value assigned to <see cref="P:Troschuetz.Random.Distributions.Continuous.ParetoDistribution`1.Alpha" /> if none is specified. 
            </summary>
    </member>
    <member name="F:Troschuetz.Random.Distributions.Continuous.ParetoDistribution`1.DefaultBeta">
      <summary>
              The default value assigned to <see cref="P:Troschuetz.Random.Distributions.Continuous.ParetoDistribution`1.Beta" /> if none is specified. 
            </summary>
    </member>
    <member name="F:Troschuetz.Random.Distributions.Continuous.ParetoDistribution`1._beta">
      <summary>
              Stores the parameter beta which is used for generation of pareto distributed random numbers.
            </summary>
    </member>
    <member name="F:Troschuetz.Random.Distributions.Continuous.ParetoDistribution`1._alpha">
      <summary>
              Stores the parameter alpha which is used for generation of pareto distributed random numbers.
            </summary>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.ParetoDistribution`1.#ctor(`0,System.Double,System.Double)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ParetoDistribution" /> class,
              using the specified <see cref="T:Troschuetz.Random.IGenerator" /> as underlying random number generator.
            </summary>
      <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator" /> object.</param>
      <param name="alpha">
              The parameter alpha which is used for generation of pareto distributed random numbers.
            </param>
      <param name="beta">
              The parameter beta which is used for generation of pareto distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="generator" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> or <paramref name="beta" /> are less than or equal to zero.
            </exception>
      <requires exception="T:System.ArgumentNullException" csharp="!ReferenceEquals((object)generator, null)" vb="Not ReferenceEquals(((Object)generator), Nothing)">!object.ReferenceEquals((object)generator, null)</requires>
      <exception cref="T:System.ArgumentNullException">object.ReferenceEquals((object)generator, null)</exception>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="AreValidParams(alpha, beta)" vb="AreValidParams(alpha, beta)">Troschuetz.Random.Distributions.Continuous.ParetoDistribution&lt;TGen&gt;.AreValidParams(alpha, beta)</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">!Troschuetz.Random.Distributions.Continuous.ParetoDistribution&lt;TGen&gt;.AreValidParams(alpha, beta)</exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.ParetoDistribution`1.IsValidAlpha(System.Double)">
      <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.Distributions.Continuous.ParetoDistribution`1.Alpha" />.
            </summary>
      <param name="value">The value to check.</param>
      <returns>
        <see langword="true" /> if value is greater than 0.0; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.ParetoDistribution`1.IsValidBeta(System.Double)">
      <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.Distributions.Continuous.ParetoDistribution`1.Beta" />.
            </summary>
      <param name="value">The value to check.</param>
      <returns>
        <see langword="true" /> if value is greater than 0.0; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.ParetoDistribution`1.AreValidParams(System.Double,System.Double)">
      <summary>
              Determines whether pareto distribution is defined under given parameters.
            </summary>
      <param name="alpha">
              The parameter alpha which is used for generation of pareto distributed random numbers.
            </param>
      <param name="beta">
              The parameter beta which is used for generation of pareto distributed random numbers.
            </param>
      <returns>
              True if <paramref name="alpha" /> and <paramref name="beta" /> are greater than zero;
              otherwise, it returns false.
            </returns>
      <pure />
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.ParetoDistribution`1.Sample(`0,System.Double,System.Double)">
      <summary>
              Returns a pareto distributed floating point random number.
            </summary>
      <param name="generator">The generator from which random number are drawn.</param>
      <param name="alpha">
              The parameter alpha which is used for generation of pareto distributed random numbers.
            </param>
      <param name="beta">
              The parameter beta which is used for generation of pareto distributed random numbers.
            </param>
      <returns>
              A pareto distributed floating point random number.
            </returns>
      <pure />
    </member>
    <member name="P:Troschuetz.Random.Distributions.Continuous.ParetoDistribution`1.Alpha">
      <summary>
              Gets or sets the parameter alpha which is used for generation of pareto distributed random numbers.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is less than or equal to zero.
            </exception>
      <remarks>
              Calls <see cref="M:Troschuetz.Random.Distributions.Continuous.ParetoDistribution`1.AreValidParams(System.Double,System.Double)" /> to determine whether a value is valid and therefore assignable.
            </remarks>
      <setter>
        <requires inheritedFrom="M:Troschuetz.Random.IAlphaDistribution`1.set_Alpha(`0)" inheritedFromTypeName="IAlphaDistribution" exception="T:System.ArgumentOutOfRangeException" csharp="this.IsValidAlpha(value)" vb="Me.IsValidAlpha(value)">this.IsValidAlpha(value)</requires>
        <ensures inheritedFrom="M:Troschuetz.Random.IAlphaDistribution`1.set_Alpha(`0)" inheritedFromTypeName="IAlphaDistribution" csharp="this.Alpha.Equals((object)value)" vb="Me.Alpha.Equals(((Object)value))">this.Alpha.Equals((object)value)</ensures>
      </setter>
      <exception cref="T:System.ArgumentOutOfRangeException">!this.IsValidAlpha(value)</exception>
    </member>
    <member name="P:Troschuetz.Random.Distributions.Continuous.ParetoDistribution`1.Beta">
      <summary>
              Gets or sets the parameter beta which is used for generation of pareto distributed random numbers.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is less than or equal to zero.
            </exception>
      <remarks>
              Calls <see cref="M:Troschuetz.Random.Distributions.Continuous.ParetoDistribution`1.AreValidParams(System.Double,System.Double)" /> to determine whether a value is valid and therefore assignable.
            </remarks>
      <setter>
        <requires inheritedFrom="M:Troschuetz.Random.IBetaDistribution`1.set_Beta(`0)" inheritedFromTypeName="IBetaDistribution" exception="T:System.ArgumentOutOfRangeException" csharp="this.IsValidBeta(value)" vb="Me.IsValidBeta(value)">this.IsValidBeta(value)</requires>
        <ensures inheritedFrom="M:Troschuetz.Random.IBetaDistribution`1.set_Beta(`0)" inheritedFromTypeName="IBetaDistribution" csharp="this.Beta.Equals((object)value)" vb="Me.Beta.Equals(((Object)value))">this.Beta.Equals((object)value)</ensures>
      </setter>
      <exception cref="T:System.ArgumentOutOfRangeException">!this.IsValidBeta(value)</exception>
    </member>
    <member name="T:Troschuetz.Random.Distributions.Continuous.ParetoDistribution">
      <summary>
              Provides generation of pareto distributed random numbers.
            </summary>
      <remarks>
              The implementation of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ParetoDistribution" /> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/Pareto_distribution">Wikipedia - Pareto distribution</a> and
              <a href="http://www.xycoon.com/par_random.htm">Xycoon - Pareto Distribution</a>.
            </remarks>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.ParetoDistribution.#ctor">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ParetoDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> as underlying random number generator.
            </summary>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.ParetoDistribution.#ctor(System.UInt32)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ParetoDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> with the specified seed value.
            </summary>
      <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.ParetoDistribution.#ctor(Troschuetz.Random.IGenerator)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ParetoDistribution" /> class,
              using the specified <see cref="T:Troschuetz.Random.IGenerator" /> as underlying random number generator.
            </summary>
      <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator" /> object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="generator" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.ParetoDistribution.#ctor(System.Double,System.Double)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ParetoDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> as underlying random number generator.
            </summary>
      <param name="alpha">
              The parameter alpha which is used for generation of pareto distributed random numbers.
            </param>
      <param name="beta">
              The parameter beta which is used for generation of pareto distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> or <paramref name="beta" /> are less than or equal to zero.
            </exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.ParetoDistribution.#ctor(System.UInt32,System.Double,System.Double)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ParetoDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> with the specified seed value.
            </summary>
      <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
      <param name="alpha">
              The parameter alpha which is used for generation of pareto distributed random numbers.
            </param>
      <param name="beta">
              The parameter beta which is used for generation of pareto distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> or <paramref name="beta" /> are less than or equal to zero.
            </exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.ParetoDistribution.#ctor(Troschuetz.Random.IGenerator,System.Double,System.Double)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.ParetoDistribution" /> class,
              using the specified <see cref="T:Troschuetz.Random.IGenerator" /> as underlying random number generator.
            </summary>
      <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator" /> object.</param>
      <param name="alpha">
              The parameter alpha which is used for generation of pareto distributed random numbers.
            </param>
      <param name="beta">
              The parameter beta which is used for generation of pareto distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="generator" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> or <paramref name="beta" /> are less than or equal to zero.
            </exception>
    </member>
    <member name="T:Troschuetz.Random.Distributions.Continuous.PowerDistribution`1">
      <summary>
              Provides generation of power distributed random numbers.
            </summary>
      <remarks>
              The implementation of the <see cref="T:Troschuetz.Random.Distributions.Continuous.PowerDistribution" /> type bases upon information presented on
              <a href="http://www.xycoon.com/power.htm">Xycoon - Power Distribution</a>.
            </remarks>
    </member>
    <member name="F:Troschuetz.Random.Distributions.Continuous.PowerDistribution`1.DefaultAlpha">
      <summary>
              The default value assigned to <see cref="P:Troschuetz.Random.Distributions.Continuous.PowerDistribution`1.Alpha" /> if none is specified. 
            </summary>
    </member>
    <member name="F:Troschuetz.Random.Distributions.Continuous.PowerDistribution`1.DefaultBeta">
      <summary>
              The default value assigned to <see cref="P:Troschuetz.Random.Distributions.Continuous.PowerDistribution`1.Beta" /> if none is specified. 
            </summary>
    </member>
    <member name="F:Troschuetz.Random.Distributions.Continuous.PowerDistribution`1._alpha">
      <summary>
              Stores the parameter alpha which is used for generation of power distributed random numbers.
            </summary>
    </member>
    <member name="F:Troschuetz.Random.Distributions.Continuous.PowerDistribution`1._beta">
      <summary>
              Stores the parameter beta which is used for generation of power distributed random numbers.
            </summary>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.PowerDistribution`1.#ctor(`0,System.Double,System.Double)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.PowerDistribution" /> class,
              using the specified <see cref="T:Troschuetz.Random.IGenerator" /> as underlying random number generator.
            </summary>
      <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator" /> object.</param>
      <param name="alpha">
              The parameter alpha which is used for generation of power distributed random numbers.
            </param>
      <param name="beta">
              The parameter beta which is used for generation of power distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="generator" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> or <paramref name="beta" /> are less than or equal to zero.
            </exception>
      <requires exception="T:System.ArgumentNullException" csharp="!ReferenceEquals((object)generator, null)" vb="Not ReferenceEquals(((Object)generator), Nothing)">!object.ReferenceEquals((object)generator, null)</requires>
      <exception cref="T:System.ArgumentNullException">object.ReferenceEquals((object)generator, null)</exception>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="AreValidParams(alpha, beta)" vb="AreValidParams(alpha, beta)">Troschuetz.Random.Distributions.Continuous.PowerDistribution&lt;TGen&gt;.AreValidParams(alpha, beta)</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">!Troschuetz.Random.Distributions.Continuous.PowerDistribution&lt;TGen&gt;.AreValidParams(alpha, beta)</exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.PowerDistribution`1.IsValidAlpha(System.Double)">
      <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.Distributions.Continuous.PowerDistribution`1.Alpha" />.
            </summary>
      <param name="value">The value to check.</param>
      <returns>
        <see langword="true" /> if value is greater than 0.0; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.PowerDistribution`1.IsValidBeta(System.Double)">
      <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.Distributions.Continuous.PowerDistribution`1.Beta" />.
            </summary>
      <param name="value">The value to check.</param>
      <returns>
        <see langword="true" /> if value is greater than 0.0; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.PowerDistribution`1.AreValidParams(System.Double,System.Double)">
      <summary>
              Determines whether power distribution is defined under given parameters.
            </summary>
      <param name="alpha">
              The parameter alpha which is used for generation of power distributed random numbers.
            </param>
      <param name="beta">
              The parameter beta which is used for generation of power distributed random numbers.
            </param>
      <returns>
              True if <paramref name="alpha" /> and <paramref name="beta" /> are greater than zero;
              otherwise, it returns false.
            </returns>
      <pure />
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.PowerDistribution`1.Sample(`0,System.Double,System.Double)">
      <summary>
              Returns a power distributed floating point random number.
            </summary>
      <param name="generator">The generator from which random number are drawn.</param>
      <param name="alpha">
              The parameter alpha which is used for generation of power distributed random numbers.
            </param>
      <param name="beta">
              The parameter beta which is used for generation of power distributed random numbers.
            </param>
      <returns>
              A power distributed floating point random number.
            </returns>
      <pure />
    </member>
    <member name="P:Troschuetz.Random.Distributions.Continuous.PowerDistribution`1.Alpha">
      <summary>
              Gets or sets the parameter alpha which is used for generation of power distributed random numbers.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is less than or equal to zero.
            </exception>
      <remarks>
              Calls <see cref="M:Troschuetz.Random.Distributions.Continuous.PowerDistribution`1.IsValidAlpha(System.Double)" /> to determine whether a value is valid and therefore assignable.
            </remarks>
      <setter>
        <requires inheritedFrom="M:Troschuetz.Random.IAlphaDistribution`1.set_Alpha(`0)" inheritedFromTypeName="IAlphaDistribution" exception="T:System.ArgumentOutOfRangeException" csharp="this.IsValidAlpha(value)" vb="Me.IsValidAlpha(value)">this.IsValidAlpha(value)</requires>
        <ensures inheritedFrom="M:Troschuetz.Random.IAlphaDistribution`1.set_Alpha(`0)" inheritedFromTypeName="IAlphaDistribution" csharp="this.Alpha.Equals((object)value)" vb="Me.Alpha.Equals(((Object)value))">this.Alpha.Equals((object)value)</ensures>
      </setter>
      <exception cref="T:System.ArgumentOutOfRangeException">!this.IsValidAlpha(value)</exception>
    </member>
    <member name="P:Troschuetz.Random.Distributions.Continuous.PowerDistribution`1.Beta">
      <summary>
              Gets or sets the parameter beta which is used for generation of power distributed random numbers.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is less than or equal to zero.
            </exception>
      <remarks>
              Calls <see cref="M:Troschuetz.Random.Distributions.Continuous.PowerDistribution`1.IsValidBeta(System.Double)" /> to determine whether a value is valid and therefore assignable.
            </remarks>
      <setter>
        <requires inheritedFrom="M:Troschuetz.Random.IBetaDistribution`1.set_Beta(`0)" inheritedFromTypeName="IBetaDistribution" exception="T:System.ArgumentOutOfRangeException" csharp="this.IsValidBeta(value)" vb="Me.IsValidBeta(value)">this.IsValidBeta(value)</requires>
        <ensures inheritedFrom="M:Troschuetz.Random.IBetaDistribution`1.set_Beta(`0)" inheritedFromTypeName="IBetaDistribution" csharp="this.Beta.Equals((object)value)" vb="Me.Beta.Equals(((Object)value))">this.Beta.Equals((object)value)</ensures>
      </setter>
      <exception cref="T:System.ArgumentOutOfRangeException">!this.IsValidBeta(value)</exception>
    </member>
    <member name="T:Troschuetz.Random.Distributions.Continuous.PowerDistribution">
      <summary>
              Provides generation of power distributed random numbers.
            </summary>
      <remarks>
              The implementation of the <see cref="T:Troschuetz.Random.Distributions.Continuous.PowerDistribution" /> type bases upon information presented on
              <a href="http://www.xycoon.com/power.htm">Xycoon - Power Distribution</a>.
            </remarks>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.PowerDistribution.#ctor">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.PowerDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> as underlying random number generator.
            </summary>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.PowerDistribution.#ctor(System.UInt32)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.PowerDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> with the specified seed value.
            </summary>
      <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.PowerDistribution.#ctor(Troschuetz.Random.IGenerator)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.PowerDistribution" /> class,
              using the specified <see cref="T:Troschuetz.Random.IGenerator" /> as underlying random number generator.
            </summary>
      <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator" /> object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="generator" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.PowerDistribution.#ctor(System.Double,System.Double)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.PowerDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> as underlying random number generator.
            </summary>
      <param name="alpha">
              The parameter alpha which is used for generation of power distributed random numbers.
            </param>
      <param name="beta">
              The parameter beta which is used for generation of power distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> or <paramref name="beta" /> are less than or equal to zero.
            </exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.PowerDistribution.#ctor(System.UInt32,System.Double,System.Double)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.PowerDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> with the specified seed value.
            </summary>
      <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
      <param name="alpha">
              The parameter alpha which is used for generation of power distributed random numbers.
            </param>
      <param name="beta">
              The parameter beta which is used for generation of power distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> or <paramref name="beta" /> are less than or equal to zero.
            </exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.PowerDistribution.#ctor(Troschuetz.Random.IGenerator,System.Double,System.Double)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.PowerDistribution" /> class,
              using the specified <see cref="T:Troschuetz.Random.IGenerator" /> as underlying random number generator.
            </summary>
      <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator" /> object.</param>
      <param name="alpha">
              The parameter alpha which is used for generation of power distributed random numbers.
            </param>
      <param name="beta">
              The parameter beta which is used for generation of power distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="generator" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> or <paramref name="beta" /> are less than or equal to zero.
            </exception>
    </member>
    <member name="T:Troschuetz.Random.Distributions.Continuous.RayleighDistribution`1">
      <summary>
              Provides generation of rayleigh distributed random numbers.
            </summary>
      <remarks>
              The implementation of the <see cref="T:Troschuetz.Random.Distributions.Continuous.RayleighDistribution" /> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/Rayleigh_distribution">Wikipedia - Rayleigh Distribution</a>.
            </remarks>
    </member>
    <member name="F:Troschuetz.Random.Distributions.Continuous.RayleighDistribution`1.DefaultSigma">
      <summary>
              The default value assigned to <see cref="P:Troschuetz.Random.Distributions.Continuous.RayleighDistribution`1.Sigma" /> if none is specified. 
            </summary>
    </member>
    <member name="F:Troschuetz.Random.Distributions.Continuous.RayleighDistribution`1._sigma">
      <summary>
              Stores the parameter sigma which is used for generation of rayleigh distributed random numbers.
            </summary>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.RayleighDistribution`1.#ctor(`0,System.Double)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.RayleighDistribution" /> class,
              using the specified <see cref="T:Troschuetz.Random.IGenerator" /> as underlying random number generator.
            </summary>
      <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator" /> object.</param>
      <param name="sigma">
              The parameter sigma which is used for generation of rayleigh distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="generator" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="sigma" /> is less than or equal to zero.
            </exception>
      <requires exception="T:System.ArgumentNullException" csharp="!ReferenceEquals((object)generator, null)" vb="Not ReferenceEquals(((Object)generator), Nothing)">!object.ReferenceEquals((object)generator, null)</requires>
      <exception cref="T:System.ArgumentNullException">object.ReferenceEquals((object)generator, null)</exception>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="IsValidParam(sigma)" vb="IsValidParam(sigma)">Troschuetz.Random.Distributions.Continuous.RayleighDistribution&lt;TGen&gt;.IsValidParam(sigma)</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">!Troschuetz.Random.Distributions.Continuous.RayleighDistribution&lt;TGen&gt;.IsValidParam(sigma)</exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.RayleighDistribution`1.IsValidSigma(System.Double)">
      <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.Distributions.Continuous.RayleighDistribution`1.Sigma" />.
            </summary>
      <param name="value">The value to check.</param>
      <returns>
        <see langword="true" /> if value is greater than 0.0; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.RayleighDistribution`1.IsValidParam(System.Double)">
      <summary>
              Determines whether rayleigh distribution is defined under given parameter.
            </summary>
      <param name="sigma">
              The parameter sigma which is used for generation of rayleigh distributed random numbers.
            </param>
      <returns>
              True if <paramref name="sigma" /> is greater than zero; otherwise, it returns false.
            </returns>
      <pure />
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.RayleighDistribution`1.Sample(`0,System.Double)">
      <summary>
              Returns a rayleigh distributed floating point random number.
            </summary>
      <param name="generator">The generator from which random number are drawn.</param>
      <param name="sigma">
              The parameter sigma which is used for generation of rayleigh distributed random numbers.
            </param>
      <returns>
              A rayleigh distributed floating point random number.
            </returns>
      <pure />
    </member>
    <member name="P:Troschuetz.Random.Distributions.Continuous.RayleighDistribution`1.Sigma">
      <summary>
              Gets or sets the parameter sigma which is used for generation of rayleigh distributed random numbers.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is less than or equal to zero.
            </exception>
      <remarks>
              Calls <see cref="M:Troschuetz.Random.Distributions.Continuous.RayleighDistribution`1.IsValidParam(System.Double)" /> to determine whether a value is valid and therefore assignable.
            </remarks>
      <setter>
        <requires inheritedFrom="M:Troschuetz.Random.ISigmaDistribution`1.set_Sigma(`0)" inheritedFromTypeName="ISigmaDistribution" exception="T:System.ArgumentOutOfRangeException" csharp="this.IsValidSigma(value)" vb="Me.IsValidSigma(value)">this.IsValidSigma(value)</requires>
        <ensures inheritedFrom="M:Troschuetz.Random.ISigmaDistribution`1.set_Sigma(`0)" inheritedFromTypeName="ISigmaDistribution" csharp="this.Sigma.Equals((object)value)" vb="Me.Sigma.Equals(((Object)value))">this.Sigma.Equals((object)value)</ensures>
      </setter>
      <exception cref="T:System.ArgumentOutOfRangeException">!this.IsValidSigma(value)</exception>
    </member>
    <member name="T:Troschuetz.Random.Distributions.Continuous.RayleighDistribution">
      <summary>
              Provides generation of rayleigh distributed random numbers.
            </summary>
      <remarks>
              The implementation of the <see cref="T:Troschuetz.Random.Distributions.Continuous.RayleighDistribution" /> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/Rayleigh_distribution">Wikipedia - Rayleigh Distribution</a>.
            </remarks>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.RayleighDistribution.#ctor">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.RayleighDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> as underlying random number generator.
            </summary>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.RayleighDistribution.#ctor(System.UInt32)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.RayleighDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> with the specified seed value.
            </summary>
      <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.RayleighDistribution.#ctor(Troschuetz.Random.IGenerator)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.RayleighDistribution" /> class,
              using the specified <see cref="T:Troschuetz.Random.IGenerator" /> as underlying random number generator.
            </summary>
      <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator" /> object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="generator" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.RayleighDistribution.#ctor(System.Double)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.RayleighDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> as underlying random number generator.
            </summary>
      <param name="sigma">
              The parameter sigma which is used for generation of rayleigh distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="sigma" /> is less than or equal to zero.
            </exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.RayleighDistribution.#ctor(System.UInt32,System.Double)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.RayleighDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> with the specified seed value.
            </summary>
      <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
      <param name="sigma">
              The parameter sigma which is used for generation of rayleigh distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="sigma" /> is less than or equal to zero.
            </exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.RayleighDistribution.#ctor(Troschuetz.Random.IGenerator,System.Double)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.RayleighDistribution" /> class,
              using the specified <see cref="T:Troschuetz.Random.IGenerator" /> as underlying random number generator.
            </summary>
      <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator" /> object.</param>
      <param name="sigma">
              The parameter sigma which is used for generation of rayleigh distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="generator" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="sigma" /> is less than or equal to zero.
            </exception>
    </member>
    <member name="T:Troschuetz.Random.Distributions.Continuous.StudentsTDistribution`1">
      <summary>
              Provides generation of t-distributed random numbers.
            </summary>
      <remarks>
              The implementation of the <see cref="T:Troschuetz.Random.Distributions.Continuous.StudentsTDistribution" /> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/Student%27s_t-distribution">Wikipedia - Student's t-distribution</a> and
              <a href="http://www.xycoon.com/stt_random.htm">Xycoon - Student t Distribution</a>.
            </remarks>
    </member>
    <member name="F:Troschuetz.Random.Distributions.Continuous.StudentsTDistribution`1.DefaultNu">
      <summary>
              The default value assigned to <see cref="P:Troschuetz.Random.Distributions.Continuous.StudentsTDistribution`1.Nu" /> if none is specified. 
            </summary>
    </member>
    <member name="F:Troschuetz.Random.Distributions.Continuous.StudentsTDistribution`1._nu">
      <summary>
              Stores the parameter nu which is used for generation of t-distributed random numbers.
            </summary>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.StudentsTDistribution`1.#ctor(`0,System.Int32)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.StudentsTDistribution" /> class,
              using the specified <see cref="T:Troschuetz.Random.IGenerator" /> as underlying random number generator.
            </summary>
      <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator" /> object.</param>
      <param name="nu">
              The parameter nu which is used for generation of student's t distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="generator" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="nu" /> is less than or equal to zero.
            </exception>
      <requires exception="T:System.ArgumentNullException" csharp="!ReferenceEquals((object)generator, null)" vb="Not ReferenceEquals(((Object)generator), Nothing)">!object.ReferenceEquals((object)generator, null)</requires>
      <exception cref="T:System.ArgumentNullException">object.ReferenceEquals((object)generator, null)</exception>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="IsValidParam(nu)" vb="IsValidParam(nu)">Troschuetz.Random.Distributions.Continuous.StudentsTDistribution&lt;TGen&gt;.IsValidParam(nu)</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">!Troschuetz.Random.Distributions.Continuous.StudentsTDistribution&lt;TGen&gt;.IsValidParam(nu)</exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.StudentsTDistribution`1.IsValidNu(System.Int32)">
      <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.Distributions.Continuous.StudentsTDistribution`1.Nu" />.
            </summary>
      <param name="value">The value to check.</param>
      <returns>
        <see langword="true" /> if value is greater than 0; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.StudentsTDistribution`1.IsValidParam(System.Int32)">
      <summary>
              Determines whether student's t distribution is defined under given parameter.
            </summary>
      <param name="nu">
              The parameter nu which is used for generation of student's t distributed random numbers.
            </param>
      <returns>
              True if <paramref name="nu" /> is greater than zero; otherwise, it returns false.
            </returns>
      <pure />
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.StudentsTDistribution`1.Sample(`0,System.Int32)">
      <summary>
              Returns a student's t distributed floating point random number.
            </summary>
      <param name="generator">The generator from which random number are drawn.</param>
      <param name="nu">
              The parameter nu which is used for generation of student's t distributed random numbers.
            </param>
      <returns>
              A student's t distributed floating point random number.
            </returns>
      <pure />
    </member>
    <member name="P:Troschuetz.Random.Distributions.Continuous.StudentsTDistribution`1.Nu">
      <summary>
              Gets or sets the parameter nu which is used for generation of t-distributed random numbers.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is less than or equal to zero.
            </exception>
      <remarks>
              Calls <see cref="M:Troschuetz.Random.Distributions.Continuous.StudentsTDistribution`1.IsValidParam(System.Int32)" /> to determine whether a value is valid and therefore assignable.
            </remarks>
      <setter>
        <requires inheritedFrom="M:Troschuetz.Random.INuDistribution`1.set_Nu(`0)" inheritedFromTypeName="INuDistribution" exception="T:System.ArgumentOutOfRangeException" csharp="this.IsValidNu(value)" vb="Me.IsValidNu(value)">this.IsValidNu(value)</requires>
        <ensures inheritedFrom="M:Troschuetz.Random.INuDistribution`1.set_Nu(`0)" inheritedFromTypeName="INuDistribution" csharp="this.Nu.Equals((object)value)" vb="Me.Nu.Equals(((Object)value))">this.Nu.Equals((object)value)</ensures>
      </setter>
      <exception cref="T:System.ArgumentOutOfRangeException">!this.IsValidNu(value)</exception>
    </member>
    <member name="T:Troschuetz.Random.Distributions.Continuous.StudentsTDistribution">
      <summary>
              Provides generation of t-distributed random numbers.
            </summary>
      <remarks>
              The implementation of the <see cref="T:Troschuetz.Random.Distributions.Continuous.StudentsTDistribution" /> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/Student%27s_t-distribution">Wikipedia - Student's t-distribution</a> and
              <a href="http://www.xycoon.com/stt_random.htm">Xycoon - Student t Distribution</a>.
            </remarks>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.StudentsTDistribution.#ctor">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.StudentsTDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> as underlying random number generator.
            </summary>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.StudentsTDistribution.#ctor(System.UInt32)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.StudentsTDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> with the specified seed value.
            </summary>
      <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.StudentsTDistribution.#ctor(Troschuetz.Random.IGenerator)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.StudentsTDistribution" /> class,
              using the specified <see cref="T:Troschuetz.Random.IGenerator" /> as underlying random number generator.
            </summary>
      <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator" /> object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="generator" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.StudentsTDistribution.#ctor(System.Int32)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.StudentsTDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> as underlying random number generator.
            </summary>
      <param name="nu">
              The parameter nu which is used for generation of student's t distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="nu" /> is less than or equal to zero.
            </exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.StudentsTDistribution.#ctor(System.UInt32,System.Int32)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.StudentsTDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> with the specified seed value.
            </summary>
      <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
      <param name="nu">
              The parameter nu which is used for generation of student's t distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="nu" /> is less than or equal to zero.
            </exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.StudentsTDistribution.#ctor(Troschuetz.Random.IGenerator,System.Int32)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.StudentsTDistribution" /> class,
              using the specified <see cref="T:Troschuetz.Random.IGenerator" /> as underlying random number generator.
            </summary>
      <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator" /> object.</param>
      <param name="nu">
              The parameter nu which is used for generation of student's t distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="generator" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="nu" /> is less than or equal to zero.
            </exception>
    </member>
    <member name="T:Troschuetz.Random.Distributions.Continuous.TriangularDistribution`1">
      <summary>
              Provides generation of triangular distributed random numbers.
            </summary>
      <remarks>
              The implementation of the <see cref="T:Troschuetz.Random.Distributions.Continuous.TriangularDistribution" /> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/Triangular_distribution">Wikipedia - Triangular distribution</a>
              and the implementation in the <a href="http://www.boost.org/libs/random/index.html">Boost Random Number Library</a>.
            </remarks>
    </member>
    <member name="F:Troschuetz.Random.Distributions.Continuous.TriangularDistribution`1.DefaultAlpha">
      <summary>
              The default value assigned to <see cref="P:Troschuetz.Random.Distributions.Continuous.TriangularDistribution`1.Alpha" /> if none is specified. 
            </summary>
    </member>
    <member name="F:Troschuetz.Random.Distributions.Continuous.TriangularDistribution`1.DefaultBeta">
      <summary>
              The default value assigned to <see cref="P:Troschuetz.Random.Distributions.Continuous.TriangularDistribution`1.Beta" /> if none is specified. 
            </summary>
    </member>
    <member name="F:Troschuetz.Random.Distributions.Continuous.TriangularDistribution`1.DefaultGamma">
      <summary>
              The default value assigned to <see cref="P:Troschuetz.Random.Distributions.Continuous.TriangularDistribution`1.Gamma" /> if none is specified. 
            </summary>
    </member>
    <member name="F:Troschuetz.Random.Distributions.Continuous.TriangularDistribution`1._alpha">
      <summary>
              Stores the parameter alpha which is used for generation of triangular distributed random numbers.
            </summary>
    </member>
    <member name="F:Troschuetz.Random.Distributions.Continuous.TriangularDistribution`1._beta">
      <summary>
              Stores the parameter beta which is used for generation of triangular distributed random numbers.
            </summary>
    </member>
    <member name="F:Troschuetz.Random.Distributions.Continuous.TriangularDistribution`1._gamma">
      <summary>
              Stores the parameter gamma which is used for generation of triangular distributed random numbers.
            </summary>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.TriangularDistribution`1.#ctor(`0,System.Double,System.Double,System.Double)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.TriangularDistribution" /> class,
              using the specified <see cref="T:Troschuetz.Random.IGenerator" /> as underlying random number generator.
            </summary>
      <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator" /> object.</param>
      <param name="alpha">
              The parameter alpha which is used for generation of triangular distributed random numbers.
            </param>
      <param name="beta">
              The parameter beta which is used for generation of triangular distributed random numbers.
            </param>
      <param name="gamma">
              The parameter gamma which is used for generation of triangular distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="generator" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> is greater than or equal to <paramref name="beta" />,
              or <paramref name="alpha" /> is greater than <paramref name="gamma" />,
              or <paramref name="beta" /> is less than <paramref name="gamma" />.
            </exception>
      <requires exception="T:System.ArgumentNullException" csharp="!ReferenceEquals((object)generator, null)" vb="Not ReferenceEquals(((Object)generator), Nothing)">!object.ReferenceEquals((object)generator, null)</requires>
      <exception cref="T:System.ArgumentNullException">object.ReferenceEquals((object)generator, null)</exception>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="AreValidParams(alpha, beta, gamma)" vb="AreValidParams(alpha, beta, gamma)">Troschuetz.Random.Distributions.Continuous.TriangularDistribution&lt;TGen&gt;.AreValidParams(alpha, beta, gamma)</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">!Troschuetz.Random.Distributions.Continuous.TriangularDistribution&lt;TGen&gt;.AreValidParams(alpha, beta, gamma)</exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.TriangularDistribution`1.IsValidAlpha(System.Double)">
      <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.Distributions.Continuous.TriangularDistribution`1.Alpha" />.
            </summary>
      <param name="value">The value to check.</param>
      <returns>
        <see langword="true" /> if value is less than <see cref="P:Troschuetz.Random.Distributions.Continuous.TriangularDistribution`1.Beta" />, and less than or equal to 
              <see cref="P:Troschuetz.Random.Distributions.Continuous.TriangularDistribution`1.Gamma" />; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.TriangularDistribution`1.IsValidBeta(System.Double)">
      <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.Distributions.Continuous.TriangularDistribution`1.Beta" />.
            </summary>
      <param name="value">The value to check.</param>
      <returns>
        <see langword="true" /> if value is greater than <see cref="P:Troschuetz.Random.Distributions.Continuous.TriangularDistribution`1.Alpha" />, and greater than or equal to 
              <see cref="P:Troschuetz.Random.Distributions.Continuous.TriangularDistribution`1.Gamma" />; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.TriangularDistribution`1.IsValidGamma(System.Double)">
      <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.Distributions.Continuous.TriangularDistribution`1.Gamma" />.
            </summary>
      <param name="value">The value to check.</param>
      <returns>
        <see langword="true" /> if value is greater than or equal to <see cref="P:Troschuetz.Random.Distributions.Continuous.TriangularDistribution`1.Alpha" />, and greater than or equal 
              to <see cref="P:Troschuetz.Random.Distributions.Continuous.TriangularDistribution`1.Beta" />; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.TriangularDistribution`1.AreValidParams(System.Double,System.Double,System.Double)">
      <summary>
              Determines whether triangular distribution is defined under given parameters.
            </summary>
      <param name="alpha">
              The parameter alpha which is used for generation of triangular distributed random numbers.
            </param>
      <param name="beta">
              The parameter beta which is used for generation of triangular distributed random numbers.
            </param>
      <param name="gamma">
              The parameter gamma which is used for generation of triangular distributed random numbers.
            </param>
      <returns>
              True if <paramref name="alpha" /> is less than <paramref name="beta" />,
              and if <paramref name="alpha" /> is less than or equal to <paramref name="gamma" />,
              and if <paramref name="beta" /> is greater than or equal to <paramref name="gamma" />;
              otherwise, it returns false.
            </returns>
      <pure />
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.TriangularDistribution`1.Sample(`0,System.Double,System.Double,System.Double)">
      <summary>
              Returns a triangular distributed floating point random number.
            </summary>
      <param name="generator">The generator from which random number are drawn.</param>
      <param name="alpha">
              The parameter alpha which is used for generation of triangular distributed random numbers.
            </param>
      <param name="beta">
              The parameter beta which is used for generation of triangular distributed random numbers.
            </param>
      <param name="gamma">
              The parameter gamma which is used for generation of triangular distributed random numbers.
            </param>
      <returns>
              A triangular distributed floating point random number.
            </returns>
      <pure />
    </member>
    <member name="P:Troschuetz.Random.Distributions.Continuous.TriangularDistribution`1.Alpha">
      <summary>
              Gets or sets the parameter alpha which is used for generation of triangular distributed random numbers.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is greater than or equal to <see cref="P:Troschuetz.Random.Distributions.Continuous.TriangularDistribution`1.Beta" />,
              or <paramref name="value" /> is greater than <see cref="P:Troschuetz.Random.Distributions.Continuous.TriangularDistribution`1.Gamma" />.
            </exception>
      <remarks>
              Calls <see cref="M:Troschuetz.Random.Distributions.Continuous.TriangularDistribution`1.AreValidParams(System.Double,System.Double,System.Double)" /> to determine whether a value is valid and therefore assignable.
            </remarks>
      <setter>
        <requires inheritedFrom="M:Troschuetz.Random.IAlphaDistribution`1.set_Alpha(`0)" inheritedFromTypeName="IAlphaDistribution" exception="T:System.ArgumentOutOfRangeException" csharp="this.IsValidAlpha(value)" vb="Me.IsValidAlpha(value)">this.IsValidAlpha(value)</requires>
        <ensures inheritedFrom="M:Troschuetz.Random.IAlphaDistribution`1.set_Alpha(`0)" inheritedFromTypeName="IAlphaDistribution" csharp="this.Alpha.Equals((object)value)" vb="Me.Alpha.Equals(((Object)value))">this.Alpha.Equals((object)value)</ensures>
      </setter>
      <exception cref="T:System.ArgumentOutOfRangeException">!this.IsValidAlpha(value)</exception>
    </member>
    <member name="P:Troschuetz.Random.Distributions.Continuous.TriangularDistribution`1.Beta">
      <summary>
              Gets or sets the parameter beta which is used for generation of triangular distributed random numbers.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="P:Troschuetz.Random.Distributions.Continuous.TriangularDistribution`1.Alpha" /> is greater than or equal to <paramref name="value" />,
              or <paramref name="value" /> is less than <see cref="P:Troschuetz.Random.Distributions.Continuous.TriangularDistribution`1.Gamma" />.
            </exception>
      <remarks>
              Calls <see cref="M:Troschuetz.Random.Distributions.Continuous.TriangularDistribution`1.AreValidParams(System.Double,System.Double,System.Double)" /> to determine whether a value is valid and therefore assignable.
            </remarks>
      <setter>
        <requires inheritedFrom="M:Troschuetz.Random.IBetaDistribution`1.set_Beta(`0)" inheritedFromTypeName="IBetaDistribution" exception="T:System.ArgumentOutOfRangeException" csharp="this.IsValidBeta(value)" vb="Me.IsValidBeta(value)">this.IsValidBeta(value)</requires>
        <ensures inheritedFrom="M:Troschuetz.Random.IBetaDistribution`1.set_Beta(`0)" inheritedFromTypeName="IBetaDistribution" csharp="this.Beta.Equals((object)value)" vb="Me.Beta.Equals(((Object)value))">this.Beta.Equals((object)value)</ensures>
      </setter>
      <exception cref="T:System.ArgumentOutOfRangeException">!this.IsValidBeta(value)</exception>
    </member>
    <member name="P:Troschuetz.Random.Distributions.Continuous.TriangularDistribution`1.Gamma">
      <summary>
              Gets or sets the parameter gamma which is used for generation of triangular distributed random numbers.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="P:Troschuetz.Random.Distributions.Continuous.TriangularDistribution`1.Alpha" /> is greater than <paramref name="value" />,
              or <see cref="P:Troschuetz.Random.Distributions.Continuous.TriangularDistribution`1.Beta" /> is less than <paramref name="value" />.
            </exception>
      <remarks>
              Calls <see cref="M:Troschuetz.Random.Distributions.Continuous.TriangularDistribution`1.AreValidParams(System.Double,System.Double,System.Double)" /> to determine whether a value is valid and therefore assignable.
            </remarks>
      <setter>
        <requires inheritedFrom="M:Troschuetz.Random.IGammaDistribution`1.set_Gamma(`0)" inheritedFromTypeName="IGammaDistribution" exception="T:System.ArgumentOutOfRangeException" csharp="this.IsValidGamma(value)" vb="Me.IsValidGamma(value)">this.IsValidGamma(value)</requires>
        <ensures inheritedFrom="M:Troschuetz.Random.IGammaDistribution`1.set_Gamma(`0)" inheritedFromTypeName="IGammaDistribution" csharp="this.Gamma.Equals((object)value)" vb="Me.Gamma.Equals(((Object)value))">this.Gamma.Equals((object)value)</ensures>
      </setter>
      <exception cref="T:System.ArgumentOutOfRangeException">!this.IsValidGamma(value)</exception>
    </member>
    <member name="T:Troschuetz.Random.Distributions.Continuous.TriangularDistribution">
      <summary>
              Provides generation of triangular distributed random numbers.
            </summary>
      <remarks>
              The implementation of the <see cref="T:Troschuetz.Random.Distributions.Continuous.TriangularDistribution" /> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/Triangular_distribution">Wikipedia - Triangular distribution</a>
              and the implementation in the <a href="http://www.boost.org/libs/random/index.html">Boost Random Number Library</a>.
            </remarks>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.TriangularDistribution.#ctor">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.TriangularDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> as underlying random number generator.
            </summary>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.TriangularDistribution.#ctor(System.UInt32)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.TriangularDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> with the specified seed value.
            </summary>
      <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.TriangularDistribution.#ctor(Troschuetz.Random.IGenerator)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.TriangularDistribution" /> class,
              using the specified <see cref="T:Troschuetz.Random.IGenerator" /> as underlying random number generator.
            </summary>
      <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator" /> object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="generator" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.TriangularDistribution.#ctor(System.Double,System.Double,System.Double)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.TriangularDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> as underlying random number generator.
            </summary>
      <param name="alpha">
              The parameter alpha which is used for generation of triangular distributed random numbers.
            </param>
      <param name="beta">
              The parameter beta which is used for generation of triangular distributed random numbers.
            </param>
      <param name="gamma">
              The parameter gamma which is used for generation of triangular distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> is greater than or equal to <paramref name="beta" />,
              or <paramref name="alpha" /> is greater than <paramref name="gamma" />,
              or <paramref name="beta" /> is less than <paramref name="gamma" />.
            </exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.TriangularDistribution.#ctor(System.UInt32,System.Double,System.Double,System.Double)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.TriangularDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> with the specified seed value.
            </summary>
      <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
      <param name="alpha">
              The parameter alpha which is used for generation of triangular distributed random numbers.
            </param>
      <param name="beta">
              The parameter beta which is used for generation of triangular distributed random numbers.
            </param>
      <param name="gamma">
              The parameter gamma which is used for generation of triangular distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> is greater than or equal to <paramref name="beta" />,
              or <paramref name="alpha" /> is greater than <paramref name="gamma" />,
              or <paramref name="beta" /> is less than <paramref name="gamma" />.
            </exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.TriangularDistribution.#ctor(Troschuetz.Random.IGenerator,System.Double,System.Double,System.Double)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.TriangularDistribution" /> class,
              using the specified <see cref="T:Troschuetz.Random.IGenerator" /> as underlying random number generator.
            </summary>
      <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator" /> object.</param>
      <param name="alpha">
              The parameter alpha which is used for generation of triangular distributed random numbers.
            </param>
      <param name="beta">
              The parameter beta which is used for generation of triangular distributed random numbers.
            </param>
      <param name="gamma">
              The parameter gamma which is used for generation of triangular distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="generator" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> is greater than or equal to <paramref name="beta" />,
              or <paramref name="alpha" /> is greater than <paramref name="gamma" />,
              or <paramref name="beta" /> is less than <paramref name="gamma" />.
            </exception>
    </member>
    <member name="T:Troschuetz.Random.Distributions.Continuous.WeibullDistribution`1">
      <summary>
              Provides generation of weibull distributed random numbers.
            </summary>
      <remarks>
              The implementation of the <see cref="T:Troschuetz.Random.Distributions.Continuous.WeibullDistribution" /> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/Weibull_distribution">Wikipedia - Weibull distribution</a>.
            </remarks>
    </member>
    <member name="F:Troschuetz.Random.Distributions.Continuous.WeibullDistribution`1.DefaultAlpha">
      <summary>
              The default value assigned to <see cref="P:Troschuetz.Random.Distributions.Continuous.WeibullDistribution`1.Alpha" /> if none is specified. 
            </summary>
    </member>
    <member name="F:Troschuetz.Random.Distributions.Continuous.WeibullDistribution`1.DefaultLambda">
      <summary>
              The default value assigned to <see cref="P:Troschuetz.Random.Distributions.Continuous.WeibullDistribution`1.Lambda" /> if none is specified. 
            </summary>
    </member>
    <member name="F:Troschuetz.Random.Distributions.Continuous.WeibullDistribution`1.LanczosCoefficients">
      <summary>
              Represents coefficients for the Lanczos approximation of the Gamma function.
            </summary>
    </member>
    <member name="F:Troschuetz.Random.Distributions.Continuous.WeibullDistribution`1._alpha">
      <summary>
              Stores the parameter alpha which is used for generation of weibull distributed random numbers.
            </summary>
    </member>
    <member name="F:Troschuetz.Random.Distributions.Continuous.WeibullDistribution`1._lambda">
      <summary>
              Stores the parameter lambda which is used for generation of weibull distributed random numbers.
            </summary>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.WeibullDistribution`1.#ctor(`0,System.Double,System.Double)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.WeibullDistribution" /> class,
              using the specified <see cref="T:Troschuetz.Random.IGenerator" /> as underlying random number generator.
            </summary>
      <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator" /> object.</param>
      <param name="alpha">
              The parameter alpha which is used for generation of weibull distributed random numbers.
            </param>
      <param name="lambda">
              The parameter lambda which is used for generation of weibull distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="generator" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> or <paramref name="lambda" /> are less than or equal to zero. 
            </exception>
      <requires exception="T:System.ArgumentNullException" csharp="!ReferenceEquals((object)generator, null)" vb="Not ReferenceEquals(((Object)generator), Nothing)">!object.ReferenceEquals((object)generator, null)</requires>
      <exception cref="T:System.ArgumentNullException">object.ReferenceEquals((object)generator, null)</exception>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="AreValidParams(alpha, lambda)" vb="AreValidParams(alpha, lambda)">Troschuetz.Random.Distributions.Continuous.WeibullDistribution&lt;TGen&gt;.AreValidParams(alpha, lambda)</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">!Troschuetz.Random.Distributions.Continuous.WeibullDistribution&lt;TGen&gt;.AreValidParams(alpha, lambda)</exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.WeibullDistribution`1.IsValidAlpha(System.Double)">
      <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.Distributions.Continuous.WeibullDistribution`1.Alpha" />.
            </summary>
      <param name="value">The value to check.</param>
      <returns>
        <see langword="true" /> if value is greater than 0.0; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.WeibullDistribution`1.IsValidLambda(System.Double)">
      <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.Distributions.Continuous.WeibullDistribution`1.Lambda" />.
            </summary>
      <param name="value">The value to check.</param>
      <returns>
        <see langword="true" /> if value is greater than 0.0; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.WeibullDistribution`1.Gamma(System.Double)">
      <summary>
              Represents a Lanczos approximation of the Gamma function.
            </summary>
      <param name="x">A double-precision floating point number.</param>
      <returns>
              A double-precision floating point number representing an approximation of Gamma(<paramref name="x" />).
            </returns>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.WeibullDistribution`1.AreValidParams(System.Double,System.Double)">
      <summary>
              Determines whether weibull distribution is defined under given parameters.
            </summary>
      <param name="alpha">
              The parameter alpha which is used for generation of weibull distributed random numbers.
            </param>
      <param name="lambda">
              The parameter lambda which is used for generation of weibull distributed random numbers.
            </param>
      <returns>
              True if <paramref name="alpha" /> and <paramref name="lambda" /> are greater than zero;
              otherwise, it returns false.
            </returns>
      <pure />
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.WeibullDistribution`1.Sample(`0,System.Double,System.Double)">
      <summary>
              Returns a weibull distributed floating point random number.
            </summary>
      <param name="generator">The generator from which random number are drawn.</param>
      <param name="alpha">
              The parameter alpha which is used for generation of weibull distributed random numbers.
            </param>
      <param name="lambda">
              The parameter lambda which is used for generation of weibull distributed random numbers.
            </param>
      <returns>
              A weibull distributed floating point random number.
            </returns>
      <pure />
    </member>
    <member name="P:Troschuetz.Random.Distributions.Continuous.WeibullDistribution`1.Alpha">
      <summary>
              Gets or sets the parameter alpha which is used for generation of weibull distributed random numbers.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is less than or equal to zero. 
            </exception>
      <remarks>
              Calls <see cref="M:Troschuetz.Random.Distributions.Continuous.WeibullDistribution`1.IsValidAlpha(System.Double)" /> to determine whether a value is valid and therefore assignable.
            </remarks>
      <setter>
        <requires inheritedFrom="M:Troschuetz.Random.IAlphaDistribution`1.set_Alpha(`0)" inheritedFromTypeName="IAlphaDistribution" exception="T:System.ArgumentOutOfRangeException" csharp="this.IsValidAlpha(value)" vb="Me.IsValidAlpha(value)">this.IsValidAlpha(value)</requires>
        <ensures inheritedFrom="M:Troschuetz.Random.IAlphaDistribution`1.set_Alpha(`0)" inheritedFromTypeName="IAlphaDistribution" csharp="this.Alpha.Equals((object)value)" vb="Me.Alpha.Equals(((Object)value))">this.Alpha.Equals((object)value)</ensures>
      </setter>
      <exception cref="T:System.ArgumentOutOfRangeException">!this.IsValidAlpha(value)</exception>
    </member>
    <member name="P:Troschuetz.Random.Distributions.Continuous.WeibullDistribution`1.Lambda">
      <summary>
              Gets or sets the parameter lambda which is used for generation of erlang distributed random numbers.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is less than or equal to zero. 
            </exception>
      <remarks>
              Calls <see cref="M:Troschuetz.Random.Distributions.Continuous.WeibullDistribution`1.IsValidLambda(System.Double)" /> to determine whether a value is valid and therefore assignable.
            </remarks>
      <setter>
        <requires inheritedFrom="M:Troschuetz.Random.ILambdaDistribution`1.set_Lambda(`0)" inheritedFromTypeName="ILambdaDistribution" exception="T:System.ArgumentOutOfRangeException" csharp="this.IsValidLambda(value)" vb="Me.IsValidLambda(value)">this.IsValidLambda(value)</requires>
        <ensures inheritedFrom="M:Troschuetz.Random.ILambdaDistribution`1.set_Lambda(`0)" inheritedFromTypeName="ILambdaDistribution" csharp="this.Lambda.Equals((object)value)" vb="Me.Lambda.Equals(((Object)value))">this.Lambda.Equals((object)value)</ensures>
      </setter>
      <exception cref="T:System.ArgumentOutOfRangeException">!this.IsValidLambda(value)</exception>
    </member>
    <member name="T:Troschuetz.Random.Distributions.Continuous.WeibullDistribution">
      <summary>
              Provides generation of weibull distributed random numbers.
            </summary>
      <remarks>
              The implementation of the <see cref="T:Troschuetz.Random.Distributions.Continuous.WeibullDistribution" /> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/Weibull_distribution">Wikipedia - Weibull distribution</a>.
            </remarks>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.WeibullDistribution.#ctor">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.WeibullDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> as underlying random number generator.
            </summary>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.WeibullDistribution.#ctor(System.UInt32)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.WeibullDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> with the specified seed value.
            </summary>
      <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.WeibullDistribution.#ctor(Troschuetz.Random.IGenerator)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.WeibullDistribution" /> class,
              using the specified <see cref="T:Troschuetz.Random.IGenerator" /> as underlying random number generator.
            </summary>
      <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator" /> object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="generator" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.WeibullDistribution.#ctor(System.Double,System.Double)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.WeibullDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> as underlying random number generator.
            </summary>
      <param name="alpha">
              The parameter alpha which is used for generation of weibull distributed random numbers.
            </param>
      <param name="lambda">
              The parameter lambda which is used for generation of weibull distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> or <paramref name="lambda" /> are less than or equal to zero. 
            </exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.WeibullDistribution.#ctor(System.UInt32,System.Double,System.Double)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.WeibullDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> with the specified seed value.
            </summary>
      <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
      <param name="alpha">
              The parameter alpha which is used for generation of weibull distributed random numbers.
            </param>
      <param name="lambda">
              The parameter lambda which is used for generation of weibull distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> or <paramref name="lambda" /> are less than or equal to zero. 
            </exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.WeibullDistribution.#ctor(Troschuetz.Random.IGenerator,System.Double,System.Double)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Continuous.WeibullDistribution" /> class,
              using the specified <see cref="T:Troschuetz.Random.IGenerator" /> as underlying random number generator.
            </summary>
      <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator" /> object.</param>
      <param name="alpha">
              The parameter alpha which is used for generation of weibull distributed random numbers.
            </param>
      <param name="lambda">
              The parameter lambda which is used for generation of weibull distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="generator" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> or <paramref name="lambda" /> are less than or equal to zero. 
            </exception>
    </member>
    <member name="T:Troschuetz.Random.Distributions.Discrete.BernoulliDistribution`1">
      <summary>
              Provides generation of bernoulli distributed random numbers.
            </summary>
      <remarks>
              The bernoulli distribution generates only discrete numbers.<br />
              The implementation of the <see cref="T:Troschuetz.Random.Distributions.Discrete.BernoulliDistribution" /> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/Bernoulli_distribution">Wikipedia - Bernoulli distribution</a>.
            </remarks>
    </member>
    <member name="T:Troschuetz.Random.IDiscreteDistribution">
      <summary>
              Declares common functionality for all discrete random number distributions.
            </summary>
    </member>
    <member name="M:Troschuetz.Random.IDiscreteDistribution.Next">
      <summary>
              Returns a distributed random number.
            </summary>
      <returns>A distributed 32-bit signed integer.</returns>
    </member>
    <member name="F:Troschuetz.Random.Distributions.Discrete.BernoulliDistribution`1.DefaultAlpha">
      <summary>
              The default value assigned to <see cref="P:Troschuetz.Random.Distributions.Discrete.BernoulliDistribution`1.Alpha" /> if none is specified. 
            </summary>
    </member>
    <member name="F:Troschuetz.Random.Distributions.Discrete.BernoulliDistribution`1._alpha">
      <summary>
              Stores the parameter alpha which is used for generation of bernoulli distributed random numbers.
            </summary>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Discrete.BernoulliDistribution`1.#ctor(`0,System.Double)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Discrete.BernoulliDistribution" /> class,
              using the specified <see cref="T:Troschuetz.Random.IGenerator" /> as underlying random number generator.
            </summary>
      <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator" /> object.</param>
      <param name="alpha">
              The parameter alpha which is used for generation of bernoulli distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="generator" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> is less than zero or greater than one.
            </exception>
      <requires exception="T:System.ArgumentNullException" csharp="!ReferenceEquals((object)generator, null)" vb="Not ReferenceEquals(((Object)generator), Nothing)">!object.ReferenceEquals((object)generator, null)</requires>
      <exception cref="T:System.ArgumentNullException">object.ReferenceEquals((object)generator, null)</exception>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="IsValidParam(alpha)" vb="IsValidParam(alpha)">Troschuetz.Random.Distributions.Discrete.BernoulliDistribution&lt;TGen&gt;.IsValidParam(alpha)</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">!Troschuetz.Random.Distributions.Discrete.BernoulliDistribution&lt;TGen&gt;.IsValidParam(alpha)</exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Discrete.BernoulliDistribution`1.IsValidAlpha(System.Double)">
      <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.Distributions.Discrete.BernoulliDistribution`1.Alpha" />.
            </summary>
      <param name="value">The value to check.</param>
      <returns>
        <see langword="true" /> if value is greater than or equal to 0.0, and less than or equal to 1.0;
              otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Discrete.BernoulliDistribution`1.IsValidParam(System.Double)">
      <summary>
              Determines whether bernoulli distribution is defined under given parameter.
            </summary>
      <param name="alpha">
              The parameter alpha which is used for generation of bernoulli distributed random numbers.
            </param>
      <returns>
              True if <paramref name="alpha" /> is greater than or equal to zero
              and less than or equal to one; otherwise, it returns false.
            </returns>
      <pure />
    </member>
    <member name="M:Troschuetz.Random.Distributions.Discrete.BernoulliDistribution`1.Sample(`0,System.Double)">
      <summary>
              Returns a bernoulli distributed 32-bit signed integer.
            </summary>
      <param name="generator">The generator from which random number are drawn.</param>
      <param name="alpha">
              The parameter alpha which is used for generation of bernoulli distributed random numbers.
            </param>
      <returns>
              A bernoulli distributed 32-bit signed integer.
            </returns>
      <pure />
    </member>
    <member name="P:Troschuetz.Random.Distributions.Discrete.BernoulliDistribution`1.Alpha">
      <summary>
              Gets or sets the parameter alpha which is used for generation of bernoulli distributed random numbers.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is less than zero or greater than one.
            </exception>
      <remarks>
              Calls <see cref="M:Troschuetz.Random.Distributions.Discrete.BernoulliDistribution`1.IsValidParam(System.Double)" /> to determine whether a value is valid and therefore assignable.
            </remarks>
      <setter>
        <requires inheritedFrom="M:Troschuetz.Random.IAlphaDistribution`1.set_Alpha(`0)" inheritedFromTypeName="IAlphaDistribution" exception="T:System.ArgumentOutOfRangeException" csharp="this.IsValidAlpha(value)" vb="Me.IsValidAlpha(value)">this.IsValidAlpha(value)</requires>
        <ensures inheritedFrom="M:Troschuetz.Random.IAlphaDistribution`1.set_Alpha(`0)" inheritedFromTypeName="IAlphaDistribution" csharp="this.Alpha.Equals((object)value)" vb="Me.Alpha.Equals(((Object)value))">this.Alpha.Equals((object)value)</ensures>
      </setter>
      <exception cref="T:System.ArgumentOutOfRangeException">!this.IsValidAlpha(value)</exception>
    </member>
    <member name="T:Troschuetz.Random.Distributions.Discrete.BernoulliDistribution">
      <summary>
              Provides generation of bernoulli distributed random numbers.
            </summary>
      <remarks>
              The bernoulli distribution generates only discrete numbers.<br />
              The implementation of the <see cref="T:Troschuetz.Random.Distributions.Discrete.BernoulliDistribution" /> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/Bernoulli_distribution">Wikipedia - Bernoulli distribution</a>.
            </remarks>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Discrete.BernoulliDistribution.#ctor">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Discrete.BernoulliDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> as underlying random number generator.
            </summary>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Discrete.BernoulliDistribution.#ctor(System.UInt32)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Discrete.BernoulliDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> with the specified seed value.
            </summary>
      <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Discrete.BernoulliDistribution.#ctor(Troschuetz.Random.IGenerator)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Discrete.BernoulliDistribution" /> class,
              using the specified <see cref="T:Troschuetz.Random.IGenerator" /> as underlying random number generator.
            </summary>
      <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator" /> object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="generator" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Discrete.BernoulliDistribution.#ctor(System.Double)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Discrete.BernoulliDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> as underlying random number generator.
            </summary>
      <param name="alpha">
              The parameter alpha which is used for generation of bernoulli distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> is less than zero or greater than one.
            </exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Discrete.BernoulliDistribution.#ctor(System.UInt32,System.Double)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Discrete.BernoulliDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> with the specified seed value.
            </summary>
      <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
      <param name="alpha">
              The parameter alpha which is used for generation of bernoulli distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> is less than zero or greater than one.
            </exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Discrete.BernoulliDistribution.#ctor(Troschuetz.Random.IGenerator,System.Double)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Discrete.BernoulliDistribution" /> class,
              using the specified <see cref="T:Troschuetz.Random.IGenerator" /> as underlying random number generator.
            </summary>
      <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator" /> object.</param>
      <param name="alpha">
              The parameter alpha which is used for generation of bernoulli distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="generator" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> is less than zero or greater than one.
            </exception>
    </member>
    <member name="T:Troschuetz.Random.Distributions.Discrete.BinomialDistribution`1">
      <summary>
              Provides generation of binomial distributed random numbers.
            </summary>
      <remarks>
              The binomial distribution generates only discrete numbers.<br />
              The implementation of the <see cref="T:Troschuetz.Random.Distributions.Discrete.BinomialDistribution" /> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/binomial_distribution">Wikipedia - Binomial distribution</a>.
            </remarks>
    </member>
    <member name="F:Troschuetz.Random.Distributions.Discrete.BinomialDistribution`1.DefaultAlpha">
      <summary>
              The default value assigned to <see cref="P:Troschuetz.Random.Distributions.Discrete.BinomialDistribution`1.Alpha" /> if none is specified. 
            </summary>
    </member>
    <member name="F:Troschuetz.Random.Distributions.Discrete.BinomialDistribution`1.DefaultBeta">
      <summary>
              The default value assigned to <see cref="P:Troschuetz.Random.Distributions.Discrete.BinomialDistribution`1.Beta" /> if none is specified. 
            </summary>
    </member>
    <member name="F:Troschuetz.Random.Distributions.Discrete.BinomialDistribution`1._alpha">
      <summary>
              Stores the parameter alpha which is used for generation of binomial distributed random numbers.
            </summary>
    </member>
    <member name="F:Troschuetz.Random.Distributions.Discrete.BinomialDistribution`1._beta">
      <summary>
              Stores the parameter beta which is used for generation of binomial distributed random numbers.
            </summary>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Discrete.BinomialDistribution`1.#ctor(`0,System.Double,System.Int32)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Discrete.BinomialDistribution" /> class,
              using the specified <see cref="T:Troschuetz.Random.IGenerator" /> as underlying random number generator.
            </summary>
      <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator" /> object.</param>
      <param name="alpha">
              The parameter alpha which is used for generation of binomial distributed random numbers.
            </param>
      <param name="beta">
              The parameter beta which is used for generation of binomial distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="generator" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> is less than zero or greater than one,
              or <paramref name="beta" /> is less than zero.
            </exception>
      <requires exception="T:System.ArgumentNullException" csharp="!ReferenceEquals((object)generator, null)" vb="Not ReferenceEquals(((Object)generator), Nothing)">!object.ReferenceEquals((object)generator, null)</requires>
      <exception cref="T:System.ArgumentNullException">object.ReferenceEquals((object)generator, null)</exception>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="AreValidParams(alpha, beta)" vb="AreValidParams(alpha, beta)">Troschuetz.Random.Distributions.Discrete.BinomialDistribution&lt;TGen&gt;.AreValidParams(alpha, beta)</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">!Troschuetz.Random.Distributions.Discrete.BinomialDistribution&lt;TGen&gt;.AreValidParams(alpha, beta)</exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Discrete.BinomialDistribution`1.IsValidAlpha(System.Double)">
      <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.Distributions.Discrete.BinomialDistribution`1.Alpha" />.
            </summary>
      <param name="value">The value to check.</param>
      <returns>
        <see langword="true" /> if value is greater than or equal to 0.0, and less than or equal to 1.0;
              otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Discrete.BinomialDistribution`1.IsValidBeta(System.Int32)">
      <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.Distributions.Discrete.BinomialDistribution`1.Beta" />.
            </summary>
      <param name="value">The value to check.</param>
      <returns>
        <see langword="true" /> if value is greater than or equal to 0; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Discrete.BinomialDistribution`1.AreValidParams(System.Double,System.Int32)">
      <summary>
              Determines whether binomial distribution is defined under given parameters.
            </summary>
      <param name="alpha">
              The parameter alpha which is used for generation of binomial distributed random numbers.
            </param>
      <param name="beta">
              The parameter beta which is used for generation of binomial distributed random numbers.
            </param>
      <returns>
              True if <paramref name="alpha" /> is greater than or equal to zero and less than or equal to one,
              and if <paramref name="beta" /> is greater than or equal to zero; otherwise, it returns false.
            </returns>
      <pure />
    </member>
    <member name="M:Troschuetz.Random.Distributions.Discrete.BinomialDistribution`1.Sample(`0,System.Double,System.Int32)">
      <summary>
              Returns a binomial distributed 32-bit signed integer.
            </summary>
      <param name="generator">The generator from which random number are drawn.</param>
      <param name="alpha">
              The parameter alpha which is used for generation of binomial distributed random numbers.
            </param>
      <param name="beta">
              The parameter beta which is used for generation of binomial distributed random numbers.
            </param>
      <returns>
              A binomial distributed 32-bit signed integer.
            </returns>
      <pure />
    </member>
    <member name="P:Troschuetz.Random.Distributions.Discrete.BinomialDistribution`1.Alpha">
      <summary>
              Gets or sets the parameter alpha which is used for generation of binomial distributed random numbers.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is less than zero or greater than one.
            </exception>
      <remarks>
              Calls <see cref="M:Troschuetz.Random.Distributions.Discrete.BinomialDistribution`1.AreValidParams(System.Double,System.Int32)" /> to determine whether a value is valid and therefore assignable.
            </remarks>
      <setter>
        <requires inheritedFrom="M:Troschuetz.Random.IAlphaDistribution`1.set_Alpha(`0)" inheritedFromTypeName="IAlphaDistribution" exception="T:System.ArgumentOutOfRangeException" csharp="this.IsValidAlpha(value)" vb="Me.IsValidAlpha(value)">this.IsValidAlpha(value)</requires>
        <ensures inheritedFrom="M:Troschuetz.Random.IAlphaDistribution`1.set_Alpha(`0)" inheritedFromTypeName="IAlphaDistribution" csharp="this.Alpha.Equals((object)value)" vb="Me.Alpha.Equals(((Object)value))">this.Alpha.Equals((object)value)</ensures>
      </setter>
      <exception cref="T:System.ArgumentOutOfRangeException">!this.IsValidAlpha(value)</exception>
    </member>
    <member name="P:Troschuetz.Random.Distributions.Discrete.BinomialDistribution`1.Beta">
      <summary>
              Gets or sets the parameter beta which is used for generation of binomial distributed random numbers.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is less than zero.
            </exception>
      <remarks>
              Calls <see cref="M:Troschuetz.Random.Distributions.Discrete.BinomialDistribution`1.AreValidParams(System.Double,System.Int32)" /> to determine whether a value is valid and therefore assignable.
            </remarks>
      <setter>
        <requires inheritedFrom="M:Troschuetz.Random.IBetaDistribution`1.set_Beta(`0)" inheritedFromTypeName="IBetaDistribution" exception="T:System.ArgumentOutOfRangeException" csharp="this.IsValidBeta(value)" vb="Me.IsValidBeta(value)">this.IsValidBeta(value)</requires>
        <ensures inheritedFrom="M:Troschuetz.Random.IBetaDistribution`1.set_Beta(`0)" inheritedFromTypeName="IBetaDistribution" csharp="this.Beta.Equals((object)value)" vb="Me.Beta.Equals(((Object)value))">this.Beta.Equals((object)value)</ensures>
      </setter>
      <exception cref="T:System.ArgumentOutOfRangeException">!this.IsValidBeta(value)</exception>
    </member>
    <member name="T:Troschuetz.Random.Distributions.Discrete.BinomialDistribution">
      <summary>
              Provides generation of binomial distributed random numbers.
            </summary>
      <remarks>
              The binomial distribution generates only discrete numbers.<br />
              The implementation of the <see cref="T:Troschuetz.Random.Distributions.Discrete.BinomialDistribution" /> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/binomial_distribution">Wikipedia - Binomial distribution</a>.
            </remarks>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Discrete.BinomialDistribution.#ctor">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Discrete.BinomialDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> as underlying random number generator.
            </summary>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Discrete.BinomialDistribution.#ctor(System.UInt32)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Discrete.BinomialDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> with the specified seed value.
            </summary>
      <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Discrete.BinomialDistribution.#ctor(Troschuetz.Random.IGenerator)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Discrete.BinomialDistribution" /> class,
              using the specified <see cref="T:Troschuetz.Random.IGenerator" /> as underlying random number generator.
            </summary>
      <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator" /> object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="generator" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Discrete.BinomialDistribution.#ctor(System.Double,System.Int32)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Discrete.BinomialDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> as underlying random number generator.
            </summary>
      <param name="alpha">
              The parameter alpha which is used for generation of binomial distributed random numbers.
            </param>
      <param name="beta">
              The parameter beta which is used for generation of binomial distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> is less than zero or greater than one,
              or <paramref name="beta" /> is less than zero.
            </exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Discrete.BinomialDistribution.#ctor(System.UInt32,System.Double,System.Int32)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Discrete.BinomialDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> with the specified seed value.
            </summary>
      <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
      <param name="alpha">
              The parameter alpha which is used for generation of binomial distributed random numbers.
            </param>
      <param name="beta">
              The parameter beta which is used for generation of binomial distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> is less than zero or greater than one,
              or <paramref name="beta" /> is less than zero.
            </exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Discrete.BinomialDistribution.#ctor(Troschuetz.Random.IGenerator,System.Double,System.Int32)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Discrete.BinomialDistribution" /> class,
              using the specified <see cref="T:Troschuetz.Random.IGenerator" /> as underlying random number generator.
            </summary>
      <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator" /> object.</param>
      <param name="alpha">
              The parameter alpha which is used for generation of binomial distributed random numbers.
            </param>
      <param name="beta">
              The parameter beta which is used for generation of binomial distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="generator" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> is less than zero or greater than one,
              or <paramref name="beta" /> is less than zero.
            </exception>
    </member>
    <member name="T:Troschuetz.Random.Distributions.Discrete.CategoricalDistribution`1">
      <summary>
              Implements the categorical distribution. For details about this distribution, see 
              <a href="http://en.wikipedia.org/wiki/Categorical_distribution">Wikipedia - Categorical distribution</a>.
              This distribution is sometimes called the Discrete distribution.
            </summary>
      <remarks>
              The distribution is parameterized by a vector of ratios: in other words, the parameter
              does not have to be normalized and sum to 1. The reason is that some vectors can't be exactly normalized
              to sum to 1 in floating point representation.
            </remarks>
    </member>
    <member name="F:Troschuetz.Random.Distributions.Discrete.CategoricalDistribution`1.DefaultValueCount">
      <summary>
              The default number of values used for categorical distribution,
              if not specified otherwise.
            </summary>
    </member>
    <member name="F:Troschuetz.Random.Distributions.Discrete.CategoricalDistribution`1._cdf">
      <summary>
              Stores the cumulative distribution of current weights.
            </summary>
    </member>
    <member name="F:Troschuetz.Random.Distributions.Discrete.CategoricalDistribution`1._weights">
      <summary>
              Stores the unnormalized categorical weights.
            </summary>
    </member>
    <member name="F:Troschuetz.Random.Distributions.Discrete.CategoricalDistribution`1._weightsSum">
      <summary>
              Stores the sum of all weights currently available.
            </summary>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Discrete.CategoricalDistribution`1.#ctor(`0,System.Int32)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Discrete.CategoricalDistribution" /> class,
              using the specified <see cref="T:Troschuetz.Random.IGenerator" /> as underlying random number generator.
            </summary>
      <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator" /> object.</param>
      <param name="valueCount">
              The parameter valueCount which is used for generation of binomial distributed random numbers
              by setting the number of equi-distributed "weights" the distribution will have.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="generator" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="valueCount" /> is less than or equal to zero.
            </exception>
      <requires exception="T:System.ArgumentNullException" csharp="!ReferenceEquals((object)generator, null)" vb="Not ReferenceEquals(((Object)generator), Nothing)">!object.ReferenceEquals((object)generator, null)</requires>
      <exception cref="T:System.ArgumentNullException">object.ReferenceEquals((object)generator, null)</exception>
      <requires exception="T:System.ArgumentNullException" csharp="valueCount != 0" vb="valueCount &lt;&gt; 0">valueCount != 0</requires>
      <exception cref="T:System.ArgumentNullException">valueCount == 0</exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Discrete.CategoricalDistribution`1.#ctor(`0,System.Collections.Generic.ICollection{System.Double})">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Discrete.CategoricalDistribution" /> class,
              using the specified <see cref="T:Troschuetz.Random.IGenerator" /> as underlying random number generator.
            </summary>
      <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator" /> object.</param>
      <param name="weights">
              An enumerable of nonnegative weights: this enumerable does not need to be normalized 
              as this is often impossible using floating point arithmetic.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="generator" /> or <paramref name="weights" /> are null.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="weights" /> is empty.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
              Any of the weights in <paramref name="weights" /> are negative or they sum to zero.
            </exception>
      <requires exception="T:System.ArgumentNullException" csharp="!ReferenceEquals((object)generator, null)" vb="Not ReferenceEquals(((Object)generator), Nothing)">!object.ReferenceEquals((object)generator, null)</requires>
      <exception cref="T:System.ArgumentNullException">object.ReferenceEquals((object)generator, null)</exception>
      <requires exception="T:System.ArgumentNullException" csharp="weights != null" vb="weights &lt;&gt; Nothing">weights != null</requires>
      <exception cref="T:System.ArgumentNullException">weights == null</exception>
      <requires exception="T:System.ArgumentException" csharp="weights.Count &gt; 0" vb="weights.Count &gt; 0">weights.Count &gt; 0</requires>
      <exception cref="T:System.ArgumentException">weights.Count &lt;= 0</exception>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="IsValidParam(weights)" vb="IsValidParam(weights)">Troschuetz.Random.Distributions.Discrete.CategoricalDistribution&lt;TGen&gt;.IsValidParam(weights)</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">!Troschuetz.Random.Distributions.Discrete.CategoricalDistribution&lt;TGen&gt;.IsValidParam(weights)</exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Discrete.CategoricalDistribution`1.Ones(System.Int32)">
      <summary>
              Generates a list containing only ones.
            </summary>
      <param name="valueCount">The number of ones list will have.</param>
      <returns>A list containing only ones.</returns>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Discrete.CategoricalDistribution`1.AreValidWeights(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>
              Determines whether categorical distribution is defined under given weights.
            </summary>
      <param name="weights">
              The weights which are used for generation of categorical distributed random numbers.
              Weights do not need to be normalized as this is often impossible using floating point arithmetic.
            </param>
      <returns>
              False if any of the weights is negative or if the sum of parameters is 0.0;
              otherwise, it returns true.
            </returns>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Discrete.CategoricalDistribution`1.UpdateHelpers">
      <summary>
              Computes the unnormalized cumulative distribution function
              and other attributes for the distribution (like mean, variance, and so on).
            </summary>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Discrete.CategoricalDistribution`1.IsValidParam(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>
              Determines whether categorical distribution is defined under given weights.
            </summary>
      <param name="weights">
              The weights which are used for generation of categorical distributed random numbers.
              Weights do not need to be normalized as this is often impossible using floating point arithmetic.
            </param>
      <returns>
              False if any of the weights is negative or if the sum of parameters is 0.0;
              otherwise, it returns true.
            </returns>
      <pure />
    </member>
    <member name="M:Troschuetz.Random.Distributions.Discrete.CategoricalDistribution`1.Sample(`0,System.Int32,System.Double[],System.Double)">
      <summary>
              Returns a categorical distributed 32-bit signed integer.
            </summary>
      <param name="generator">The generator from which random number are drawn.</param>
      <param name="weightsCount">The number of weights from which we should sample.</param>
      <param name="cdf">The cumulative distribution of weights.</param>
      <param name="weightsSum">The sum of weights.</param>
      <returns>
              A categorical distributed 32-bit signed integer.
            </returns>
      <pure />
    </member>
    <member name="P:Troschuetz.Random.Distributions.Discrete.CategoricalDistribution`1.Weights">
      <summary>
              Gets or sets the normalized probability vector of the categorical distribution.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is empty.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
              Any of the weights in <paramref name="value" /> are negative or they sum to zero.
            </exception>
      <remarks>
              Sometimes the normalized probability vector cannot be represented
              exactly in a floating point representation.
            </remarks>
      <getter>
        <ensures inheritedFrom="M:Troschuetz.Random.IWeightsDistribution`1.get_Weights" inheritedFromTypeName="IWeightsDistribution" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      </getter>
      <setter>
        <requires inheritedFrom="M:Troschuetz.Random.IWeightsDistribution`1.set_Weights(System.Collections.Generic.ICollection{`0})" inheritedFromTypeName="IWeightsDistribution" exception="T:System.ArgumentNullException" csharp="value != null" vb="value &lt;&gt; Nothing">value != null</requires>
        <requires inheritedFrom="M:Troschuetz.Random.IWeightsDistribution`1.set_Weights(System.Collections.Generic.ICollection{`0})" inheritedFromTypeName="IWeightsDistribution" exception="T:System.ArgumentException" csharp="value.Count != 0" vb="value.Count &lt;&gt; 0">value.Count != 0</requires>
        <requires inheritedFrom="M:Troschuetz.Random.IWeightsDistribution`1.set_Weights(System.Collections.Generic.ICollection{`0})" inheritedFromTypeName="IWeightsDistribution" exception="T:System.ArgumentOutOfRangeException" csharp="this.AreValidWeights(value)" vb="Me.AreValidWeights(value)">this.AreValidWeights(value)</requires>
        <ensures inheritedFrom="M:Troschuetz.Random.IWeightsDistribution`1.set_Weights(System.Collections.Generic.ICollection{`0})" inheritedFromTypeName="IWeightsDistribution" csharp="Equals((object)this.Weights.Count, (object)value.Count)" vb="Equals(((Object)Me.Weights.Count), ((Object)value.Count))">object.Equals((object)this.Weights.Count, (object)value.Count)</ensures>
      </setter>
      <exception cref="T:System.ArgumentNullException">value == null</exception>
      <exception cref="T:System.ArgumentException">value.Count == 0</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">!this.AreValidWeights(value)</exception>
    </member>
    <member name="T:Troschuetz.Random.Distributions.Discrete.CategoricalDistribution">
      <summary>
              Implements the categorical distribution. For details about this distribution, see 
              <a href="http://en.wikipedia.org/wiki/Categorical_distribution">Wikipedia - Categorical distribution</a>.
              This distribution is sometimes called the Discrete distribution.
            </summary>
      <remarks>
              The distribution is parameterized by a vector of ratios: in other words, the parameter
              does not have to be normalized and sum to 1. The reason is that some vectors can't be exactly normalized
              to sum to 1 in floating point representation.
            </remarks>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Discrete.CategoricalDistribution.#ctor">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Discrete.BinomialDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> as underlying random number generator.
            </summary>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Discrete.CategoricalDistribution.#ctor(System.UInt32)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Discrete.BinomialDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> with the specified seed value.
            </summary>
      <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Discrete.CategoricalDistribution.#ctor(Troschuetz.Random.IGenerator)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Discrete.CategoricalDistribution" /> class,
              using the specified <see cref="T:Troschuetz.Random.IGenerator" /> as underlying random number generator.
            </summary>
      <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator" /> object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="generator" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Discrete.CategoricalDistribution.#ctor(System.Int32)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Discrete.BinomialDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> as underlying random number generator.
            </summary>
      <param name="valueCount">
              The parameter valueCount which is used for generation of binomial distributed random numbers
              by setting the number of equi-distributed "weights" the distribution will have.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="valueCount" /> is less than or equal to zero.
            </exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Discrete.CategoricalDistribution.#ctor(System.UInt32,System.Int32)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Discrete.BinomialDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> with the specified seed value.
            </summary>
      <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
      <param name="valueCount">
              The parameter valueCount which is used for generation of binomial distributed random numbers
              by setting the number of equi-distributed "weights" the distribution will have.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="valueCount" /> is less than or equal to zero.
            </exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Discrete.CategoricalDistribution.#ctor(Troschuetz.Random.IGenerator,System.Int32)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Discrete.CategoricalDistribution" /> class,
              using the specified <see cref="T:Troschuetz.Random.IGenerator" /> as underlying random number generator.
            </summary>
      <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator" /> object.</param>
      <param name="valueCount">
              The parameter valueCount which is used for generation of binomial distributed random numbers
              by setting the number of equi-distributed "weights" the distribution will have.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="generator" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="valueCount" /> is less than or equal to zero.
            </exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Discrete.CategoricalDistribution.#ctor(System.Collections.Generic.ICollection{System.Double})">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Discrete.BinomialDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> as underlying random number generator.
            </summary>
      <param name="weights">
              An enumerable of nonnegative weights: this enumerable does not need to be normalized 
              as this is often impossible using floating point arithmetic.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="weights" /> is null.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="weights" /> is empty.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
              Any of the weights in <paramref name="weights" /> are negative or they sum to zero.
            </exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Discrete.CategoricalDistribution.#ctor(System.UInt32,System.Collections.Generic.ICollection{System.Double})">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Discrete.BinomialDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> with the specified seed value.
            </summary>
      <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
      <param name="weights">
              An enumerable of nonnegative weights: this enumerable does not need to be normalized 
              as this is often impossible using floating point arithmetic.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="weights" /> is null.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="weights" /> is empty.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
              Any of the weights in <paramref name="weights" /> are negative or they sum to zero.
            </exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Discrete.CategoricalDistribution.#ctor(Troschuetz.Random.IGenerator,System.Collections.Generic.ICollection{System.Double})">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Discrete.CategoricalDistribution" /> class,
              using the specified <see cref="T:Troschuetz.Random.IGenerator" /> as underlying random number generator.
            </summary>
      <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator" /> object.</param>
      <param name="weights">
              An enumerable of nonnegative weights: this enumerable does not need to be normalized 
              as this is often impossible using floating point arithmetic.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="generator" /> or <paramref name="weights" /> are null.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="weights" /> is empty.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
              Any of the weights in <paramref name="weights" /> are negative or they sum to zero.
            </exception>
    </member>
    <member name="T:Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution`1">
      <summary>
              Provides generation of discrete uniformly distributed random numbers.
            </summary>
      <remarks>
              The discrete uniform distribution generates only discrete numbers.<br />
              The implementation of the <see cref="T:Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution" /> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/Uniform_distribution_%28discrete%29">
              Wikipedia - Uniform distribution (discrete)</a>.
            </remarks>
    </member>
    <member name="F:Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution`1.DefaultAlpha">
      <summary>
              The default value assigned to <see cref="P:Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution`1.Alpha" /> if none is specified. 
            </summary>
    </member>
    <member name="F:Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution`1.DefaultBeta">
      <summary>
              The default value assigned to <see cref="P:Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution`1.Beta" /> if none is specified. 
            </summary>
    </member>
    <member name="F:Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution`1._beta">
      <summary>
              Stores the parameter beta which is used for generation of uniformly distributed random numbers.
            </summary>
    </member>
    <member name="F:Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution`1._alpha">
      <summary>
              Stores the parameter beta which is used for generation of uniformly distributed random numbers.
            </summary>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution`1.#ctor(`0,System.Int32,System.Int32)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution" /> class,
              using the specified <see cref="T:Troschuetz.Random.IGenerator" /> as underlying random number generator.
            </summary>
      <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator" /> object.</param>
      <param name="alpha">
              The parameter alpha which is used for generation of discrete uniform distributed random numbers.
            </param>
      <param name="beta">
              The parameter beta which is used for generation of discrete uniform distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="generator" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> is greater than <paramref name="beta" />,
              or <paramref name="beta" /> is equal to <see cref="F:System.Int32.MaxValue" />.
            </exception>
      <requires exception="T:System.ArgumentNullException" csharp="!ReferenceEquals((object)generator, null)" vb="Not ReferenceEquals(((Object)generator), Nothing)">!object.ReferenceEquals((object)generator, null)</requires>
      <exception cref="T:System.ArgumentNullException">object.ReferenceEquals((object)generator, null)</exception>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="AreValidParams(alpha, beta)" vb="AreValidParams(alpha, beta)">Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution&lt;TGen&gt;.AreValidParams(alpha, beta)</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">!Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution&lt;TGen&gt;.AreValidParams(alpha, beta)</exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution`1.IsValidAlpha(System.Int32)">
      <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution`1.Alpha" />.
            </summary>
      <param name="value">The value to check.</param>
      <returns>
        <see langword="true" /> if value is less than or equal to <see cref="P:Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution`1.Beta" />;
              otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution`1.IsValidBeta(System.Int32)">
      <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution`1.Beta" />.
            </summary>
      <param name="value">The value to check.</param>
      <returns>
        <see langword="true" /> if value is greater than or equal to <see cref="P:Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution`1.Alpha" />, and less than 
              <see cref="F:System.Int32.MaxValue" />; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution`1.AreValidParams(System.Int32,System.Int32)">
      <summary>
              Determines whether discrete uniform distribution is defined under given parameters.
            </summary>
      <param name="alpha">
              The parameter alpha which is used for generation of discrete uniform distributed random numbers.
            </param>
      <param name="beta">
              The parameter beta which is used for generation of discrete uniform distributed random numbers.
            </param>
      <returns>
              True if <paramref name="alpha" /> is less than or equal to <paramref name="beta" />,
              and if <paramref name="beta" /> is less than <see cref="F:System.Int32.MaxValue" />; otherwise, it returns false.
            </returns>
      <pure />
    </member>
    <member name="M:Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution`1.Sample(`0,System.Int32,System.Int32)">
      <summary>
              Returns a discrete uniform distributed 32-bit signed integer.
            </summary>
      <param name="generator">The generator from which random number are drawn.</param>
      <param name="alpha">
              The parameter alpha which is used for generation of discrete uniform distributed random numbers.
            </param>
      <param name="beta">
              The parameter beta which is used for generation of discrete uniform distributed random numbers.
            </param>
      <returns>
              A discrete uniform distributed 32-bit signed integer.
            </returns>
      <pure />
    </member>
    <member name="P:Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution`1.Alpha">
      <summary>
              Gets or sets the parameter alpha which is used for generation of uniformly distributed random numbers.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is greater than <see cref="P:Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution`1.Beta" />.
            </exception>
      <remarks>
              Calls <see cref="M:Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution`1.AreValidParams(System.Int32,System.Int32)" /> to determine whether a value is valid and therefore assignable.
            </remarks>
      <setter>
        <requires inheritedFrom="M:Troschuetz.Random.IAlphaDistribution`1.set_Alpha(`0)" inheritedFromTypeName="IAlphaDistribution" exception="T:System.ArgumentOutOfRangeException" csharp="this.IsValidAlpha(value)" vb="Me.IsValidAlpha(value)">this.IsValidAlpha(value)</requires>
        <ensures inheritedFrom="M:Troschuetz.Random.IAlphaDistribution`1.set_Alpha(`0)" inheritedFromTypeName="IAlphaDistribution" csharp="this.Alpha.Equals((object)value)" vb="Me.Alpha.Equals(((Object)value))">this.Alpha.Equals((object)value)</ensures>
      </setter>
      <exception cref="T:System.ArgumentOutOfRangeException">!this.IsValidAlpha(value)</exception>
    </member>
    <member name="P:Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution`1.Beta">
      <summary>
              Gets or sets the parameter beta which is used for generation of uniformly distributed random numbers.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="P:Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution`1.Alpha" /> is greater than <paramref name="value" />,
              or <paramref name="value" /> is equal to <see cref="F:System.Int32.MaxValue" />.
            </exception>
      <remarks>
              Calls <see cref="M:Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution`1.AreValidParams(System.Int32,System.Int32)" /> to determine whether a value is valid and therefore assignable.
            </remarks>
      <setter>
        <requires inheritedFrom="M:Troschuetz.Random.IBetaDistribution`1.set_Beta(`0)" inheritedFromTypeName="IBetaDistribution" exception="T:System.ArgumentOutOfRangeException" csharp="this.IsValidBeta(value)" vb="Me.IsValidBeta(value)">this.IsValidBeta(value)</requires>
        <ensures inheritedFrom="M:Troschuetz.Random.IBetaDistribution`1.set_Beta(`0)" inheritedFromTypeName="IBetaDistribution" csharp="this.Beta.Equals((object)value)" vb="Me.Beta.Equals(((Object)value))">this.Beta.Equals((object)value)</ensures>
      </setter>
      <exception cref="T:System.ArgumentOutOfRangeException">!this.IsValidBeta(value)</exception>
    </member>
    <member name="T:Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution">
      <summary>
              Provides generation of discrete uniformly distributed random numbers.
            </summary>
      <remarks>
              The discrete uniform distribution generates only discrete numbers.<br />
              The implementation of the <see cref="T:Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution" /> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/Uniform_distribution_%28discrete%29">
              Wikipedia - Uniform distribution (discrete)</a>.
            </remarks>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution.#ctor">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> as underlying random number generator. 
            </summary>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution.#ctor(System.UInt32)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> with the specified seed value.
            </summary>
      <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution.#ctor(Troschuetz.Random.IGenerator)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution" /> class,
              using the specified <see cref="T:Troschuetz.Random.IGenerator" /> as underlying random number generator.
            </summary>
      <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator" /> object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="generator" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution.#ctor(System.Int32,System.Int32)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> as underlying random number generator. 
            </summary>
      <param name="alpha">
              The parameter alpha which is used for generation of discrete uniform distributed random numbers.
            </param>
      <param name="beta">
              The parameter beta which is used for generation of discrete uniform distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> is greater than <paramref name="beta" />,
              or <paramref name="beta" /> is equal to <see cref="F:System.Int32.MaxValue" />.
            </exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution.#ctor(System.UInt32,System.Int32,System.Int32)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> with the specified seed value.
            </summary>
      <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
      <param name="alpha">
              The parameter alpha which is used for generation of discrete uniform distributed random numbers.
            </param>
      <param name="beta">
              The parameter beta which is used for generation of discrete uniform distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> is greater than <paramref name="beta" />,
              or <paramref name="beta" /> is equal to <see cref="F:System.Int32.MaxValue" />.
            </exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution.#ctor(Troschuetz.Random.IGenerator,System.Int32,System.Int32)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution" /> class,
              using the specified <see cref="T:Troschuetz.Random.IGenerator" /> as underlying random number generator.
            </summary>
      <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator" /> object.</param>
      <param name="alpha">
              The parameter alpha which is used for generation of discrete uniform distributed random numbers.
            </param>
      <param name="beta">
              The parameter beta which is used for generation of discrete uniform distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="generator" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> is greater than <paramref name="beta" />,
              or <paramref name="beta" /> is equal to <see cref="F:System.Int32.MaxValue" />.
            </exception>
    </member>
    <member name="T:Troschuetz.Random.Distributions.Discrete.GeometricDistribution`1">
      <summary>
              Provides generation of geometric distributed random numbers.
            </summary>
      <remarks>
              The geometric distribution generates only discrete numbers.<br />
              The implementation of the <see cref="T:Troschuetz.Random.Distributions.Discrete.GeometricDistribution" /> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/Geometric_distribution">Wikipedia - Geometric distribution</a>
              and the implementation in the <a href="http://www.lkn.ei.tum.de/lehre/scn/cncl/doc/html/cncl_toc.html">
              Communication Networks Class Library</a>.
            </remarks>
    </member>
    <member name="F:Troschuetz.Random.Distributions.Discrete.GeometricDistribution`1.DefaultAlpha">
      <summary>
              The default value assigned to <see cref="P:Troschuetz.Random.Distributions.Discrete.GeometricDistribution`1.Alpha" /> if none is specified. 
            </summary>
    </member>
    <member name="F:Troschuetz.Random.Distributions.Discrete.GeometricDistribution`1._alpha">
      <summary>
              Stores the parameter beta which is used for generation of uniformly distributed random numbers.
            </summary>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Discrete.GeometricDistribution`1.#ctor(`0,System.Double)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Discrete.GeometricDistribution" /> class,
              using the specified <see cref="T:Troschuetz.Random.IGenerator" /> as underlying random number generator.
            </summary>
      <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator" /> object.</param>
      <param name="alpha">
              The parameter alpha which is used for generation of geometric distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="generator" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> is less than or equal to zero or it is greater than one.
            </exception>
      <requires exception="T:System.ArgumentNullException" csharp="!ReferenceEquals((object)generator, null)" vb="Not ReferenceEquals(((Object)generator), Nothing)">!object.ReferenceEquals((object)generator, null)</requires>
      <exception cref="T:System.ArgumentNullException">object.ReferenceEquals((object)generator, null)</exception>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="IsValidParam(alpha)" vb="IsValidParam(alpha)">Troschuetz.Random.Distributions.Discrete.GeometricDistribution&lt;TGen&gt;.IsValidParam(alpha)</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">!Troschuetz.Random.Distributions.Discrete.GeometricDistribution&lt;TGen&gt;.IsValidParam(alpha)</exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Discrete.GeometricDistribution`1.IsValidAlpha(System.Double)">
      <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.Distributions.Discrete.GeometricDistribution`1.Alpha" />.
            </summary>
      <param name="value">The value to check.</param>
      <returns>
        <see langword="true" /> if value is greater than 0.0, and less than or equal to 1.0;
              otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Discrete.GeometricDistribution`1.IsValidParam(System.Double)">
      <summary>
              Determines whether geometric distribution is defined under given parameter.
            </summary>
      <param name="alpha">
              The parameter alpha which is used for generation of geometric distributed random numbers.
            </param>
      <returns>
              True if <paramref name="alpha" /> is greater than zero and
              if it is less than or equal to one; otherwise, it returns false.
            </returns>
      <pure />
    </member>
    <member name="M:Troschuetz.Random.Distributions.Discrete.GeometricDistribution`1.Sample(`0,System.Double)">
      <summary>
              Returns a geometric distributed 32-bit signed integer.
            </summary>
      <param name="generator">The generator from which random number are drawn.</param>
      <param name="alpha">
              The parameter alpha which is used for generation of geometric distributed random numbers.
            </param>
      <returns>
              A geometric distributed 32-bit signed integer.
            </returns>
      <pure />
    </member>
    <member name="P:Troschuetz.Random.Distributions.Discrete.GeometricDistribution`1.Alpha">
      <summary>
              Gets or sets the parameter alpha which is used for generation of geometric distributed random numbers.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is less than or equal to zero or it is greater than one.
            </exception>
      <remarks>
              Calls <see cref="M:Troschuetz.Random.Distributions.Discrete.GeometricDistribution`1.IsValidParam(System.Double)" /> to determine whether a value is valid and therefore assignable.
            </remarks>
      <setter>
        <requires inheritedFrom="M:Troschuetz.Random.IAlphaDistribution`1.set_Alpha(`0)" inheritedFromTypeName="IAlphaDistribution" exception="T:System.ArgumentOutOfRangeException" csharp="this.IsValidAlpha(value)" vb="Me.IsValidAlpha(value)">this.IsValidAlpha(value)</requires>
        <ensures inheritedFrom="M:Troschuetz.Random.IAlphaDistribution`1.set_Alpha(`0)" inheritedFromTypeName="IAlphaDistribution" csharp="this.Alpha.Equals((object)value)" vb="Me.Alpha.Equals(((Object)value))">this.Alpha.Equals((object)value)</ensures>
      </setter>
      <exception cref="T:System.ArgumentOutOfRangeException">!this.IsValidAlpha(value)</exception>
    </member>
    <member name="T:Troschuetz.Random.Distributions.Discrete.GeometricDistribution">
      <summary>
              Provides generation of geometric distributed random numbers.
            </summary>
      <remarks>
              The geometric distribution generates only discrete numbers.<br />
              The implementation of the <see cref="T:Troschuetz.Random.Distributions.Discrete.GeometricDistribution" /> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/Geometric_distribution">Wikipedia - Geometric distribution</a>
              and the implementation in the <a href="http://www.lkn.ei.tum.de/lehre/scn/cncl/doc/html/cncl_toc.html">
              Communication Networks Class Library</a>.
            </remarks>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Discrete.GeometricDistribution.#ctor">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Discrete.GeometricDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> as underlying random number generator.
            </summary>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Discrete.GeometricDistribution.#ctor(System.UInt32)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Discrete.GeometricDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> with the specified seed value.
            </summary>
      <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Discrete.GeometricDistribution.#ctor(Troschuetz.Random.IGenerator)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Discrete.GeometricDistribution" /> class,
              using the specified <see cref="T:Troschuetz.Random.IGenerator" /> as underlying random number generator.
            </summary>
      <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator" /> object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="generator" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Discrete.GeometricDistribution.#ctor(System.Double)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Discrete.GeometricDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> as underlying random number generator.
            </summary>
      <param name="alpha">
              The parameter alpha which is used for generation of geometric distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> is less than or equal to zero or it is greater than one.
            </exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Discrete.GeometricDistribution.#ctor(System.UInt32,System.Double)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Discrete.GeometricDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> with the specified seed value.
            </summary>
      <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
      <param name="alpha">
              The parameter alpha which is used for generation of geometric distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> is less than or equal to zero or it is greater than one.
            </exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Discrete.GeometricDistribution.#ctor(Troschuetz.Random.IGenerator,System.Double)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Discrete.GeometricDistribution" /> class,
              using the specified <see cref="T:Troschuetz.Random.IGenerator" /> as underlying random number generator.
            </summary>
      <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator" /> object.</param>
      <param name="alpha">
              The parameter alpha which is used for generation of geometric distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="generator" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> is less than or equal to zero or it is greater than one.
            </exception>
    </member>
    <member name="T:Troschuetz.Random.Distributions.Discrete.PoissonDistribution`1">
      <summary>
              Provides generation of poisson distributed random numbers.
            </summary>
      <remarks>
              The poisson distribution generates only discrete numbers.<br />
              The implementation of the <see cref="T:Troschuetz.Random.Distributions.Discrete.PoissonDistribution" /> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/Poisson_distribution">Wikipedia - Poisson distribution</a>
              and the implementation in the <a href="http://www.lkn.ei.tum.de/lehre/scn/cncl/doc/html/cncl_toc.html">
              Communication Networks Class Library</a>.
            </remarks>
    </member>
    <member name="F:Troschuetz.Random.Distributions.Discrete.PoissonDistribution`1.DefaultLambda">
      <summary>
              The default value assigned to <see cref="P:Troschuetz.Random.Distributions.Discrete.PoissonDistribution`1.Lambda" /> if none is specified. 
            </summary>
    </member>
    <member name="F:Troschuetz.Random.Distributions.Discrete.PoissonDistribution`1._lambda">
      <summary>
              Stores the the parameter lambda which is used for generation of poisson distributed random numbers.
            </summary>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Discrete.PoissonDistribution`1.#ctor(`0,System.Double)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Discrete.PoissonDistribution" /> class,
              using the specified <see cref="T:Troschuetz.Random.IGenerator" /> as underlying random number generator.
            </summary>
      <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator" /> object.</param>
      <param name="lambda">
              The parameter lambda which is used for generation of poisson distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="generator" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="lambda" /> is less than or equal to zero.
            </exception>
      <requires exception="T:System.ArgumentNullException" csharp="!ReferenceEquals((object)generator, null)" vb="Not ReferenceEquals(((Object)generator), Nothing)">!object.ReferenceEquals((object)generator, null)</requires>
      <exception cref="T:System.ArgumentNullException">object.ReferenceEquals((object)generator, null)</exception>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="IsValidParam(lambda)" vb="IsValidParam(lambda)">Troschuetz.Random.Distributions.Discrete.PoissonDistribution&lt;TGen&gt;.IsValidParam(lambda)</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">!Troschuetz.Random.Distributions.Discrete.PoissonDistribution&lt;TGen&gt;.IsValidParam(lambda)</exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Discrete.PoissonDistribution`1.IsValidLambda(System.Double)">
      <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.Distributions.Discrete.PoissonDistribution`1.Lambda" />.
            </summary>
      <param name="value">The value to check.</param>
      <returns>
        <see langword="true" /> if value is greater than 0.0; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Discrete.PoissonDistribution`1.IsValidParam(System.Double)">
      <summary>
              Determines whether poisson distribution is defined under given parameter.
            </summary>
      <param name="lambda">
              The parameter lambda which is used for generation of poisson distributed random numbers.
            </param>
      <returns>
              True if <paramref name="lambda" /> is greater than zero; otherwise, it returns false.
            </returns>
      <pure />
    </member>
    <member name="M:Troschuetz.Random.Distributions.Discrete.PoissonDistribution`1.Sample(`0,System.Double)">
      <summary>
              Returns a poisson distributed 32-bit signed integer.
            </summary>
      <param name="generator">The generator from which random number are drawn.</param>
      <param name="lambda">
              The parameter lambda which is used for generation of poisson distributed random numbers.
            </param>
      <returns>
              A poisson distributed 32-bit signed integer.
            </returns>
      <pure />
    </member>
    <member name="P:Troschuetz.Random.Distributions.Discrete.PoissonDistribution`1.Lambda">
      <summary>
              Gets or sets the parameter lambda which is used for generation of poisson distributed random numbers.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is less than or equal to zero.
            </exception>
      <remarks>
              Calls <see cref="M:Troschuetz.Random.Distributions.Discrete.PoissonDistribution`1.IsValidLambda(System.Double)" /> to determine whether a value is valid and therefore assignable.
            </remarks>
      <setter>
        <requires inheritedFrom="M:Troschuetz.Random.ILambdaDistribution`1.set_Lambda(`0)" inheritedFromTypeName="ILambdaDistribution" exception="T:System.ArgumentOutOfRangeException" csharp="this.IsValidLambda(value)" vb="Me.IsValidLambda(value)">this.IsValidLambda(value)</requires>
        <ensures inheritedFrom="M:Troschuetz.Random.ILambdaDistribution`1.set_Lambda(`0)" inheritedFromTypeName="ILambdaDistribution" csharp="this.Lambda.Equals((object)value)" vb="Me.Lambda.Equals(((Object)value))">this.Lambda.Equals((object)value)</ensures>
      </setter>
      <exception cref="T:System.ArgumentOutOfRangeException">!this.IsValidLambda(value)</exception>
    </member>
    <member name="T:Troschuetz.Random.Distributions.Discrete.PoissonDistribution">
      <summary>
              Provides generation of poisson distributed random numbers.
            </summary>
      <remarks>
              The poisson distribution generates only discrete numbers.<br />
              The implementation of the <see cref="T:Troschuetz.Random.Distributions.Discrete.PoissonDistribution" /> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/Poisson_distribution">Wikipedia - Poisson distribution</a>
              and the implementation in the <a href="http://www.lkn.ei.tum.de/lehre/scn/cncl/doc/html/cncl_toc.html">
              Communication Networks Class Library</a>.
            </remarks>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Discrete.PoissonDistribution.#ctor">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Discrete.PoissonDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> as underlying random number generator.
            </summary>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Discrete.PoissonDistribution.#ctor(System.UInt32)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Discrete.PoissonDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> with the specified seed value.
            </summary>
      <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Discrete.PoissonDistribution.#ctor(Troschuetz.Random.IGenerator)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Discrete.PoissonDistribution" /> class,
              using the specified <see cref="T:Troschuetz.Random.IGenerator" /> as underlying random number generator.
            </summary>
      <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator" /> object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="generator" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Discrete.PoissonDistribution.#ctor(System.Double)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Discrete.PoissonDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> as underlying random number generator.
            </summary>
      <param name="lambda">
              The parameter lambda which is used for generation of poisson distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="lambda" /> is less than or equal to zero.
            </exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Discrete.PoissonDistribution.#ctor(System.UInt32,System.Double)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Discrete.PoissonDistribution" /> class,
              using a <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> with the specified seed value.
            </summary>
      <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
      <param name="lambda">
              The parameter lambda which is used for generation of poisson distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="lambda" /> is less than or equal to zero.
            </exception>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Discrete.PoissonDistribution.#ctor(Troschuetz.Random.IGenerator,System.Double)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Distributions.Discrete.PoissonDistribution" /> class,
              using the specified <see cref="T:Troschuetz.Random.IGenerator" /> as underlying random number generator.
            </summary>
      <param name="generator">An <see cref="T:Troschuetz.Random.IGenerator" /> object.</param>
      <param name="lambda">
              The parameter lambda which is used for generation of poisson distributed random numbers.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="generator" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="lambda" /> is less than or equal to zero.
            </exception>
    </member>
    <member name="T:Troschuetz.Random.ErrorMessages">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Troschuetz.Random.ErrorMessages.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Troschuetz.Random.ErrorMessages.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Troschuetz.Random.ErrorMessages.EmptyList">
      <summary>
              Looks up a localized string similar to List must not be empty..
            </summary>
    </member>
    <member name="P:Troschuetz.Random.ErrorMessages.InvalidParams">
      <summary>
              Looks up a localized string similar to Given parameter (or parameters) are not valid..
            </summary>
    </member>
    <member name="P:Troschuetz.Random.ErrorMessages.MinValueGreaterThanMaxValue">
      <summary>
              Looks up a localized string similar to maxValue should be greater than or equal to minValue..
            </summary>
    </member>
    <member name="P:Troschuetz.Random.ErrorMessages.NegativeMaxValue">
      <summary>
              Looks up a localized string similar to maxValue must be greater than or equal to zero..
            </summary>
    </member>
    <member name="P:Troschuetz.Random.ErrorMessages.NullBuffer">
      <summary>
              Looks up a localized string similar to Buffer must not be undefined..
            </summary>
    </member>
    <member name="P:Troschuetz.Random.ErrorMessages.NullDistribution">
      <summary>
              Looks up a localized string similar to Distribution must not be undefined..
            </summary>
    </member>
    <member name="P:Troschuetz.Random.ErrorMessages.NullGenerator">
      <summary>
              Looks up a localized string similar to Generator must not be undefined..
            </summary>
    </member>
    <member name="P:Troschuetz.Random.ErrorMessages.NullList">
      <summary>
              Looks up a localized string similar to List must not be undefined..
            </summary>
    </member>
    <member name="P:Troschuetz.Random.ErrorMessages.NullWeights">
      <summary>
              Looks up a localized string similar to Weights collection must not be undefined..
            </summary>
    </member>
    <member name="P:Troschuetz.Random.ErrorMessages.UndefinedMean">
      <summary>
              Looks up a localized string similar to Mean is undefined for given distribution..
            </summary>
    </member>
    <member name="P:Troschuetz.Random.ErrorMessages.UndefinedMeanForParams">
      <summary>
              Looks up a localized string similar to Mean is undefined for given distribution under given parameters..
            </summary>
    </member>
    <member name="P:Troschuetz.Random.ErrorMessages.UndefinedMedian">
      <summary>
              Looks up a localized string similar to Median is undefined for given distribution..
            </summary>
    </member>
    <member name="P:Troschuetz.Random.ErrorMessages.UndefinedMode">
      <summary>
              Looks up a localized string similar to Mode is undefined for given distribution..
            </summary>
    </member>
    <member name="P:Troschuetz.Random.ErrorMessages.UndefinedModeForParams">
      <summary>
              Looks up a localized string similar to Mode is undefined for given distribution under given parameters..
            </summary>
    </member>
    <member name="P:Troschuetz.Random.ErrorMessages.UndefinedVariance">
      <summary>
              Looks up a localized string similar to Variance is undefined for given distribution..
            </summary>
    </member>
    <member name="P:Troschuetz.Random.ErrorMessages.UndefinedVarianceForParams">
      <summary>
              Looks up a localized string similar to Variance is undefined for given distribution under given parameters..
            </summary>
    </member>
    <member name="T:Troschuetz.Random.Extensions">
      <summary>
              Module containing extension methods for many interfaces exposed by this library.
            </summary>
    </member>
    <member name="M:Troschuetz.Random.Extensions.DistributedDoubles``1(``0)">
      <summary>
              Returns an infinites series of random double numbers, by repeating calls to NextDouble.
              Therefore, the series obtained will follow given distribution.
            </summary>
      <returns>An infinites series of random double numbers, following given distribution.</returns>
      <pure />
      <requires exception="T:System.ArgumentNullException" csharp="!ReferenceEquals((object)dist, null)" vb="Not ReferenceEquals(((Object)dist), Nothing)">!object.ReferenceEquals((object)dist, null)</requires>
      <exception cref="T:System.ArgumentNullException">object.ReferenceEquals((object)dist, null)</exception>
    </member>
    <member name="M:Troschuetz.Random.Extensions.DistributedIntegers``1(``0)">
      <summary>
              Returns an infinites series of random numbers, by repeating calls to Next.
              Therefore, the series obtained will follow given distribution.
            </summary>
      <returns>An infinites series of random numbers, following given distribution.</returns>
      <pure />
      <requires exception="T:System.ArgumentNullException" csharp="!ReferenceEquals((object)dist, null)" vb="Not ReferenceEquals(((Object)dist), Nothing)">!object.ReferenceEquals((object)dist, null)</requires>
      <exception cref="T:System.ArgumentNullException">object.ReferenceEquals((object)dist, null)</exception>
    </member>
    <member name="M:Troschuetz.Random.Extensions.Booleans``1(``0)">
      <summary>
              Returns an infinite sequence random Boolean values.
            </summary>
      <remarks>
              Buffers 31 random bits for future calls, so the random number generator
              is only invoked once in every 31 calls.
            </remarks>
      <typeparam name="TGen">The type of the random numbers generator.</typeparam>
      <param name="generator">The generator from which random numbers are drawn.</param>
      <returns>An infinite sequence random Boolean values.</returns>
      <pure />
      <requires exception="T:System.ArgumentNullException" csharp="!ReferenceEquals((object)generator, null)" vb="Not ReferenceEquals(((Object)generator), Nothing)">!object.ReferenceEquals((object)generator, null)</requires>
      <exception cref="T:System.ArgumentNullException">object.ReferenceEquals((object)generator, null)</exception>
    </member>
    <member name="M:Troschuetz.Random.Extensions.Bytes``1(``0,System.Byte[])">
      <summary>
              Repeatedly fills the elements of a specified array of bytes with random numbers. 
            </summary>
      <remarks>
              Each element of the array of bytes is set to a random number greater than or equal to 0, 
              and less than or equal to <see cref="F:System.Byte.MaxValue" />.
            </remarks>
      <typeparam name="TGen">The type of the random numbers generator.</typeparam>
      <param name="generator">The generator from which random numbers are drawn.</param>
      <param name="buffer">An array of bytes to contain random numbers.</param>
      <returns>An infinite sequence of true values.</returns>
      <pure />
      <requires exception="T:System.ArgumentNullException" csharp="!ReferenceEquals((object)generator, null)" vb="Not ReferenceEquals(((Object)generator), Nothing)">!object.ReferenceEquals((object)generator, null)</requires>
      <exception cref="T:System.ArgumentNullException">object.ReferenceEquals((object)generator, null)</exception>
      <requires exception="T:System.ArgumentNullException" csharp="buffer != null" vb="buffer &lt;&gt; Nothing">buffer != null</requires>
      <exception cref="T:System.ArgumentNullException">buffer == null</exception>
    </member>
    <member name="M:Troschuetz.Random.Extensions.Choice``2(``0,System.Collections.Generic.IList{``1})">
      <summary>
              Returns a random item from given list, according to a uniform distribution.
            </summary>
      <typeparam name="TGen">The type of the random numbers generator.</typeparam>
      <typeparam name="TItem">The type of the elements of the list.</typeparam>
      <param name="generator">The generator from which random numbers are drawn.</param>
      <param name="list">The list from which an item should be randomly picked.</param>
      <returns>A random item belonging to given list.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="list" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="list" /> is empty.</exception>
      <pure />
      <requires exception="T:System.ArgumentNullException" csharp="!ReferenceEquals((object)generator, null)" vb="Not ReferenceEquals(((Object)generator), Nothing)">!object.ReferenceEquals((object)generator, null)</requires>
      <exception cref="T:System.ArgumentNullException">object.ReferenceEquals((object)generator, null)</exception>
      <requires exception="T:System.ArgumentNullException" csharp="list != null" vb="list &lt;&gt; Nothing">list != null</requires>
      <exception cref="T:System.ArgumentNullException">list == null</exception>
      <requires exception="T:System.InvalidOperationException" csharp="list.Count &gt; 0" vb="list.Count &gt; 0">list.Count &gt; 0</requires>
      <exception cref="T:System.InvalidOperationException">list.Count &lt;= 0</exception>
      <ensures csharp="list.Contains(result)" vb="list.Contains(result)">list.Contains(result)</ensures>
    </member>
    <member name="M:Troschuetz.Random.Extensions.Choices``2(``0,System.Collections.Generic.IList{``1})">
      <summary>
              Returns an infinite sequence of random items from given list, according to a uniform distribution.
            </summary>
      <typeparam name="TGen">The type of the random numbers generator.</typeparam>
      <typeparam name="TItem">The type of the elements of the list.</typeparam>
      <param name="generator">The generator from which random numbers are drawn.</param>
      <param name="list">The list from which items should be randomly picked.</param>
      <returns>An infinite sequence of random items belonging to given list.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="list" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="list" /> is empty.</exception>
      <pure />
      <requires exception="T:System.ArgumentNullException" csharp="!ReferenceEquals((object)generator, null)" vb="Not ReferenceEquals(((Object)generator), Nothing)">!object.ReferenceEquals((object)generator, null)</requires>
      <exception cref="T:System.ArgumentNullException">object.ReferenceEquals((object)generator, null)</exception>
      <requires exception="T:System.ArgumentNullException" csharp="list != null" vb="list &lt;&gt; Nothing">list != null</requires>
      <exception cref="T:System.ArgumentNullException">list == null</exception>
      <requires exception="T:System.InvalidOperationException" csharp="list.Count &gt; 0" vb="list.Count &gt; 0">list.Count &gt; 0</requires>
      <exception cref="T:System.InvalidOperationException">list.Count &lt;= 0</exception>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Troschuetz.Random.Extensions.Doubles``1(``0)">
      <summary>
              Returns an infinite sequence of nonnegative floating point random numbers less than 1.0.
            </summary>
      <typeparam name="TGen">The type of the random numbers generator.</typeparam>
      <param name="generator">The generator from which random numbers are drawn.</param>
      <returns>
              An infinite sequence of double-precision floating point numbers greater than or equal to 0.0, 
              and less than 1.0; that is, the range of return values includes 0.0 but not 1.0. 
            </returns>
      <pure />
      <requires exception="T:System.ArgumentNullException" csharp="!ReferenceEquals((object)generator, null)" vb="Not ReferenceEquals(((Object)generator), Nothing)">!object.ReferenceEquals((object)generator, null)</requires>
      <exception cref="T:System.ArgumentNullException">object.ReferenceEquals((object)generator, null)</exception>
    </member>
    <member name="M:Troschuetz.Random.Extensions.Doubles``1(``0,System.Double)">
      <summary>
              Returns an infinite sequence of nonnegative floating point random numbers less than the specified maximum.
            </summary>
      <typeparam name="TGen">The type of the random numbers generator.</typeparam>
      <param name="generator">The generator from which random numbers are drawn.</param>
      <param name="maxValue">
              The exclusive upper bound of the random number to be generated.
            </param>
      <returns>
              An infinite sequence of double-precision floating point numbers greater than or equal to 0.0, 
              and less than <paramref name="maxValue" />; that is, the range of return values
              includes 0 but not <paramref name="maxValue" />. 
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maxValue" /> must be greater than or equal to 0.0.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="maxValue" /> cannot be <see cref="F:System.Double.PositiveInfinity" />.
            </exception>
      <pure />
      <requires exception="T:System.ArgumentNullException" csharp="!ReferenceEquals((object)generator, null)" vb="Not ReferenceEquals(((Object)generator), Nothing)">!object.ReferenceEquals((object)generator, null)</requires>
      <exception cref="T:System.ArgumentNullException">object.ReferenceEquals((object)generator, null)</exception>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="maxValue &gt;= 0.0" vb="maxValue &gt;= 0">maxValue &gt;= 0.0</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">maxValue &lt; 0.0</exception>
      <requires exception="T:System.ArgumentException" csharp="!IsPositiveInfinity(maxValue)" vb="Not IsPositiveInfinity(maxValue)">!double.IsPositiveInfinity(maxValue)</requires>
      <exception cref="T:System.ArgumentException">double.IsPositiveInfinity(maxValue)</exception>
    </member>
    <member name="M:Troschuetz.Random.Extensions.Doubles``1(``0,System.Double,System.Double)">
      <summary>
              Returns an infinite sequence of floating point random numbers within the specified range. 
            </summary>
      <typeparam name="TGen">The type of the random numbers generator.</typeparam>
      <param name="generator">The generator from which random numbers are drawn.</param>
      <param name="minValue">
              The inclusive lower bound of the random number to be generated. 
            </param>
      <param name="maxValue">
              The exclusive upper bound of the random number to be generated. 
            </param>
      <returns>
              Returns an infinite sequence of double-precision floating point numbers
              greater than or equal to <paramref name="minValue" />,
              and less than <paramref name="maxValue" />; that is, the range of return values 
              includes <paramref name="minValue" /> but not <paramref name="maxValue" />. 
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maxValue" /> must be greater than or equal to <paramref name="minValue" />.
            </exception>
      <exception cref="T:System.ArgumentException">
              The range between <paramref name="minValue" /> and <paramref name="maxValue" /> 
              must be less than or equal to <see cref="F:System.Double.PositiveInfinity" />.
            </exception>
      <pure />
      <requires exception="T:System.ArgumentNullException" csharp="!ReferenceEquals((object)generator, null)" vb="Not ReferenceEquals(((Object)generator), Nothing)">!object.ReferenceEquals((object)generator, null)</requires>
      <exception cref="T:System.ArgumentNullException">object.ReferenceEquals((object)generator, null)</exception>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="maxValue &gt;= minValue" vb="maxValue &gt;= minValue">maxValue &gt;= minValue</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">maxValue &lt; minValue</exception>
      <requires exception="T:System.ArgumentException" csharp="!IsPositiveInfinity((maxValue - minValue))" vb="Not IsPositiveInfinity(maxValue - minValue)">!double.IsPositiveInfinity((maxValue - minValue))</requires>
      <exception cref="T:System.ArgumentException">double.IsPositiveInfinity(maxValue - minValue)</exception>
    </member>
    <member name="M:Troschuetz.Random.Extensions.Integers``1(``0)">
      <summary>
              Returns an infinite sequence of nonnegative random numbers less than <see cref="F:System.Int32.MaxValue" />.
            </summary>
      <typeparam name="TGen">The type of the random numbers generator.</typeparam>
      <param name="generator">The generator from which random numbers are drawn.</param>
      <returns>
              An infinite sequence of 32-bit signed integers greater than or equal to 0,
              and less than <see cref="F:System.Int32.MaxValue" />; that is, the range of return values
              includes 0 but not <see cref="F:System.Int32.MaxValue" />.
            </returns>
      <pure />
      <requires exception="T:System.ArgumentNullException" csharp="!ReferenceEquals((object)generator, null)" vb="Not ReferenceEquals(((Object)generator), Nothing)">!object.ReferenceEquals((object)generator, null)</requires>
      <exception cref="T:System.ArgumentNullException">object.ReferenceEquals((object)generator, null)</exception>
    </member>
    <member name="M:Troschuetz.Random.Extensions.Integers``1(``0,System.Int32)">
      <summary>
              Returns an infinite sequence of nonnegative random numbers less than the specified maximum.
            </summary>
      <typeparam name="TGen">The type of the random numbers generator.</typeparam>
      <param name="generator">The generator from which random numbers are drawn.</param>
      <param name="maxValue">
              The exclusive upper bound of the random numbers to be generated.
            </param>
      <returns>
              An infinite sequence of 32-bit signed integers greater than or equal to 0,
              and less than <paramref name="maxValue" />; that is, the range of return values
              includes 0 but not <paramref name="maxValue" />. 
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maxValue" /> must be greater than or equal to 0. 
            </exception>
      <pure />
      <requires exception="T:System.ArgumentNullException" csharp="!ReferenceEquals((object)generator, null)" vb="Not ReferenceEquals(((Object)generator), Nothing)">!object.ReferenceEquals((object)generator, null)</requires>
      <exception cref="T:System.ArgumentNullException">object.ReferenceEquals((object)generator, null)</exception>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="maxValue &gt;= 0" vb="maxValue &gt;= 0">maxValue &gt;= 0</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">maxValue &lt; 0</exception>
    </member>
    <member name="M:Troschuetz.Random.Extensions.Integers``1(``0,System.Int32,System.Int32)">
      <summary>
              Returns an infinite sequence of random numbers within the specified range. 
            </summary>
      <typeparam name="TGen">The type of the random numbers generator.</typeparam>
      <param name="generator">The generator from which random numbers are drawn.</param>
      <param name="minValue">
              The inclusive lower bound of the random number to be generated. 
            </param>
      <param name="maxValue">
              The exclusive upper bound of the random number to be generated. 
            </param>
      <returns>
              An infinite sequence of 32-bit signed integers greater than or equal to <paramref name="minValue" />, 
              and less than <paramref name="maxValue" />; that is, the range of return values includes 
              <paramref name="minValue" /> but not <paramref name="maxValue" />. 
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maxValue" /> must be greater than or equal to <paramref name="minValue" />.
            </exception>
      <pure />
      <requires exception="T:System.ArgumentNullException" csharp="!ReferenceEquals((object)generator, null)" vb="Not ReferenceEquals(((Object)generator), Nothing)">!object.ReferenceEquals((object)generator, null)</requires>
      <exception cref="T:System.ArgumentNullException">object.ReferenceEquals((object)generator, null)</exception>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="maxValue &gt;= minValue" vb="maxValue &gt;= minValue">maxValue &gt;= minValue</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">maxValue &lt; minValue</exception>
    </member>
    <member name="M:Troschuetz.Random.Extensions.UnsignedIntegers``1(``0)">
      <summary>
              Returns an infinite sequence of unsigned random numbers.
            </summary>
      <typeparam name="TGen">The type of the random numbers generator.</typeparam>
      <param name="generator">The generator from which random numbers are drawn.</param>
      <returns>
              An infinite sequence of 32-bit unsigned integers.
            </returns>
      <pure />
      <requires exception="T:System.ArgumentNullException" csharp="!ReferenceEquals((object)generator, null)" vb="Not ReferenceEquals(((Object)generator), Nothing)">!object.ReferenceEquals((object)generator, null)</requires>
      <exception cref="T:System.ArgumentNullException">object.ReferenceEquals((object)generator, null)</exception>
    </member>
    <member name="M:Troschuetz.Random.Extensions.UnsignedIntegers``1(``0,System.UInt32)">
      <summary>
              Returns an infinite sequence of unsigned random numbers less than the specified maximum.
            </summary>
      <typeparam name="TGen">The type of the random numbers generator.</typeparam>
      <param name="generator">The generator from which random numbers are drawn.</param>
      <param name="maxValue">
              The exclusive upper bound of the random number to be generated. 
            </param>
      <returns>
              An infinite sequence of 32-bit unsigned integers greater than or equal to 0,
              and less than <paramref name="maxValue" />; that is, the range of return values
              includes 0 but not <paramref name="maxValue" />. 
            </returns>
      <pure />
      <requires exception="T:System.ArgumentNullException" csharp="!ReferenceEquals((object)generator, null)" vb="Not ReferenceEquals(((Object)generator), Nothing)">!object.ReferenceEquals((object)generator, null)</requires>
      <exception cref="T:System.ArgumentNullException">object.ReferenceEquals((object)generator, null)</exception>
    </member>
    <member name="M:Troschuetz.Random.Extensions.UnsignedIntegers``1(``0,System.UInt32,System.UInt32)">
      <summary>
              Returns an infinite sequence of unsigned random numbers within the specified range.
            </summary>
      <typeparam name="TGen">The type of the random numbers generator.</typeparam>
      <param name="generator">The generator from which random numbers are drawn.</param>
      <param name="minValue">
              The inclusive lower bound of the random number to be generated. 
            </param>
      <param name="maxValue">
              The exclusive upper bound of the random number to be generated. 
            </param>
      <returns>
              An infinite sequence of 32-bit unsigned integers greater than or equal to <paramref name="minValue" />, 
              and less than <paramref name="maxValue" />; that is, the range of return values includes 
              <paramref name="minValue" /> but not <paramref name="maxValue" />.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maxValue" /> must be greater than or equal to <paramref name="minValue" />.
            </exception>
      <pure />
      <requires exception="T:System.ArgumentNullException" csharp="!ReferenceEquals((object)generator, null)" vb="Not ReferenceEquals(((Object)generator), Nothing)">!object.ReferenceEquals((object)generator, null)</requires>
      <exception cref="T:System.ArgumentNullException">object.ReferenceEquals((object)generator, null)</exception>
    </member>
    <member name="T:Troschuetz.Random.Generators.ALFGenerator">
      <summary>
              Represents a Additive Lagged Fibonacci pseudo-random number generator.
            </summary>
      <remarks>
              The <see cref="T:Troschuetz.Random.Generators.ALFGenerator" /> type bases upon the implementation in the 
              <a href="http://www.boost.org/libs/random/index.html">Boost Random Number Library</a>.
              It uses the modulus 2<sup>32</sup> and by default the "lags" 418 and 1279, which can be adjusted through the 
              associated <see cref="P:Troschuetz.Random.Generators.ALFGenerator.ShortLag" /> and <see cref="P:Troschuetz.Random.Generators.ALFGenerator.LongLag" /> properties. Some popular pairs are presented on 
              <a href="http://en.wikipedia.org/wiki/Lagged_Fibonacci_generator">Wikipedia - Lagged Fibonacci generator</a>.
            </remarks>
    </member>
    <member name="F:Troschuetz.Random.Generators.GeneratorBase`1.IntToDoubleMultiplier">
      <summary>
              Represents the multiplier that computes a double-precision 
              floating point number greater than or equal to 0.0 and less than 1.0
              when it gets applied to a nonnegative 32-bit signed integer.
            </summary>
    </member>
    <member name="F:Troschuetz.Random.Generators.GeneratorBase`1.UIntToDoubleMultiplier">
      <summary>
              Represents the multiplier that computes a double-precision 
              floating point number greater than or equal to 0.0 and less than 1.0
              when it gets applied to a nonnegative 32-bit unsigned integer.
            </summary>
    </member>
    <member name="F:Troschuetz.Random.Generators.ALFGenerator._bitBuffer">
      <summary>
              Stores an <see cref="T:System.UInt32" /> used to generate up to 32 random <see cref="T:System.Boolean" /> values.
            </summary>
    </member>
    <member name="F:Troschuetz.Random.Generators.ALFGenerator._bitCount">
      <summary>
              Stores how many random <see cref="T:System.Boolean" /> values still can be generated from <see cref="F:Troschuetz.Random.Generators.ALFGenerator._bitBuffer" />.
            </summary>
    </member>
    <member name="F:Troschuetz.Random.Generators.ALFGenerator._i">
      <summary>
              Stores an index for the random number array element that will be accessed next.
            </summary>
    </member>
    <member name="F:Troschuetz.Random.Generators.ALFGenerator._longLag">
      <summary>
              Stores the long lag of the Lagged Fibonacci pseudo-random number generator.
            </summary>
    </member>
    <member name="F:Troschuetz.Random.Generators.ALFGenerator._seed">
      <summary>
              Stores the used seed.
            </summary>
    </member>
    <member name="F:Troschuetz.Random.Generators.ALFGenerator._shortLag">
      <summary>
              Stores the short lag of the Lagged Fibonacci pseudo-random number generator.
            </summary>
    </member>
    <member name="F:Troschuetz.Random.Generators.ALFGenerator._x">
      <summary>
              Stores an array of <see cref="F:Troschuetz.Random.Generators.ALFGenerator._longLag" /> random numbers
            </summary>
    </member>
    <member name="M:Troschuetz.Random.Generators.ALFGenerator.#ctor">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Generators.ALFGenerator" /> class,
              using a time-dependent default seed value.
            </summary>
    </member>
    <member name="M:Troschuetz.Random.Generators.ALFGenerator.#ctor(System.Int32)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Generators.ALFGenerator" /> class, using the specified seed value.
            </summary>
      <param name="seed">
              A number used to calculate a starting value for the pseudo-random number sequence.
              If a negative number is specified, the absolute value of the number is used. 
            </param>
    </member>
    <member name="M:Troschuetz.Random.Generators.ALFGenerator.#ctor(System.UInt32)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Generators.StandardGenerator" /> class, using the specified seed value.
            </summary>
      <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
    </member>
    <member name="M:Troschuetz.Random.Generators.ALFGenerator.IsValidShortLag(System.Int32)">
      <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.Generators.ALFGenerator.ShortLag" />.
            </summary>
      <param name="value">The value to check.</param>
      <returns>
        <see langword="true" /> if value is greater than 0; otherwise, <see langword="false" />.
            </returns>
      <pure />
    </member>
    <member name="M:Troschuetz.Random.Generators.ALFGenerator.IsValidLongLag(System.Int32)">
      <summary>
              Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.Generators.ALFGenerator.LongLag" />.
            </summary>
      <param name="value">The value to check.</param>
      <returns>
        <see langword="true" /> if value is greater than <see cref="P:Troschuetz.Random.Generators.ALFGenerator.ShortLag" />; otherwise, <see langword="false" />.
            </returns>
      <pure />
    </member>
    <member name="M:Troschuetz.Random.Generators.ALFGenerator.ResetGenerator">
      <summary>
              Resets the <see cref="T:Troschuetz.Random.Generators.ALFGenerator" />, so that it produces the same pseudo-random number sequence again.
            </summary>
    </member>
    <member name="M:Troschuetz.Random.Generators.ALFGenerator.Fill">
      <summary>
              Fills the array <see cref="F:Troschuetz.Random.Generators.ALFGenerator._x" /> with <see cref="F:Troschuetz.Random.Generators.ALFGenerator._longLag" /> new unsigned random numbers.
            </summary>
      <remarks>
              Generated random numbers are 32-bit unsigned integers greater than or equal to
              <see cref="F:System.UInt32.MinValue" /> and less than or equal to <see cref="F:System.UInt32.MaxValue" />.
            </remarks>
    </member>
    <member name="P:Troschuetz.Random.Generators.ALFGenerator.ShortLag">
      <summary>
              Gets or sets the short lag of the Lagged Fibonacci pseudo-random number generator.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is less than or equal to zero.
            </exception>
      <remarks>
              Calls <see cref="M:Troschuetz.Random.Generators.ALFGenerator.IsValidShortLag(System.Int32)" /> to determine whether a value is valid and therefore assignable.
            </remarks>
      <setter>
        <requires exception="T:System.ArgumentOutOfRangeException" csharp="IsValidShortLag(value)" vb="IsValidShortLag(value)">Troschuetz.Random.Generators.ALFGenerator.IsValidShortLag(value)</requires>
        <ensures csharp="this.ShortLag == value" vb="Me.ShortLag = value">this.ShortLag == value</ensures>
      </setter>
      <exception cref="T:System.ArgumentOutOfRangeException">!Troschuetz.Random.Generators.ALFGenerator.IsValidShortLag(value)</exception>
    </member>
    <member name="P:Troschuetz.Random.Generators.ALFGenerator.LongLag">
      <summary>
              Gets or sets the long lag of the Lagged Fibonacci pseudo-random number generator.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is less than or equal to <see cref="P:Troschuetz.Random.Generators.ALFGenerator.ShortLag" />.
            </exception>
      <remarks>
              Calls <see cref="M:Troschuetz.Random.Generators.ALFGenerator.IsValidLongLag(System.Int32)" /> to determine whether a value is valid and therefore assignable.
            </remarks>
      <setter>
        <requires exception="T:System.ArgumentOutOfRangeException" csharp="this.IsValidLongLag(value)" vb="Me.IsValidLongLag(value)">this.IsValidLongLag(value)</requires>
        <ensures csharp="this.LongLag == value" vb="Me.LongLag = value">this.LongLag == value</ensures>
      </setter>
      <exception cref="T:System.ArgumentOutOfRangeException">!this.IsValidLongLag(value)</exception>
    </member>
    <member name="T:Troschuetz.Random.Generators.MT19937Generator">
      <summary>
              Represents a Mersenne Twister pseudo-random number generator with period 2^19937-1.
            </summary>
      <remarks>
              The <see cref="T:Troschuetz.Random.Generators.MT19937Generator" /> type bases upon information and the implementation presented on the
              <a href="http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html">Mersenne Twister Home Page</a>.
            </remarks>
    </member>
    <member name="F:Troschuetz.Random.Generators.MT19937Generator.N">
      <summary>
              Represents the number of unsigned random numbers generated at one time. This field is constant.
            </summary>
      <remarks>The value of this constant is 624.</remarks>
    </member>
    <member name="F:Troschuetz.Random.Generators.MT19937Generator.M">
      <summary>
              Represents a constant used for generation of unsigned random numbers. This field is constant.
            </summary>
      <remarks>The value of this constant is 397.</remarks>
    </member>
    <member name="F:Troschuetz.Random.Generators.MT19937Generator.VectorA">
      <summary>
              Represents the constant vector a. This field is constant.
            </summary>
      <remarks>The value of this constant is 0x9908b0dfU.</remarks>
    </member>
    <member name="F:Troschuetz.Random.Generators.MT19937Generator.UpperMask">
      <summary>
              Represents the most significant w-r bits. This field is constant.
            </summary>
      <remarks>The value of this constant is 0x80000000.</remarks>
    </member>
    <member name="F:Troschuetz.Random.Generators.MT19937Generator.LowerMask">
      <summary>
              Represents the least significant r bits. This field is constant.
            </summary>
      <remarks>The value of this constant is 0x7fffffff.</remarks>
    </member>
    <member name="F:Troschuetz.Random.Generators.MT19937Generator._mt">
      <summary>
              Stores the state vector array.
            </summary>
    </member>
    <member name="F:Troschuetz.Random.Generators.MT19937Generator._seed">
      <summary>
              Stores the used seed.
            </summary>
    </member>
    <member name="F:Troschuetz.Random.Generators.MT19937Generator._seedArray">
      <summary>
              Stores the used seed array.
            </summary>
    </member>
    <member name="F:Troschuetz.Random.Generators.MT19937Generator._bitBuffer">
      <summary>
              Stores an <see cref="T:System.UInt32" /> used to generate up to 32 random <see cref="T:System.Boolean" /> values.
            </summary>
    </member>
    <member name="F:Troschuetz.Random.Generators.MT19937Generator._bitCount">
      <summary>
              Stores how many random <see cref="T:System.Boolean" /> values still can be generated from <see cref="F:Troschuetz.Random.Generators.MT19937Generator._bitBuffer" />.
            </summary>
    </member>
    <member name="F:Troschuetz.Random.Generators.MT19937Generator._mti">
      <summary>
              Stores an index for the state vector array element that will be accessed next.
            </summary>
    </member>
    <member name="M:Troschuetz.Random.Generators.MT19937Generator.#ctor">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Generators.MT19937Generator" /> class, 
              using a time-dependent default seed value.
            </summary>
    </member>
    <member name="M:Troschuetz.Random.Generators.MT19937Generator.#ctor(System.Int32)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Generators.MT19937Generator" /> class, 
              using the specified seed value.
            </summary>
      <param name="seed">
              A number used to calculate a starting value for the pseudo-random number sequence.
              If a negative number is specified, the absolute value of the number is used. 
            </param>
    </member>
    <member name="M:Troschuetz.Random.Generators.MT19937Generator.#ctor(System.UInt32)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Generators.MT19937Generator" /> class, 
              using the specified seed value.
            </summary>
      <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
    </member>
    <member name="M:Troschuetz.Random.Generators.MT19937Generator.#ctor(System.Collections.Generic.IList{System.Int32})">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Generators.MT19937Generator" /> class, using the specified seed array.
            </summary>
      <param name="seedArray">
              An array of numbers used to calculate a starting values for the pseudo-random number sequence.
              If negative numbers are specified, the absolute values of them are used. 
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="seedArray" /> is NULL (<see langword="Nothing" /> in Visual Basic).
            </exception>
      <requires exception="T:System.ArgumentNullException" csharp="seedArray != null" vb="seedArray &lt;&gt; Nothing">seedArray != null</requires>
      <exception cref="T:System.ArgumentNullException">seedArray == null</exception>
    </member>
    <member name="M:Troschuetz.Random.Generators.MT19937Generator.#ctor(System.UInt32[])">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Generators.MT19937Generator" /> class, using the specified seed array.
            </summary>
      <param name="seedArray">
              An array of unsigned numbers used to calculate a starting values for the pseudo-random number sequence.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="seedArray" /> is NULL (<see langword="Nothing" /> in Visual Basic).
            </exception>
      <requires exception="T:System.ArgumentNullException" csharp="seedArray != null" vb="seedArray &lt;&gt; Nothing">seedArray != null</requires>
      <exception cref="T:System.ArgumentNullException">seedArray == null</exception>
    </member>
    <member name="M:Troschuetz.Random.Generators.MT19937Generator.ResetGenerator">
      <summary>
              Resets the <see cref="T:Troschuetz.Random.Generators.MT19937Generator" />, so that it produces the same pseudo-random number sequence again.
            </summary>
    </member>
    <member name="M:Troschuetz.Random.Generators.MT19937Generator.ResetBySeedArray">
      <summary>
              Extends resetting of the <see cref="T:Troschuetz.Random.Generators.MT19937Generator" /> using the <see cref="F:Troschuetz.Random.Generators.MT19937Generator._seedArray" />.
            </summary>
    </member>
    <member name="M:Troschuetz.Random.Generators.MT19937Generator.GenerateNUInts">
      <summary>
              Generates <see cref="F:Troschuetz.Random.Generators.MT19937Generator.N" /> unsigned random numbers.
            </summary>
      <remarks>
              Generated random numbers are 32-bit unsigned integers greater than or equal to <see cref="F:System.UInt32.MinValue" /> 
              and less than or equal to <see cref="F:System.UInt32.MaxValue" />.
            </remarks>
    </member>
    <member name="T:Troschuetz.Random.Generators.StandardGenerator">
      <summary>
              Represents a simple pseudo-random number generator.
            </summary>
      <remarks>
              The <see cref="T:Troschuetz.Random.Generators.StandardGenerator" /> type internally uses an instance of the
              <see cref="T:System.Random" /> type to generate pseudo-random numbers.
            </remarks>
    </member>
    <member name="F:Troschuetz.Random.Generators.StandardGenerator._bitBuffer">
      <summary>
              Stores an <see cref="T:System.Int32" /> used to generate up to 31 random <see cref="T:System.Boolean" /> values.
            </summary>
    </member>
    <member name="F:Troschuetz.Random.Generators.StandardGenerator._uintBuffer">
      <summary>
              Stores a byte array used to compute the result of <see cref="M:Troschuetz.Random.Generators.StandardGenerator.NextUInt" />, starting from the output of <see cref="M:Troschuetz.Random.Generators.StandardGenerator.NextBytes(System.Byte[])" />.
            </summary>
    </member>
    <member name="F:Troschuetz.Random.Generators.StandardGenerator._bitCount">
      <summary>
              Stores how many random <see cref="T:System.Boolean" /> values still can be generated from <see cref="F:Troschuetz.Random.Generators.StandardGenerator._bitBuffer" />.
            </summary>
    </member>
    <member name="F:Troschuetz.Random.Generators.StandardGenerator._generator">
      <summary>
              Stores an instance of <see cref="T:System.Random" /> type that is used to generate random numbers.
            </summary>
    </member>
    <member name="F:Troschuetz.Random.Generators.StandardGenerator._seed">
      <summary>
              Stores the used seed.
            </summary>
    </member>
    <member name="M:Troschuetz.Random.Generators.StandardGenerator.#ctor">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Generators.StandardGenerator" /> class,
              using a time-dependent default seed value.
            </summary>
    </member>
    <member name="M:Troschuetz.Random.Generators.StandardGenerator.#ctor(System.Int32)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Generators.StandardGenerator" /> class,
              using the specified seed value.
            </summary>
      <param name="seed">
              A number used to calculate a starting value for the pseudo-random number sequence.
              If a negative number is specified, the absolute value of the number is used. 
            </param>
    </member>
    <member name="M:Troschuetz.Random.Generators.StandardGenerator.ResetGenerator">
      <summary>
              Resets the <see cref="T:Troschuetz.Random.Generators.StandardGenerator" />, so that it produces
              the same pseudo-random number sequence again.
            </summary>
    </member>
    <member name="T:Troschuetz.Random.Generators.XorShift128Generator">
      <summary>
              Represents a xorshift pseudo-random number generator with period 2^128-1.
            </summary>
      <remarks>
              The <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> type bases upon the implementation presented in the CP article
              "<a href="http://www.codeproject.com/csharp/fastrandom.asp">A fast equivalent for System.Random</a>"
              and the theoretical background on xorshift random number generators published by George Marsaglia 
              in this paper "<a href="http://www.jstatsoft.org/v08/i14/xorshift.pdf">Xorshift RNGs</a>".
            </remarks>
    </member>
    <member name="F:Troschuetz.Random.Generators.XorShift128Generator.SeedY">
      <summary>
              Represents the seed for the <see cref="F:Troschuetz.Random.Generators.XorShift128Generator._y" /> variable. This field is constant.
            </summary>
      <remarks>The value of this constant is 362436069.</remarks>
    </member>
    <member name="F:Troschuetz.Random.Generators.XorShift128Generator.SeedZ">
      <summary>
              Represents the seed for the <see cref="F:Troschuetz.Random.Generators.XorShift128Generator._z" /> variable. This field is constant.
            </summary>
      <remarks>The value of this constant is 521288629.</remarks>
    </member>
    <member name="F:Troschuetz.Random.Generators.XorShift128Generator.SeedW">
      <summary>
              Represents the seed for the <see cref="F:Troschuetz.Random.Generators.XorShift128Generator._w" /> variable. This field is constant.
            </summary>
      <remarks>The value of this constant is 88675123.</remarks>
    </member>
    <member name="F:Troschuetz.Random.Generators.XorShift128Generator._bitBuffer">
      <summary>
              Stores an <see cref="T:System.UInt32" /> used to generate up to 32 random <see cref="T:System.Boolean" /> values.
            </summary>
    </member>
    <member name="F:Troschuetz.Random.Generators.XorShift128Generator._bitCount">
      <summary>
              Stores how many random <see cref="T:System.Boolean" /> values still can be generated from <see cref="F:Troschuetz.Random.Generators.XorShift128Generator._bitBuffer" />.
            </summary>
    </member>
    <member name="F:Troschuetz.Random.Generators.XorShift128Generator._seed">
      <summary>
              Stores the used seed.
            </summary>
    </member>
    <member name="F:Troschuetz.Random.Generators.XorShift128Generator._w">
      <summary>
              Stores the last generated unsigned random number. 
            </summary>
    </member>
    <member name="F:Troschuetz.Random.Generators.XorShift128Generator._x">
      <summary>
              Stores the last but three unsigned random number. 
            </summary>
    </member>
    <member name="F:Troschuetz.Random.Generators.XorShift128Generator._y">
      <summary>
              Stores the last but two unsigned random number. 
            </summary>
    </member>
    <member name="F:Troschuetz.Random.Generators.XorShift128Generator._z">
      <summary>
              Stores the last but one unsigned random number. 
            </summary>
    </member>
    <member name="M:Troschuetz.Random.Generators.XorShift128Generator.#ctor">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> class, 
              using a time-dependent default seed value.
            </summary>
    </member>
    <member name="M:Troschuetz.Random.Generators.XorShift128Generator.#ctor(System.Int32)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> class, 
              using the specified seed value.
            </summary>
      <param name="seed">
              A number used to calculate a starting value for the pseudo-random number sequence.
              If a negative number is specified, the absolute value of the number is used. 
            </param>
    </member>
    <member name="M:Troschuetz.Random.Generators.XorShift128Generator.#ctor(System.UInt32)">
      <summary>
              Initializes a new instance of the <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> class, 
              using the specified seed value.
            </summary>
      <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
    </member>
    <member name="M:Troschuetz.Random.Generators.XorShift128Generator.ResetGenerator">
      <summary>
              Resets the <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" />, so that it produces
              the same pseudo-random number sequence again.
            </summary>
    </member>
    <member name="T:Troschuetz.Random.TRandom`1">
      <summary>
              A random generator class similar to the one Python offers, 
              providing functions similar to the ones found in <see cref="T:System.Random" />
              and functions returning random numbers according to a particular kind of distribution.
            </summary>
    </member>
    <member name="M:Troschuetz.Random.TRandom`1.Bernoulli(System.Double)">
      <summary>
              Returns a bernoulli distributed 32-bit signed integer.
            </summary>
      <param name="alpha">
              The parameter alpha which is used for generation of bernoulli distributed random numbers.
            </param>
      <returns>
              A bernoulli distributed 32-bit signed integer.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> is less than zero or greater than one.
            </exception>
      <remarks>
              This method simply wraps a call to <see cref="M:Troschuetz.Random.Distributions.Discrete.BernoulliDistribution`1.Next" />,
              with a prior adjustement of the distribution parameters.
            </remarks>
      <remarks>
              This method is slightly more efficient when called with the same parameters.
              If you absolutely need the best performance, you may consider using
              an instance of <see cref="T:Troschuetz.Random.Distributions.Discrete.BernoulliDistribution" /> for each group of parameters. 
            </remarks>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="IsValidParam(alpha)" vb="IsValidParam(alpha)">Troschuetz.Random.Distributions.Discrete.BernoulliDistribution&lt;TGen&gt;.IsValidParam(alpha)</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">!Troschuetz.Random.Distributions.Discrete.BernoulliDistribution&lt;TGen&gt;.IsValidParam(alpha)</exception>
    </member>
    <member name="M:Troschuetz.Random.TRandom`1.BernoulliSamples(System.Double)">
      <summary>
              Returns an infinite sequence of bernoulli distributed 32-bit signed integers.
            </summary>
      <param name="alpha">
              The parameter alpha which is used for generation of bernoulli distributed random numbers.
            </param>
      <returns>
              An infinite sequence of bernoulli distributed 32-bit signed integers.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> is less than zero or greater than one.
            </exception>
      <remarks>
              This method simply wraps a call to <see cref="M:Troschuetz.Random.Distributions.Discrete.BernoulliDistribution`1.Next" />,
              with a prior adjustement of the distribution parameters.
            </remarks>
      <remarks>
              This method is slightly more efficient when called with the same parameters.
              If you absolutely need the best performance, you may consider using
              an instance of <see cref="T:Troschuetz.Random.Distributions.Discrete.BernoulliDistribution" /> for each group of parameters. 
            </remarks>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="IsValidParam(alpha)" vb="IsValidParam(alpha)">Troschuetz.Random.Distributions.Discrete.BernoulliDistribution&lt;TGen&gt;.IsValidParam(alpha)</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">!Troschuetz.Random.Distributions.Discrete.BernoulliDistribution&lt;TGen&gt;.IsValidParam(alpha)</exception>
    </member>
    <member name="M:Troschuetz.Random.TRandom`1.Binomial(System.Double,System.Int32)">
      <summary>
              Returns a binomial distributed 32-bit signed integer.
            </summary>
      <param name="alpha">
              The parameter alpha which is used for generation of binomial distributed random numbers.
            </param>
      <param name="beta">
              The parameter beta which is used for generation of binomial distributed random numbers.
            </param>
      <returns>
              A binomial distributed 32-bit signed integer.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> is less than zero or greater than one,
              or <paramref name="beta" /> is less than zero.
            </exception>
      <remarks>
              This method simply wraps a call to <see cref="M:Troschuetz.Random.Distributions.Discrete.BinomialDistribution`1.Next" />,
              with a prior adjustement of the distribution parameters.
            </remarks>
      <remarks>
              This method is slightly more efficient when called with the same parameters.
              If you absolutely need the best performance, you may consider using
              an instance of <see cref="T:Troschuetz.Random.Distributions.Discrete.BinomialDistribution" /> for each group of parameters. 
            </remarks>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="AreValidParams(alpha, beta)" vb="AreValidParams(alpha, beta)">Troschuetz.Random.Distributions.Discrete.BinomialDistribution&lt;TGen&gt;.AreValidParams(alpha, beta)</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">!Troschuetz.Random.Distributions.Discrete.BinomialDistribution&lt;TGen&gt;.AreValidParams(alpha, beta)</exception>
    </member>
    <member name="M:Troschuetz.Random.TRandom`1.BinomialSamples(System.Double,System.Int32)">
      <summary>
              Returns an infinite sequence of binomial distributed 32-bit signed integers.
            </summary>
      <param name="alpha">
              The parameter alpha which is used for generation of binomial distributed random numbers.
            </param>
      <param name="beta">
              The parameter beta which is used for generation of binomial distributed random numbers.
            </param>
      <returns>
              An infinite sequence of binomial distributed 32-bit signed integers.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> is less than zero or greater than one,
              or <paramref name="beta" /> is less than zero.
            </exception>
      <remarks>
              This method simply wraps a call to <see cref="M:Troschuetz.Random.Distributions.Discrete.BinomialDistribution`1.Next" />,
              with a prior adjustement of the distribution parameters.
            </remarks>
      <remarks>
              This method is slightly more efficient when called with the same parameters.
              If you absolutely need the best performance, you may consider using
              an instance of <see cref="T:Troschuetz.Random.Distributions.Discrete.BinomialDistribution" /> for each group of parameters. 
            </remarks>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="AreValidParams(alpha, beta)" vb="AreValidParams(alpha, beta)">Troschuetz.Random.Distributions.Discrete.BinomialDistribution&lt;TGen&gt;.AreValidParams(alpha, beta)</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">!Troschuetz.Random.Distributions.Discrete.BinomialDistribution&lt;TGen&gt;.AreValidParams(alpha, beta)</exception>
    </member>
    <member name="M:Troschuetz.Random.TRandom`1.Categorical(System.Int32)">
      <summary>
              Returns a categorical distributed 32-bit signed integer.
            </summary>
      <param name="valueCount">
              The parameter valueCount which is used for generation of binomial distributed random numbers
              by setting the number of equi-distributed "weights" the distribution will have.
            </param>
      <returns>
              A categorical distributed 32-bit signed integer.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="valueCount" /> is less than or equal to zero.
            </exception>
      <remarks>
              This method simply wraps a call to <see cref="M:Troschuetz.Random.Distributions.Discrete.CategoricalDistribution`1.Next" />,
              with a prior adjustement of the distribution parameters.
            </remarks>
      <remarks>
              This method is slightly more efficient when called with the same parameters.
              If you absolutely need the best performance, you may consider using
              an instance of <see cref="T:Troschuetz.Random.Distributions.Discrete.CategoricalDistribution" /> for each group of parameters. 
            </remarks>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="valueCount &gt; 0" vb="valueCount &gt; 0">valueCount &gt; 0</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">valueCount &lt;= 0</exception>
    </member>
    <member name="M:Troschuetz.Random.TRandom`1.CategoricalSamples(System.Int32)">
      <summary>
              Returns an infinite sequence of categorical distributed 32-bit signed integers.
            </summary>
      <param name="valueCount">
              The parameter valueCount which is used for generation of binomial distributed random numbers
              by setting the number of equi-distributed "weights" the distribution will have.
            </param>
      <returns>
              An infinite sequence of categorical distributed 32-bit signed integers.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="valueCount" /> is less than or equal to zero.
            </exception>
      <remarks>
              This method simply wraps a call to <see cref="M:Troschuetz.Random.Distributions.Discrete.CategoricalDistribution`1.Next" />,
              with a prior adjustement of the distribution parameters.
            </remarks>
      <remarks>
              This method is slightly more efficient when called with the same parameters.
              If you absolutely need the best performance, you may consider using
              an instance of <see cref="T:Troschuetz.Random.Distributions.Discrete.CategoricalDistribution" /> for each group of parameters. 
            </remarks>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="valueCount &gt; 0" vb="valueCount &gt; 0">valueCount &gt; 0</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">valueCount &lt;= 0</exception>
    </member>
    <member name="M:Troschuetz.Random.TRandom`1.Categorical(System.Collections.Generic.ICollection{System.Double})">
      <summary>
              Returns a categorical distributed 32-bit signed integer.
            </summary>
      <param name="weights">
              An enumerable of nonnegative weights: this enumerable does not need to be normalized 
              as this is often impossible using floating point arithmetic.
            </param>
      <returns>
              A categorical distributed 32-bit signed integer.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="weights" /> is null.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="weights" /> is empty.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
              Any of the weights in <paramref name="weights" /> are negative or they sum to zero.
            </exception>
      <remarks>
              This method simply wraps a call to <see cref="M:Troschuetz.Random.Distributions.Discrete.CategoricalDistribution`1.Next" />,
              with a prior adjustement of the distribution parameters.
            </remarks>
      <remarks>
              This method is slightly more efficient when called with the same parameters.
              If you absolutely need the best performance, you may consider using
              an instance of <see cref="T:Troschuetz.Random.Distributions.Discrete.CategoricalDistribution" /> for each group of parameters. 
            </remarks>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="IsValidParam(weights)" vb="IsValidParam(weights)">Troschuetz.Random.Distributions.Discrete.CategoricalDistribution&lt;TGen&gt;.IsValidParam(weights)</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">!Troschuetz.Random.Distributions.Discrete.CategoricalDistribution&lt;TGen&gt;.IsValidParam(weights)</exception>
    </member>
    <member name="M:Troschuetz.Random.TRandom`1.CategoricalSamples(System.Collections.Generic.ICollection{System.Double})">
      <summary>
              Returns an infinite sequence of categorical distributed 32-bit signed integers.
            </summary>
      <param name="weights">
              An enumerable of nonnegative weights: this enumerable does not need to be normalized 
              as this is often impossible using floating point arithmetic.
            </param>
      <returns>
              An infinite sequence of categorical distributed 32-bit signed integers.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="weights" /> is null.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="weights" /> is empty.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
              Any of the weights in <paramref name="weights" /> are negative or they sum to zero.
            </exception>
      <remarks>
              This method simply wraps a call to <see cref="M:Troschuetz.Random.Distributions.Discrete.CategoricalDistribution`1.Next" />,
              with a prior adjustement of the distribution parameters.
            </remarks>
      <remarks>
              This method is slightly more efficient when called with the same parameters.
              If you absolutely need the best performance, you may consider using
              an instance of <see cref="T:Troschuetz.Random.Distributions.Discrete.CategoricalDistribution" /> for each group of parameters. 
            </remarks>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="IsValidParam(weights)" vb="IsValidParam(weights)">Troschuetz.Random.Distributions.Discrete.CategoricalDistribution&lt;TGen&gt;.IsValidParam(weights)</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">!Troschuetz.Random.Distributions.Discrete.CategoricalDistribution&lt;TGen&gt;.IsValidParam(weights)</exception>
    </member>
    <member name="M:Troschuetz.Random.TRandom`1.DiscreteUniform(System.Int32,System.Int32)">
      <summary>
              Returns a discrete uniform distributed 32-bit signed integer.
            </summary>
      <param name="alpha">
              The parameter alpha which is used for generation of discrete uniform distributed random numbers.
            </param>
      <param name="beta">
              The parameter beta which is used for generation of discrete uniform distributed random numbers.
            </param>
      <returns>
              A discrete uniform distributed 32-bit signed integer.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> is greater than <paramref name="beta" />,
              or <paramref name="beta" /> is equal to <see cref="F:System.Int32.MaxValue" />.
            </exception>
      <remarks>
              This method simply wraps a call to <see cref="M:Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution`1.Next" />,
              with a prior adjustement of the distribution parameters.
            </remarks>
      <remarks>
              This method is slightly more efficient when called with the same parameters.
              If you absolutely need the best performance, you may consider using
              an instance of <see cref="T:Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution" /> for each group of parameters. 
            </remarks>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="AreValidParams(alpha, beta)" vb="AreValidParams(alpha, beta)">Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution&lt;TGen&gt;.AreValidParams(alpha, beta)</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">!Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution&lt;TGen&gt;.AreValidParams(alpha, beta)</exception>
    </member>
    <member name="M:Troschuetz.Random.TRandom`1.DiscreteUniformSamples(System.Int32,System.Int32)">
      <summary>
              Returns an infinite sequence of discrete uniform distributed 32-bit signed integers.
            </summary>
      <param name="alpha">
              The parameter alpha which is used for generation of discrete uniform distributed random numbers.
            </param>
      <param name="beta">
              The parameter beta which is used for generation of discrete uniform distributed random numbers.
            </param>
      <returns>
              An infinite sequence of discrete uniform distributed 32-bit signed integers.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> is greater than <paramref name="beta" />,
              or <paramref name="beta" /> is equal to <see cref="F:System.Int32.MaxValue" />.
            </exception>
      <remarks>
              This method simply wraps a call to <see cref="M:Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution`1.Next" />,
              with a prior adjustement of the distribution parameters.
            </remarks>
      <remarks>
              This method is slightly more efficient when called with the same parameters.
              If you absolutely need the best performance, you may consider using
              an instance of <see cref="T:Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution" /> for each group of parameters. 
            </remarks>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="AreValidParams(alpha, beta)" vb="AreValidParams(alpha, beta)">Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution&lt;TGen&gt;.AreValidParams(alpha, beta)</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">!Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution&lt;TGen&gt;.AreValidParams(alpha, beta)</exception>
    </member>
    <member name="M:Troschuetz.Random.TRandom`1.Geometric(System.Double)">
      <summary>
              Returns a geometric distributed 32-bit signed integer.
            </summary>
      <param name="alpha">
              The parameter alpha which is used for generation of geometric distributed random numbers.
            </param>
      <returns>
              A geometric distributed 32-bit signed integer.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> is less than or equal to zero or it is greater than one.
            </exception>
      <remarks>
              This method simply wraps a call to <see cref="M:Troschuetz.Random.Distributions.Discrete.GeometricDistribution`1.Next" />,
              with a prior adjustement of the distribution parameters.
            </remarks>
      <remarks>
              This method is slightly more efficient when called with the same parameters.
              If you absolutely need the best performance, you may consider using
              an instance of <see cref="T:Troschuetz.Random.Distributions.Discrete.GeometricDistribution" /> for each group of parameters. 
            </remarks>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="IsValidParam(alpha)" vb="IsValidParam(alpha)">Troschuetz.Random.Distributions.Discrete.GeometricDistribution&lt;TGen&gt;.IsValidParam(alpha)</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">!Troschuetz.Random.Distributions.Discrete.GeometricDistribution&lt;TGen&gt;.IsValidParam(alpha)</exception>
    </member>
    <member name="M:Troschuetz.Random.TRandom`1.GeometricSamples(System.Double)">
      <summary>
              Returns an infinite sequence of geometric distributed 32-bit signed integers.
            </summary>
      <param name="alpha">
              The parameter alpha which is used for generation of geometric distributed random numbers.
            </param>
      <returns>
              An infinite sequence of geometric distributed 32-bit signed integers.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> is less than or equal to zero or it is greater than one.
            </exception>
      <remarks>
              This method simply wraps a call to <see cref="M:Troschuetz.Random.Distributions.Discrete.GeometricDistribution`1.Next" />,
              with a prior adjustement of the distribution parameters.
            </remarks>
      <remarks>
              This method is slightly more efficient when called with the same parameters.
              If you absolutely need the best performance, you may consider using
              an instance of <see cref="T:Troschuetz.Random.Distributions.Discrete.GeometricDistribution" /> for each group of parameters. 
            </remarks>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="IsValidParam(alpha)" vb="IsValidParam(alpha)">Troschuetz.Random.Distributions.Discrete.GeometricDistribution&lt;TGen&gt;.IsValidParam(alpha)</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">!Troschuetz.Random.Distributions.Discrete.GeometricDistribution&lt;TGen&gt;.IsValidParam(alpha)</exception>
    </member>
    <member name="M:Troschuetz.Random.TRandom`1.Poisson(System.Double)">
      <summary>
              Returns a poisson distributed 32-bit signed integer.
            </summary>
      <param name="lambda">
              The parameter lambda which is used for generation of poisson distributed random numbers.
            </param>
      <returns>
              A poisson distributed 32-bit signed integer.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="lambda" /> is less than or equal to zero.
            </exception>
      <remarks>
              This method simply wraps a call to <see cref="M:Troschuetz.Random.Distributions.Discrete.PoissonDistribution`1.Next" />,
              with a prior adjustement of the distribution parameters.
            </remarks>
      <remarks>
              This method is slightly more efficient when called with the same parameters.
              If you absolutely need the best performance, you may consider using
              an instance of <see cref="T:Troschuetz.Random.Distributions.Discrete.PoissonDistribution" /> for each group of parameters. 
            </remarks>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="IsValidParam(lambda)" vb="IsValidParam(lambda)">Troschuetz.Random.Distributions.Discrete.PoissonDistribution&lt;TGen&gt;.IsValidParam(lambda)</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">!Troschuetz.Random.Distributions.Discrete.PoissonDistribution&lt;TGen&gt;.IsValidParam(lambda)</exception>
    </member>
    <member name="M:Troschuetz.Random.TRandom`1.PoissonSamples(System.Double)">
      <summary>
              Returns an infinite sequence of poisson distributed 32-bit signed integers.
            </summary>
      <param name="lambda">
              The parameter lambda which is used for generation of poisson distributed random numbers.
            </param>
      <returns>
              An infinite sequence of poisson distributed 32-bit signed integers.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="lambda" /> is less than or equal to zero.
            </exception>
      <remarks>
              This method simply wraps a call to <see cref="M:Troschuetz.Random.Distributions.Discrete.PoissonDistribution`1.Next" />,
              with a prior adjustement of the distribution parameters.
            </remarks>
      <remarks>
              This method is slightly more efficient when called with the same parameters.
              If you absolutely need the best performance, you may consider using
              an instance of <see cref="T:Troschuetz.Random.Distributions.Discrete.PoissonDistribution" /> for each group of parameters. 
            </remarks>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="IsValidParam(lambda)" vb="IsValidParam(lambda)">Troschuetz.Random.Distributions.Discrete.PoissonDistribution&lt;TGen&gt;.IsValidParam(lambda)</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">!Troschuetz.Random.Distributions.Discrete.PoissonDistribution&lt;TGen&gt;.IsValidParam(lambda)</exception>
    </member>
    <member name="M:Troschuetz.Random.TRandom`1.Beta(System.Double,System.Double)">
      <summary>
              Returns a beta distributed floating point random number.
            </summary>
      <param name="alpha">
              The parameter alpha which is used for generation of beta distributed random numbers.
            </param>
      <param name="beta">
              The parameter beta which is used for generation of beta distributed random numbers.
            </param>
      <returns>
              A beta distributed floating point random number.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> or <paramref name="beta" /> are less than or equal to zero.
            </exception>
      <remarks>
              This method simply wraps a call to <see cref="M:Troschuetz.Random.Distributions.Continuous.BetaDistribution`1.NextDouble" />,
              with a prior adjustement of the distribution parameters.
            </remarks>
      <remarks>
              This method is slightly more efficient when called with the same parameters.
              If you absolutely need the best performance, you may consider using
              an instance of <see cref="T:Troschuetz.Random.Distributions.Continuous.BetaDistribution" /> for each group of parameters. 
            </remarks>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="AreValidParams(alpha, beta)" vb="AreValidParams(alpha, beta)">Troschuetz.Random.Distributions.Continuous.BetaDistribution&lt;TGen&gt;.AreValidParams(alpha, beta)</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">!Troschuetz.Random.Distributions.Continuous.BetaDistribution&lt;TGen&gt;.AreValidParams(alpha, beta)</exception>
    </member>
    <member name="M:Troschuetz.Random.TRandom`1.BetaSamples(System.Double,System.Double)">
      <summary>
              Returns an infinite sequence of beta distributed floating point random numbers.
            </summary>
      <param name="alpha">
              The parameter alpha which is used for generation of beta distributed random numbers.
            </param>
      <param name="beta">
              The parameter beta which is used for generation of beta distributed random numbers.
            </param>
      <returns>
              An infinite sequence of beta distributed floating point random numbers.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> or <paramref name="beta" /> are less than or equal to zero.
            </exception>
      <remarks>
              This method simply wraps a call to <see cref="M:Troschuetz.Random.Distributions.Continuous.BetaDistribution`1.NextDouble" />,
              with a prior adjustement of the distribution parameters.
            </remarks>
      <remarks>
              This method is slightly more efficient when called with the same parameters.
              If you absolutely need the best performance, you may consider using
              an instance of <see cref="T:Troschuetz.Random.Distributions.Continuous.BetaDistribution" /> for each group of parameters. 
            </remarks>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="AreValidParams(alpha, beta)" vb="AreValidParams(alpha, beta)">Troschuetz.Random.Distributions.Continuous.BetaDistribution&lt;TGen&gt;.AreValidParams(alpha, beta)</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">!Troschuetz.Random.Distributions.Continuous.BetaDistribution&lt;TGen&gt;.AreValidParams(alpha, beta)</exception>
    </member>
    <member name="M:Troschuetz.Random.TRandom`1.BetaPrime(System.Double,System.Double)">
      <summary>
              Returns a beta prime distributed floating point random number.
            </summary>
      <param name="alpha">
              The parameter alpha which is used for generation of beta prime distributed random numbers.
            </param>
      <param name="beta">
              The parameter beta which is used for generation of beta prime distributed random numbers.
            </param>
      <returns>
              A beta prime distributed floating point random number.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> or <paramref name="beta" /> are less than or equal to one.
            </exception>
      <remarks>
              This method simply wraps a call to <see cref="M:Troschuetz.Random.Distributions.Continuous.BetaPrimeDistribution`1.NextDouble" />,
              with a prior adjustement of the distribution parameters.
            </remarks>
      <remarks>
              This method is slightly more efficient when called with the same parameters.
              If you absolutely need the best performance, you may consider using
              an instance of <see cref="T:Troschuetz.Random.Distributions.Continuous.BetaPrimeDistribution" /> for each group of parameters. 
            </remarks>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="AreValidParams(alpha, beta)" vb="AreValidParams(alpha, beta)">Troschuetz.Random.Distributions.Continuous.BetaPrimeDistribution&lt;TGen&gt;.AreValidParams(alpha, beta)</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">!Troschuetz.Random.Distributions.Continuous.BetaPrimeDistribution&lt;TGen&gt;.AreValidParams(alpha, beta)</exception>
    </member>
    <member name="M:Troschuetz.Random.TRandom`1.BetaPrimeSamples(System.Double,System.Double)">
      <summary>
              Returns an infinite sequence of beta prime distributed floating point random numbers.
            </summary>
      <param name="alpha">
              The parameter alpha which is used for generation of beta prime distributed random numbers.
            </param>
      <param name="beta">
              The parameter beta which is used for generation of beta prime distributed random numbers.
            </param>
      <returns>
              An infinite sequence of beta prime distributed floating point random numbers.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> or <paramref name="beta" /> are less than or equal to one.
            </exception>
      <remarks>
              This method simply wraps a call to <see cref="M:Troschuetz.Random.Distributions.Continuous.BetaPrimeDistribution`1.NextDouble" />,
              with a prior adjustement of the distribution parameters.
            </remarks>
      <remarks>
              This method is slightly more efficient when called with the same parameters.
              If you absolutely need the best performance, you may consider using
              an instance of <see cref="T:Troschuetz.Random.Distributions.Continuous.BetaPrimeDistribution" /> for each group of parameters. 
            </remarks>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="AreValidParams(alpha, beta)" vb="AreValidParams(alpha, beta)">Troschuetz.Random.Distributions.Continuous.BetaPrimeDistribution&lt;TGen&gt;.AreValidParams(alpha, beta)</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">!Troschuetz.Random.Distributions.Continuous.BetaPrimeDistribution&lt;TGen&gt;.AreValidParams(alpha, beta)</exception>
    </member>
    <member name="M:Troschuetz.Random.TRandom`1.Cauchy(System.Double,System.Double)">
      <summary>
              Returns a cauchy distributed floating point random number.
            </summary>
      <param name="alpha">
              The parameter alpha which is used for generation of cauchy distributed random numbers.
            </param>
      <param name="gamma">
              The parameter gamma which is used for generation of cauchy distributed random numbers.
            </param>
      <returns>
              A cauchy distributed floating point random number.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="gamma" /> is less than or equal to zero.
            </exception>
      <remarks>
              This method simply wraps a call to <see cref="M:Troschuetz.Random.Distributions.Continuous.CauchyDistribution`1.NextDouble" />,
              with a prior adjustement of the distribution parameters.
            </remarks>
      <remarks>
              This method is slightly more efficient when called with the same parameters.
              If you absolutely need the best performance, you may consider using
              an instance of <see cref="T:Troschuetz.Random.Distributions.Continuous.CauchyDistribution" /> for each group of parameters. 
            </remarks>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="AreValidParams(alpha, gamma)" vb="AreValidParams(alpha, gamma)">Troschuetz.Random.Distributions.Continuous.CauchyDistribution&lt;TGen&gt;.AreValidParams(alpha, gamma)</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">!Troschuetz.Random.Distributions.Continuous.CauchyDistribution&lt;TGen&gt;.AreValidParams(alpha, gamma)</exception>
    </member>
    <member name="M:Troschuetz.Random.TRandom`1.CauchySamples(System.Double,System.Double)">
      <summary>
              Returns an infinite sequence of cauchy distributed floating point random numbers.
            </summary>
      <param name="alpha">
              The parameter alpha which is used for generation of cauchy distributed random numbers.
            </param>
      <param name="gamma">
              The parameter gamma which is used for generation of cauchy distributed random numbers.
            </param>
      <returns>
              An infinite sequence of cauchy distributed floating point random numbers.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="gamma" /> is less than or equal to zero.
            </exception>
      <remarks>
              This method simply wraps a call to <see cref="M:Troschuetz.Random.Distributions.Continuous.CauchyDistribution`1.NextDouble" />,
              with a prior adjustement of the distribution parameters.
            </remarks>
      <remarks>
              This method is slightly more efficient when called with the same parameters.
              If you absolutely need the best performance, you may consider using
              an instance of <see cref="T:Troschuetz.Random.Distributions.Continuous.CauchyDistribution" /> for each group of parameters. 
            </remarks>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="AreValidParams(alpha, gamma)" vb="AreValidParams(alpha, gamma)">Troschuetz.Random.Distributions.Continuous.CauchyDistribution&lt;TGen&gt;.AreValidParams(alpha, gamma)</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">!Troschuetz.Random.Distributions.Continuous.CauchyDistribution&lt;TGen&gt;.AreValidParams(alpha, gamma)</exception>
    </member>
    <member name="M:Troschuetz.Random.TRandom`1.Chi(System.Int32)">
      <summary>
              Returns a chi distributed floating point random number.
            </summary>
      <param name="alpha">
              The parameter alpha which is used for generation of chi distributed random numbers.
            </param>
      <returns>
              A chi distributed floating point random number.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> is less than or equal to zero.
            </exception>
      <remarks>
              This method simply wraps a call to <see cref="M:Troschuetz.Random.Distributions.Continuous.ChiDistribution`1.NextDouble" />,
              with a prior adjustement of the distribution parameters.
            </remarks>
      <remarks>
              This method is slightly more efficient when called with the same parameters.
              If you absolutely need the best performance, you may consider using
              an instance of <see cref="T:Troschuetz.Random.Distributions.Continuous.ChiDistribution" /> for each group of parameters. 
            </remarks>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="IsValidParam(alpha)" vb="IsValidParam(alpha)">Troschuetz.Random.Distributions.Continuous.ChiDistribution&lt;TGen&gt;.IsValidParam(alpha)</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">!Troschuetz.Random.Distributions.Continuous.ChiDistribution&lt;TGen&gt;.IsValidParam(alpha)</exception>
    </member>
    <member name="M:Troschuetz.Random.TRandom`1.ChiSamples(System.Int32)">
      <summary>
              Returns an infinite sequence of chi distributed floating point random numbers.
            </summary>
      <param name="alpha">
              The parameter alpha which is used for generation of chi distributed random numbers.
            </param>
      <returns>
              An infinite sequence of chi distributed floating point random numbers.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> is less than or equal to zero.
            </exception>
      <remarks>
              This method simply wraps a call to <see cref="M:Troschuetz.Random.Distributions.Continuous.ChiDistribution`1.NextDouble" />,
              with a prior adjustement of the distribution parameters.
            </remarks>
      <remarks>
              This method is slightly more efficient when called with the same parameters.
              If you absolutely need the best performance, you may consider using
              an instance of <see cref="T:Troschuetz.Random.Distributions.Continuous.ChiDistribution" /> for each group of parameters. 
            </remarks>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="IsValidParam(alpha)" vb="IsValidParam(alpha)">Troschuetz.Random.Distributions.Continuous.ChiDistribution&lt;TGen&gt;.IsValidParam(alpha)</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">!Troschuetz.Random.Distributions.Continuous.ChiDistribution&lt;TGen&gt;.IsValidParam(alpha)</exception>
    </member>
    <member name="M:Troschuetz.Random.TRandom`1.ChiSquare(System.Int32)">
      <summary>
              Returns a chi square distributed floating point random number.
            </summary>
      <param name="alpha">
              The parameter alpha which is used for generation of chi square distributed random numbers.
            </param>
      <returns>
              A chi square distributed floating point random number.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> is less than or equal to zero.
            </exception>
      <remarks>
              This method simply wraps a call to <see cref="M:Troschuetz.Random.Distributions.Continuous.ChiSquareDistribution`1.NextDouble" />,
              with a prior adjustement of the distribution parameters.
            </remarks>
      <remarks>
              This method is slightly more efficient when called with the same parameters.
              If you absolutely need the best performance, you may consider using
              an instance of <see cref="T:Troschuetz.Random.Distributions.Continuous.ChiSquareDistribution" /> for each group of parameters. 
            </remarks>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="IsValidParam(alpha)" vb="IsValidParam(alpha)">Troschuetz.Random.Distributions.Continuous.ChiSquareDistribution&lt;TGen&gt;.IsValidParam(alpha)</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">!Troschuetz.Random.Distributions.Continuous.ChiSquareDistribution&lt;TGen&gt;.IsValidParam(alpha)</exception>
    </member>
    <member name="M:Troschuetz.Random.TRandom`1.ChiSquareSamples(System.Int32)">
      <summary>
              Returns an infinite sequence of chi square distributed floating point random numbers.
            </summary>
      <param name="alpha">
              The parameter alpha which is used for generation of chi square distributed random numbers.
            </param>
      <returns>
              An infinite sequence of chi square distributed floating point random numbers.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> is less than or equal to zero.
            </exception>
      <remarks>
              This method simply wraps a call to <see cref="M:Troschuetz.Random.Distributions.Continuous.ChiSquareDistribution`1.NextDouble" />,
              with a prior adjustement of the distribution parameters.
            </remarks>
      <remarks>
              This method is slightly more efficient when called with the same parameters.
              If you absolutely need the best performance, you may consider using
              an instance of <see cref="T:Troschuetz.Random.Distributions.Continuous.ChiSquareDistribution" /> for each group of parameters. 
            </remarks>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="IsValidParam(alpha)" vb="IsValidParam(alpha)">Troschuetz.Random.Distributions.Continuous.ChiSquareDistribution&lt;TGen&gt;.IsValidParam(alpha)</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">!Troschuetz.Random.Distributions.Continuous.ChiSquareDistribution&lt;TGen&gt;.IsValidParam(alpha)</exception>
    </member>
    <member name="M:Troschuetz.Random.TRandom`1.ContinuousUniform(System.Double,System.Double)">
      <summary>
              Returns a continuous uniform distributed floating point random number.
            </summary>
      <param name="alpha">
              The parameter alpha which is used for generation of continuous uniform distributed random numbers.
            </param>
      <param name="beta">
              The parameter beta which is used for generation of continuous uniform distributed random numbers.
            </param>
      <returns>
              A continuous uniform distributed floating point random number.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> is greater than <paramref name="beta" />.
            </exception>
      <remarks>
              This method simply wraps a call to <see cref="M:Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution`1.NextDouble" />,
              with a prior adjustement of the distribution parameters.
            </remarks>
      <remarks>
              This method is slightly more efficient when called with the same parameters.
              If you absolutely need the best performance, you may consider using
              an instance of <see cref="T:Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution" /> for each group of parameters. 
            </remarks>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="AreValidParams(alpha, beta)" vb="AreValidParams(alpha, beta)">Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution&lt;TGen&gt;.AreValidParams(alpha, beta)</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">!Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution&lt;TGen&gt;.AreValidParams(alpha, beta)</exception>
    </member>
    <member name="M:Troschuetz.Random.TRandom`1.ContinuousUniformSamples(System.Double,System.Double)">
      <summary>
              Returns an infinite sequence of continuous uniform distributed floating point random numbers.
            </summary>
      <param name="alpha">
              The parameter alpha which is used for generation of continuous uniform distributed random numbers.
            </param>
      <param name="beta">
              The parameter beta which is used for generation of continuous uniform distributed random numbers.
            </param>
      <returns>
              An infinite sequence of continuous uniform distributed floating point random numbers.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> is greater than <paramref name="beta" />.
            </exception>
      <remarks>
              This method simply wraps a call to <see cref="M:Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution`1.NextDouble" />,
              with a prior adjustement of the distribution parameters.
            </remarks>
      <remarks>
              This method is slightly more efficient when called with the same parameters.
              If you absolutely need the best performance, you may consider using
              an instance of <see cref="T:Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution" /> for each group of parameters. 
            </remarks>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="AreValidParams(alpha, beta)" vb="AreValidParams(alpha, beta)">Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution&lt;TGen&gt;.AreValidParams(alpha, beta)</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">!Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution&lt;TGen&gt;.AreValidParams(alpha, beta)</exception>
    </member>
    <member name="M:Troschuetz.Random.TRandom`1.Erlang(System.Int32,System.Double)">
      <summary>
              Returns an erlang distributed floating point random number.
            </summary>
      <param name="alpha">
              The parameter alpha which is used for generation of erlang distributed random numbers.
            </param>
      <param name="lambda">
              The parameter lambda which is used for generation of erlang distributed random numbers.
            </param>
      <returns>
              An erlang distributed floating point random number.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> or <paramref name="lambda" /> are less than or equal to zero.
            </exception>
      <remarks>
              This method simply wraps a call to <see cref="M:Troschuetz.Random.Distributions.Continuous.ErlangDistribution`1.NextDouble" />,
              with a prior adjustement of the distribution parameters.
            </remarks>
      <remarks>
              This method is slightly more efficient when called with the same parameters.
              If you absolutely need the best performance, you may consider using
              an instance of <see cref="T:Troschuetz.Random.Distributions.Continuous.ErlangDistribution" /> for each group of parameters. 
            </remarks>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="AreValidParams(alpha, lambda)" vb="AreValidParams(alpha, lambda)">Troschuetz.Random.Distributions.Continuous.ErlangDistribution&lt;TGen&gt;.AreValidParams(alpha, lambda)</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">!Troschuetz.Random.Distributions.Continuous.ErlangDistribution&lt;TGen&gt;.AreValidParams(alpha, lambda)</exception>
    </member>
    <member name="M:Troschuetz.Random.TRandom`1.ErlangSamples(System.Int32,System.Double)">
      <summary>
              Returns an infinite sequence of erlang distributed floating point random numbers.
            </summary>
      <param name="alpha">
              The parameter alpha which is used for generation of erlang distributed random numbers.
            </param>
      <param name="lambda">
              The parameter lambda which is used for generation of erlang distributed random numbers.
            </param>
      <returns>
              An infinite sequence of erlang distributed floating point random numbers.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> or <paramref name="lambda" /> are less than or equal to zero.
            </exception>
      <remarks>
              This method simply wraps a call to <see cref="M:Troschuetz.Random.Distributions.Continuous.ErlangDistribution`1.NextDouble" />,
              with a prior adjustement of the distribution parameters.
            </remarks>
      <remarks>
              This method is slightly more efficient when called with the same parameters.
              If you absolutely need the best performance, you may consider using
              an instance of <see cref="T:Troschuetz.Random.Distributions.Continuous.ErlangDistribution" /> for each group of parameters. 
            </remarks>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="AreValidParams(alpha, lambda)" vb="AreValidParams(alpha, lambda)">Troschuetz.Random.Distributions.Continuous.ErlangDistribution&lt;TGen&gt;.AreValidParams(alpha, lambda)</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">!Troschuetz.Random.Distributions.Continuous.ErlangDistribution&lt;TGen&gt;.AreValidParams(alpha, lambda)</exception>
    </member>
    <member name="M:Troschuetz.Random.TRandom`1.Exponential(System.Double)">
      <summary>
              Returns an exponential distributed floating point random number.
            </summary>
      <param name="lambda">
              The parameter lambda which is used for generation of exponential distributed random numbers.
            </param>
      <returns>
              An exponential distributed floating point random number.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="lambda" /> is less than or equal to zero.
            </exception>
      <remarks>
              This method simply wraps a call to <see cref="M:Troschuetz.Random.Distributions.Continuous.ExponentialDistribution`1.NextDouble" />,
              with a prior adjustement of the distribution parameters.
            </remarks>
      <remarks>
              This method is slightly more efficient when called with the same parameters.
              If you absolutely need the best performance, you may consider using
              an instance of <see cref="T:Troschuetz.Random.Distributions.Continuous.ExponentialDistribution" /> for each group of parameters. 
            </remarks>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="IsValidParam(lambda)" vb="IsValidParam(lambda)">Troschuetz.Random.Distributions.Continuous.ExponentialDistribution&lt;TGen&gt;.IsValidParam(lambda)</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">!Troschuetz.Random.Distributions.Continuous.ExponentialDistribution&lt;TGen&gt;.IsValidParam(lambda)</exception>
    </member>
    <member name="M:Troschuetz.Random.TRandom`1.ExponentialSamples(System.Double)">
      <summary>
              Returns an infinite sequence of exponential distributed floating point random numbers.
            </summary>
      <param name="lambda">
              The parameter lambda which is used for generation of exponential distributed random numbers.
            </param>
      <returns>
              An infinite sequence of exponential distributed floating point random numbers.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="lambda" /> is less than or equal to zero.
            </exception>
      <remarks>
              This method simply wraps a call to <see cref="M:Troschuetz.Random.Distributions.Continuous.ExponentialDistribution`1.NextDouble" />,
              with a prior adjustement of the distribution parameters.
            </remarks>
      <remarks>
              This method is slightly more efficient when called with the same parameters.
              If you absolutely need the best performance, you may consider using
              an instance of <see cref="T:Troschuetz.Random.Distributions.Continuous.ExponentialDistribution" /> for each group of parameters. 
            </remarks>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="IsValidParam(lambda)" vb="IsValidParam(lambda)">Troschuetz.Random.Distributions.Continuous.ExponentialDistribution&lt;TGen&gt;.IsValidParam(lambda)</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">!Troschuetz.Random.Distributions.Continuous.ExponentialDistribution&lt;TGen&gt;.IsValidParam(lambda)</exception>
    </member>
    <member name="M:Troschuetz.Random.TRandom`1.FisherSnedecor(System.Int32,System.Int32)">
      <summary>
              Returns a fisher snedecor distributed floating point random number.
            </summary>
      <param name="alpha">
              The parameter alpha which is used for generation of fisher snedecor distributed random numbers.
            </param>
      <param name="beta">
              The parameter beta which is used for generation of fisher snedecor distributed random numbers.
            </param>
      <returns>
              A fisher snedecor distributed floating point random number.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> or <paramref name="beta" /> are less than or equal to zero.
            </exception>
      <remarks>
              This method simply wraps a call to <see cref="M:Troschuetz.Random.Distributions.Continuous.FisherSnedecorDistribution`1.NextDouble" />,
              with a prior adjustement of the distribution parameters.
            </remarks>
      <remarks>
              This method is slightly more efficient when called with the same parameters.
              If you absolutely need the best performance, you may consider using
              an instance of <see cref="T:Troschuetz.Random.Distributions.Continuous.FisherSnedecorDistribution" /> for each group of parameters. 
            </remarks>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="AreValidParams(alpha, beta)" vb="AreValidParams(alpha, beta)">Troschuetz.Random.Distributions.Continuous.FisherSnedecorDistribution&lt;TGen&gt;.AreValidParams(alpha, beta)</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">!Troschuetz.Random.Distributions.Continuous.FisherSnedecorDistribution&lt;TGen&gt;.AreValidParams(alpha, beta)</exception>
    </member>
    <member name="M:Troschuetz.Random.TRandom`1.FisherSnedecorSamples(System.Int32,System.Int32)">
      <summary>
              Returns an infinite sequence of fisher snedecor distributed floating point random numbers.
            </summary>
      <param name="alpha">
              The parameter alpha which is used for generation of fisher snedecor distributed random numbers.
            </param>
      <param name="beta">
              The parameter beta which is used for generation of fisher snedecor distributed random numbers.
            </param>
      <returns>
              An infinite sequence of fisher snedecor distributed floating point random numbers.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> or <paramref name="beta" /> are less than or equal to zero.
            </exception>
      <remarks>
              This method simply wraps a call to <see cref="M:Troschuetz.Random.Distributions.Continuous.FisherSnedecorDistribution`1.NextDouble" />,
              with a prior adjustement of the distribution parameters.
            </remarks>
      <remarks>
              This method is slightly more efficient when called with the same parameters.
              If you absolutely need the best performance, you may consider using
              an instance of <see cref="T:Troschuetz.Random.Distributions.Continuous.FisherSnedecorDistribution" /> for each group of parameters. 
            </remarks>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="AreValidParams(alpha, beta)" vb="AreValidParams(alpha, beta)">Troschuetz.Random.Distributions.Continuous.FisherSnedecorDistribution&lt;TGen&gt;.AreValidParams(alpha, beta)</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">!Troschuetz.Random.Distributions.Continuous.FisherSnedecorDistribution&lt;TGen&gt;.AreValidParams(alpha, beta)</exception>
    </member>
    <member name="M:Troschuetz.Random.TRandom`1.FisherTippett(System.Double,System.Double)">
      <summary>
              Returns a fisher tippett distributed floating point random number.
            </summary>
      <param name="alpha">
              The parameter alpha which is used for generation of fisher tippett distributed random numbers.
            </param>
      <param name="mu">
              The parameter mu which is used for generation of fisher tippett distributed random numbers.
            </param>
      <returns>
              A fisher tippett distributed floating point random number.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> is less than or equal to zero.
            </exception>
      <remarks>
              This method simply wraps a call to <see cref="M:Troschuetz.Random.Distributions.Continuous.FisherTippettDistribution`1.NextDouble" />,
              with a prior adjustement of the distribution parameters.
            </remarks>
      <remarks>
              This method is slightly more efficient when called with the same parameters.
              If you absolutely need the best performance, you may consider using
              an instance of <see cref="T:Troschuetz.Random.Distributions.Continuous.FisherTippettDistribution" /> for each group of parameters. 
            </remarks>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="AreValidParams(alpha, mu)" vb="AreValidParams(alpha, mu)">Troschuetz.Random.Distributions.Continuous.FisherTippettDistribution&lt;TGen&gt;.AreValidParams(alpha, mu)</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">!Troschuetz.Random.Distributions.Continuous.FisherTippettDistribution&lt;TGen&gt;.AreValidParams(alpha, mu)</exception>
    </member>
    <member name="M:Troschuetz.Random.TRandom`1.FisherTippettSamples(System.Double,System.Double)">
      <summary>
              Returns an infinite sequence of fisher tippett distributed floating point random numbers.
            </summary>
      <param name="alpha">
              The parameter alpha which is used for generation of fisher tippett distributed random numbers.
            </param>
      <param name="mu">
              The parameter mu which is used for generation of fisher tippett distributed random numbers.
            </param>
      <returns>
              An infinite sequence of fisher tippett distributed floating point random numbers.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> is less than or equal to zero.
            </exception>
      <remarks>
              This method simply wraps a call to <see cref="M:Troschuetz.Random.Distributions.Continuous.FisherTippettDistribution`1.NextDouble" />,
              with a prior adjustement of the distribution parameters.
            </remarks>
      <remarks>
              This method is slightly more efficient when called with the same parameters.
              If you absolutely need the best performance, you may consider using
              an instance of <see cref="T:Troschuetz.Random.Distributions.Continuous.FisherTippettDistribution" /> for each group of parameters. 
            </remarks>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="AreValidParams(alpha, mu)" vb="AreValidParams(alpha, mu)">Troschuetz.Random.Distributions.Continuous.FisherTippettDistribution&lt;TGen&gt;.AreValidParams(alpha, mu)</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">!Troschuetz.Random.Distributions.Continuous.FisherTippettDistribution&lt;TGen&gt;.AreValidParams(alpha, mu)</exception>
    </member>
    <member name="M:Troschuetz.Random.TRandom`1.Gamma(System.Double,System.Double)">
      <summary>
              Returns a gamma distributed floating point random number.
            </summary>
      <param name="alpha">
              The parameter alpha which is used for generation of gamma distributed random numbers.
            </param>
      <param name="theta">
              The parameter theta which is used for generation of gamma distributed random numbers.
            </param>
      <returns>
              A gamma distributed floating point random number.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> or <paramref name="theta" /> are less than or equal to zero.
            </exception>
      <remarks>
              This method simply wraps a call to <see cref="M:Troschuetz.Random.Distributions.Continuous.GammaDistribution`1.NextDouble" />,
              with a prior adjustement of the distribution parameters.
            </remarks>
      <remarks>
              This method is slightly more efficient when called with the same parameters.
              If you absolutely need the best performance, you may consider using
              an instance of <see cref="T:Troschuetz.Random.Distributions.Continuous.GammaDistribution" /> for each group of parameters. 
            </remarks>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="AreValidParams(alpha, theta)" vb="AreValidParams(alpha, theta)">Troschuetz.Random.Distributions.Continuous.GammaDistribution&lt;TGen&gt;.AreValidParams(alpha, theta)</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">!Troschuetz.Random.Distributions.Continuous.GammaDistribution&lt;TGen&gt;.AreValidParams(alpha, theta)</exception>
    </member>
    <member name="M:Troschuetz.Random.TRandom`1.GammaSamples(System.Double,System.Double)">
      <summary>
              Returns an infinite sequence of gamma distributed floating point random numbers.
            </summary>
      <param name="alpha">
              The parameter alpha which is used for generation of gamma distributed random numbers.
            </param>
      <param name="theta">
              The parameter theta which is used for generation of gamma distributed random numbers.
            </param>
      <returns>
              An infinite sequence of gamma distributed floating point random numbers.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> or <paramref name="theta" /> are less than or equal to zero.
            </exception>
      <remarks>
              This method simply wraps a call to <see cref="M:Troschuetz.Random.Distributions.Continuous.GammaDistribution`1.NextDouble" />,
              with a prior adjustement of the distribution parameters.
            </remarks>
      <remarks>
              This method is slightly more efficient when called with the same parameters.
              If you absolutely need the best performance, you may consider using
              an instance of <see cref="T:Troschuetz.Random.Distributions.Continuous.GammaDistribution" /> for each group of parameters. 
            </remarks>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="AreValidParams(alpha, theta)" vb="AreValidParams(alpha, theta)">Troschuetz.Random.Distributions.Continuous.GammaDistribution&lt;TGen&gt;.AreValidParams(alpha, theta)</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">!Troschuetz.Random.Distributions.Continuous.GammaDistribution&lt;TGen&gt;.AreValidParams(alpha, theta)</exception>
    </member>
    <member name="M:Troschuetz.Random.TRandom`1.Laplace(System.Double,System.Double)">
      <summary>
              Returns a laplace distributed floating point random number.
            </summary>
      <param name="alpha">
              The parameter alpha which is used for generation of laplace distributed random numbers.
            </param>
      <param name="mu">
              The parameter mu which is used for generation of laplace distributed random numbers.
            </param>
      <returns>
              A laplace distributed floating point random number.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> is less than or equal to zero.
            </exception>
      <remarks>
              This method simply wraps a call to <see cref="M:Troschuetz.Random.Distributions.Continuous.LaplaceDistribution`1.NextDouble" />,
              with a prior adjustement of the distribution parameters.
            </remarks>
      <remarks>
              This method is slightly more efficient when called with the same parameters.
              If you absolutely need the best performance, you may consider using
              an instance of <see cref="T:Troschuetz.Random.Distributions.Continuous.LaplaceDistribution" /> for each group of parameters. 
            </remarks>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="AreValidParams(alpha, mu)" vb="AreValidParams(alpha, mu)">Troschuetz.Random.Distributions.Continuous.LaplaceDistribution&lt;TGen&gt;.AreValidParams(alpha, mu)</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">!Troschuetz.Random.Distributions.Continuous.LaplaceDistribution&lt;TGen&gt;.AreValidParams(alpha, mu)</exception>
    </member>
    <member name="M:Troschuetz.Random.TRandom`1.LaplaceSamples(System.Double,System.Double)">
      <summary>
              Returns an infinite sequence of laplace distributed floating point random numbers.
            </summary>
      <param name="alpha">
              The parameter alpha which is used for generation of laplace distributed random numbers.
            </param>
      <param name="mu">
              The parameter mu which is used for generation of laplace distributed random numbers.
            </param>
      <returns>
              An infinite sequence of laplace distributed floating point random numbers.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> is less than or equal to zero.
            </exception>
      <remarks>
              This method simply wraps a call to <see cref="M:Troschuetz.Random.Distributions.Continuous.LaplaceDistribution`1.NextDouble" />,
              with a prior adjustement of the distribution parameters.
            </remarks>
      <remarks>
              This method is slightly more efficient when called with the same parameters.
              If you absolutely need the best performance, you may consider using
              an instance of <see cref="T:Troschuetz.Random.Distributions.Continuous.LaplaceDistribution" /> for each group of parameters. 
            </remarks>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="AreValidParams(alpha, mu)" vb="AreValidParams(alpha, mu)">Troschuetz.Random.Distributions.Continuous.LaplaceDistribution&lt;TGen&gt;.AreValidParams(alpha, mu)</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">!Troschuetz.Random.Distributions.Continuous.LaplaceDistribution&lt;TGen&gt;.AreValidParams(alpha, mu)</exception>
    </member>
    <member name="M:Troschuetz.Random.TRandom`1.Lognormal(System.Double,System.Double)">
      <summary>
              Returns a lognormal distributed floating point random number.
            </summary>
      <param name="mu">
              The parameter mu which is used for generation of lognormal distributed random numbers.
            </param>
      <param name="sigma">
              The parameter sigma which is used for generation of lognormal distributed random numbers.
            </param>
      <returns>
              A lognormal distributed floating point random number.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="sigma" /> is less than zero.
            </exception>
      <remarks>
              This method simply wraps a call to <see cref="M:Troschuetz.Random.Distributions.Continuous.LognormalDistribution`1.NextDouble" />,
              with a prior adjustement of the distribution parameters.
            </remarks>
      <remarks>
              This method is slightly more efficient when called with the same parameters.
              If you absolutely need the best performance, you may consider using
              an instance of <see cref="T:Troschuetz.Random.Distributions.Continuous.LognormalDistribution" /> for each group of parameters. 
            </remarks>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="AreValidParams(mu, sigma)" vb="AreValidParams(mu, sigma)">Troschuetz.Random.Distributions.Continuous.LognormalDistribution&lt;TGen&gt;.AreValidParams(mu, sigma)</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">!Troschuetz.Random.Distributions.Continuous.LognormalDistribution&lt;TGen&gt;.AreValidParams(mu, sigma)</exception>
    </member>
    <member name="M:Troschuetz.Random.TRandom`1.LognormalSamples(System.Double,System.Double)">
      <summary>
              Returns an infinite sequence of lognormal distributed floating point random numbers.
            </summary>
      <param name="mu">
              The parameter mu which is used for generation of lognormal distributed random numbers.
            </param>
      <param name="sigma">
              The parameter sigma which is used for generation of lognormal distributed random numbers.
            </param>
      <returns>
              An infinite sequence of lognormal distributed floating point random numbers.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="sigma" /> is less than zero.
            </exception>
      <remarks>
              This method simply wraps a call to <see cref="M:Troschuetz.Random.Distributions.Continuous.LognormalDistribution`1.NextDouble" />,
              with a prior adjustement of the distribution parameters.
            </remarks>
      <remarks>
              This method is slightly more efficient when called with the same parameters.
              If you absolutely need the best performance, you may consider using
              an instance of <see cref="T:Troschuetz.Random.Distributions.Continuous.LognormalDistribution" /> for each group of parameters. 
            </remarks>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="AreValidParams(mu, sigma)" vb="AreValidParams(mu, sigma)">Troschuetz.Random.Distributions.Continuous.LognormalDistribution&lt;TGen&gt;.AreValidParams(mu, sigma)</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">!Troschuetz.Random.Distributions.Continuous.LognormalDistribution&lt;TGen&gt;.AreValidParams(mu, sigma)</exception>
    </member>
    <member name="M:Troschuetz.Random.TRandom`1.Normal(System.Double,System.Double)">
      <summary>
              Returns a normal distributed floating point random number.
            </summary>
      <param name="mu">
              The parameter mu which is used for generation of normal distributed random numbers.
            </param>
      <param name="sigma">
              The parameter sigma which is used for generation of normal distributed random numbers.
            </param>
      <returns>
              A normal distributed floating point random number.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="sigma" /> is less than or equal to zero.
            </exception>
      <remarks>
              This method simply wraps a call to <see cref="M:Troschuetz.Random.Distributions.Continuous.NormalDistribution`1.NextDouble" />,
              with a prior adjustement of the distribution parameters.
            </remarks>
      <remarks>
              This method is slightly more efficient when called with the same parameters.
              If you absolutely need the best performance, you may consider using
              an instance of <see cref="T:Troschuetz.Random.Distributions.Continuous.NormalDistribution" /> for each group of parameters. 
            </remarks>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="AreValidParams(mu, sigma)" vb="AreValidParams(mu, sigma)">Troschuetz.Random.Distributions.Continuous.NormalDistribution&lt;TGen&gt;.AreValidParams(mu, sigma)</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">!Troschuetz.Random.Distributions.Continuous.NormalDistribution&lt;TGen&gt;.AreValidParams(mu, sigma)</exception>
    </member>
    <member name="M:Troschuetz.Random.TRandom`1.NormalSamples(System.Double,System.Double)">
      <summary>
              Returns an infinite sequence of normal distributed floating point random numbers.
            </summary>
      <param name="mu">
              The parameter mu which is used for generation of normal distributed random numbers.
            </param>
      <param name="sigma">
              The parameter sigma which is used for generation of normal distributed random numbers.
            </param>
      <returns>
              An infinite sequence of normal distributed floating point random numbers.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="sigma" /> is less than or equal to zero.
            </exception>
      <remarks>
              This method simply wraps a call to <see cref="M:Troschuetz.Random.Distributions.Continuous.NormalDistribution`1.NextDouble" />,
              with a prior adjustement of the distribution parameters.
            </remarks>
      <remarks>
              This method is slightly more efficient when called with the same parameters.
              If you absolutely need the best performance, you may consider using
              an instance of <see cref="T:Troschuetz.Random.Distributions.Continuous.NormalDistribution" /> for each group of parameters. 
            </remarks>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="AreValidParams(mu, sigma)" vb="AreValidParams(mu, sigma)">Troschuetz.Random.Distributions.Continuous.NormalDistribution&lt;TGen&gt;.AreValidParams(mu, sigma)</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">!Troschuetz.Random.Distributions.Continuous.NormalDistribution&lt;TGen&gt;.AreValidParams(mu, sigma)</exception>
    </member>
    <member name="M:Troschuetz.Random.TRandom`1.Pareto(System.Double,System.Double)">
      <summary>
              Returns a pareto distributed floating point random number.
            </summary>
      <param name="alpha">
              The parameter alpha which is used for generation of pareto distributed random numbers.
            </param>
      <param name="beta">
              The parameter beta which is used for generation of pareto distributed random numbers.
            </param>
      <returns>
              A pareto distributed floating point random number.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> or <paramref name="beta" /> are less than or equal to zero.
            </exception>
      <remarks>
              This method simply wraps a call to <see cref="M:Troschuetz.Random.Distributions.Continuous.ParetoDistribution`1.NextDouble" />,
              with a prior adjustement of the distribution parameters.
            </remarks>
      <remarks>
              This method is slightly more efficient when called with the same parameters.
              If you absolutely need the best performance, you may consider using
              an instance of <see cref="T:Troschuetz.Random.Distributions.Continuous.ParetoDistribution" /> for each group of parameters. 
            </remarks>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="AreValidParams(alpha, beta)" vb="AreValidParams(alpha, beta)">Troschuetz.Random.Distributions.Continuous.ParetoDistribution&lt;TGen&gt;.AreValidParams(alpha, beta)</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">!Troschuetz.Random.Distributions.Continuous.ParetoDistribution&lt;TGen&gt;.AreValidParams(alpha, beta)</exception>
    </member>
    <member name="M:Troschuetz.Random.TRandom`1.ParetoSamples(System.Double,System.Double)">
      <summary>
              Returns an infinite sequence of pareto distributed floating point random numbers.
            </summary>
      <param name="alpha">
              The parameter alpha which is used for generation of pareto distributed random numbers.
            </param>
      <param name="beta">
              The parameter beta which is used for generation of pareto distributed random numbers.
            </param>
      <returns>
              An infinite sequence of pareto distributed floating point random numbers.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> or <paramref name="beta" /> are less than or equal to zero.
            </exception>
      <remarks>
              This method simply wraps a call to <see cref="M:Troschuetz.Random.Distributions.Continuous.ParetoDistribution`1.NextDouble" />,
              with a prior adjustement of the distribution parameters.
            </remarks>
      <remarks>
              This method is slightly more efficient when called with the same parameters.
              If you absolutely need the best performance, you may consider using
              an instance of <see cref="T:Troschuetz.Random.Distributions.Continuous.ParetoDistribution" /> for each group of parameters. 
            </remarks>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="AreValidParams(alpha, beta)" vb="AreValidParams(alpha, beta)">Troschuetz.Random.Distributions.Continuous.ParetoDistribution&lt;TGen&gt;.AreValidParams(alpha, beta)</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">!Troschuetz.Random.Distributions.Continuous.ParetoDistribution&lt;TGen&gt;.AreValidParams(alpha, beta)</exception>
    </member>
    <member name="M:Troschuetz.Random.TRandom`1.Power(System.Double,System.Double)">
      <summary>
              Returns a power distributed floating point random number.
            </summary>
      <param name="alpha">
              The parameter alpha which is used for generation of power distributed random numbers.
            </param>
      <param name="beta">
              The parameter beta which is used for generation of power distributed random numbers.
            </param>
      <returns>
              A power distributed floating point random number.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> or <paramref name="beta" /> are less than or equal to zero.
            </exception>
      <remarks>
              This method simply wraps a call to <see cref="M:Troschuetz.Random.Distributions.Continuous.PowerDistribution`1.NextDouble" />,
              with a prior adjustement of the distribution parameters.
            </remarks>
      <remarks>
              This method is slightly more efficient when called with the same parameters.
              If you absolutely need the best performance, you may consider using
              an instance of <see cref="T:Troschuetz.Random.Distributions.Continuous.PowerDistribution" /> for each group of parameters. 
            </remarks>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="AreValidParams(alpha, beta)" vb="AreValidParams(alpha, beta)">Troschuetz.Random.Distributions.Continuous.PowerDistribution&lt;TGen&gt;.AreValidParams(alpha, beta)</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">!Troschuetz.Random.Distributions.Continuous.PowerDistribution&lt;TGen&gt;.AreValidParams(alpha, beta)</exception>
    </member>
    <member name="M:Troschuetz.Random.TRandom`1.PowerSamples(System.Double,System.Double)">
      <summary>
              Returns an infinite sequence of power distributed floating point random numbers.
            </summary>
      <param name="alpha">
              The parameter alpha which is used for generation of power distributed random numbers.
            </param>
      <param name="beta">
              The parameter beta which is used for generation of power distributed random numbers.
            </param>
      <returns>
              An infinite sequence of power distributed floating point random numbers.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> or <paramref name="beta" /> are less than or equal to zero.
            </exception>
      <remarks>
              This method simply wraps a call to <see cref="M:Troschuetz.Random.Distributions.Continuous.PowerDistribution`1.NextDouble" />,
              with a prior adjustement of the distribution parameters.
            </remarks>
      <remarks>
              This method is slightly more efficient when called with the same parameters.
              If you absolutely need the best performance, you may consider using
              an instance of <see cref="T:Troschuetz.Random.Distributions.Continuous.PowerDistribution" /> for each group of parameters. 
            </remarks>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="AreValidParams(alpha, beta)" vb="AreValidParams(alpha, beta)">Troschuetz.Random.Distributions.Continuous.PowerDistribution&lt;TGen&gt;.AreValidParams(alpha, beta)</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">!Troschuetz.Random.Distributions.Continuous.PowerDistribution&lt;TGen&gt;.AreValidParams(alpha, beta)</exception>
    </member>
    <member name="M:Troschuetz.Random.TRandom`1.Rayleigh(System.Double)">
      <summary>
              Returns a rayleigh distributed floating point random number.
            </summary>
      <param name="sigma">
              The parameter sigma which is used for generation of rayleigh distributed random numbers.
            </param>
      <returns>
              A rayleigh distributed floating point random number.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="sigma" /> is less than or equal to zero.
            </exception>
      <remarks>
              This method simply wraps a call to <see cref="M:Troschuetz.Random.Distributions.Continuous.RayleighDistribution`1.NextDouble" />,
              with a prior adjustement of the distribution parameters.
            </remarks>
      <remarks>
              This method is slightly more efficient when called with the same parameters.
              If you absolutely need the best performance, you may consider using
              an instance of <see cref="T:Troschuetz.Random.Distributions.Continuous.RayleighDistribution" /> for each group of parameters. 
            </remarks>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="IsValidParam(sigma)" vb="IsValidParam(sigma)">Troschuetz.Random.Distributions.Continuous.RayleighDistribution&lt;TGen&gt;.IsValidParam(sigma)</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">!Troschuetz.Random.Distributions.Continuous.RayleighDistribution&lt;TGen&gt;.IsValidParam(sigma)</exception>
    </member>
    <member name="M:Troschuetz.Random.TRandom`1.RayleighSamples(System.Double)">
      <summary>
              Returns an infinite sequence of rayleigh distributed floating point random numbers.
            </summary>
      <param name="sigma">
              The parameter sigma which is used for generation of rayleigh distributed random numbers.
            </param>
      <returns>
              An infinite sequence of rayleigh distributed floating point random numbers.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="sigma" /> is less than or equal to zero.
            </exception>
      <remarks>
              This method simply wraps a call to <see cref="M:Troschuetz.Random.Distributions.Continuous.RayleighDistribution`1.NextDouble" />,
              with a prior adjustement of the distribution parameters.
            </remarks>
      <remarks>
              This method is slightly more efficient when called with the same parameters.
              If you absolutely need the best performance, you may consider using
              an instance of <see cref="T:Troschuetz.Random.Distributions.Continuous.RayleighDistribution" /> for each group of parameters. 
            </remarks>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="IsValidParam(sigma)" vb="IsValidParam(sigma)">Troschuetz.Random.Distributions.Continuous.RayleighDistribution&lt;TGen&gt;.IsValidParam(sigma)</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">!Troschuetz.Random.Distributions.Continuous.RayleighDistribution&lt;TGen&gt;.IsValidParam(sigma)</exception>
    </member>
    <member name="M:Troschuetz.Random.TRandom`1.StudentsT(System.Int32)">
      <summary>
              Returns a student's t distributed floating point random number.
            </summary>
      <param name="nu">
              The parameter nu which is used for generation of student's t distributed random numbers.
            </param>
      <returns>
              A student's t distributed floating point random number.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="nu" /> is less than or equal to zero.
            </exception>
      <remarks>
              This method simply wraps a call to <see cref="M:Troschuetz.Random.Distributions.Continuous.StudentsTDistribution`1.NextDouble" />,
              with a prior adjustement of the distribution parameters.
            </remarks>
      <remarks>
              This method is slightly more efficient when called with the same parameters.
              If you absolutely need the best performance, you may consider using
              an instance of <see cref="T:Troschuetz.Random.Distributions.Continuous.StudentsTDistribution" /> for each group of parameters. 
            </remarks>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="IsValidParam(nu)" vb="IsValidParam(nu)">Troschuetz.Random.Distributions.Continuous.StudentsTDistribution&lt;TGen&gt;.IsValidParam(nu)</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">!Troschuetz.Random.Distributions.Continuous.StudentsTDistribution&lt;TGen&gt;.IsValidParam(nu)</exception>
    </member>
    <member name="M:Troschuetz.Random.TRandom`1.StudentsTSamples(System.Int32)">
      <summary>
              Returns an infinite sequence of student's t distributed floating point random numbers.
            </summary>
      <param name="nu">
              The parameter nu which is used for generation of student's t distributed random numbers.
            </param>
      <returns>
              An infinite sequence of student's t distributed floating point random numbers.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="nu" /> is less than or equal to zero.
            </exception>
      <remarks>
              This method simply wraps a call to <see cref="M:Troschuetz.Random.Distributions.Continuous.StudentsTDistribution`1.NextDouble" />,
              with a prior adjustement of the distribution parameters.
            </remarks>
      <remarks>
              This method is slightly more efficient when called with the same parameters.
              If you absolutely need the best performance, you may consider using
              an instance of <see cref="T:Troschuetz.Random.Distributions.Continuous.StudentsTDistribution" /> for each group of parameters. 
            </remarks>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="IsValidParam(nu)" vb="IsValidParam(nu)">Troschuetz.Random.Distributions.Continuous.StudentsTDistribution&lt;TGen&gt;.IsValidParam(nu)</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">!Troschuetz.Random.Distributions.Continuous.StudentsTDistribution&lt;TGen&gt;.IsValidParam(nu)</exception>
    </member>
    <member name="M:Troschuetz.Random.TRandom`1.Triangular(System.Double,System.Double,System.Double)">
      <summary>
              Returns a triangular distributed floating point random number.
            </summary>
      <param name="alpha">
              The parameter alpha which is used for generation of triangular distributed random numbers.
            </param>
      <param name="beta">
              The parameter beta which is used for generation of triangular distributed random numbers.
            </param>
      <param name="gamma">
              The parameter gamma which is used for generation of triangular distributed random numbers.
            </param>
      <returns>
              A triangular distributed floating point random number.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> is greater than or equal to <paramref name="beta" />,
              or <paramref name="alpha" /> is greater than <paramref name="gamma" />,
              or <paramref name="beta" /> is less than <paramref name="gamma" />.
            </exception>
      <remarks>
              This method simply wraps a call to <see cref="M:Troschuetz.Random.Distributions.Continuous.TriangularDistribution`1.NextDouble" />,
              with a prior adjustement of the distribution parameters.
            </remarks>
      <remarks>
              This method is slightly more efficient when called with the same parameters.
              If you absolutely need the best performance, you may consider using
              an instance of <see cref="T:Troschuetz.Random.Distributions.Continuous.TriangularDistribution" /> for each group of parameters. 
            </remarks>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="AreValidParams(alpha, beta, gamma)" vb="AreValidParams(alpha, beta, gamma)">Troschuetz.Random.Distributions.Continuous.TriangularDistribution&lt;TGen&gt;.AreValidParams(alpha, beta, gamma)</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">!Troschuetz.Random.Distributions.Continuous.TriangularDistribution&lt;TGen&gt;.AreValidParams(alpha, beta, gamma)</exception>
    </member>
    <member name="M:Troschuetz.Random.TRandom`1.TriangularSamples(System.Double,System.Double,System.Double)">
      <summary>
              Returns an infinite sequence of triangular distributed floating point random numbers.
            </summary>
      <param name="alpha">
              The parameter alpha which is used for generation of triangular distributed random numbers.
            </param>
      <param name="beta">
              The parameter beta which is used for generation of triangular distributed random numbers.
            </param>
      <param name="gamma">
              The parameter gamma which is used for generation of triangular distributed random numbers.
            </param>
      <returns>
              An infinite sequence of triangular distributed floating point random numbers.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> is greater than or equal to <paramref name="beta" />,
              or <paramref name="alpha" /> is greater than <paramref name="gamma" />,
              or <paramref name="beta" /> is less than <paramref name="gamma" />.
            </exception>
      <remarks>
              This method simply wraps a call to <see cref="M:Troschuetz.Random.Distributions.Continuous.TriangularDistribution`1.NextDouble" />,
              with a prior adjustement of the distribution parameters.
            </remarks>
      <remarks>
              This method is slightly more efficient when called with the same parameters.
              If you absolutely need the best performance, you may consider using
              an instance of <see cref="T:Troschuetz.Random.Distributions.Continuous.TriangularDistribution" /> for each group of parameters. 
            </remarks>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="AreValidParams(alpha, beta, gamma)" vb="AreValidParams(alpha, beta, gamma)">Troschuetz.Random.Distributions.Continuous.TriangularDistribution&lt;TGen&gt;.AreValidParams(alpha, beta, gamma)</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">!Troschuetz.Random.Distributions.Continuous.TriangularDistribution&lt;TGen&gt;.AreValidParams(alpha, beta, gamma)</exception>
    </member>
    <member name="M:Troschuetz.Random.TRandom`1.Weibull(System.Double,System.Double)">
      <summary>
              Returns a weibull distributed floating point random number.
            </summary>
      <param name="alpha">
              The parameter alpha which is used for generation of weibull distributed random numbers.
            </param>
      <param name="lambda">
              The parameter lambda which is used for generation of weibull distributed random numbers.
            </param>
      <returns>
              A weibull distributed floating point random number.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> or <paramref name="lambda" /> are less than or equal to zero. 
            </exception>
      <remarks>
              This method simply wraps a call to <see cref="M:Troschuetz.Random.Distributions.Continuous.WeibullDistribution`1.NextDouble" />,
              with a prior adjustement of the distribution parameters.
            </remarks>
      <remarks>
              This method is slightly more efficient when called with the same parameters.
              If you absolutely need the best performance, you may consider using
              an instance of <see cref="T:Troschuetz.Random.Distributions.Continuous.WeibullDistribution" /> for each group of parameters. 
            </remarks>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="AreValidParams(alpha, lambda)" vb="AreValidParams(alpha, lambda)">Troschuetz.Random.Distributions.Continuous.WeibullDistribution&lt;TGen&gt;.AreValidParams(alpha, lambda)</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">!Troschuetz.Random.Distributions.Continuous.WeibullDistribution&lt;TGen&gt;.AreValidParams(alpha, lambda)</exception>
    </member>
    <member name="M:Troschuetz.Random.TRandom`1.WeibullSamples(System.Double,System.Double)">
      <summary>
              Returns an infinite sequence of weibull distributed floating point random numbers.
            </summary>
      <param name="alpha">
              The parameter alpha which is used for generation of weibull distributed random numbers.
            </param>
      <param name="lambda">
              The parameter lambda which is used for generation of weibull distributed random numbers.
            </param>
      <returns>
              An infinite sequence of weibull distributed floating point random numbers.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="alpha" /> or <paramref name="lambda" /> are less than or equal to zero. 
            </exception>
      <remarks>
              This method simply wraps a call to <see cref="M:Troschuetz.Random.Distributions.Continuous.WeibullDistribution`1.NextDouble" />,
              with a prior adjustement of the distribution parameters.
            </remarks>
      <remarks>
              This method is slightly more efficient when called with the same parameters.
              If you absolutely need the best performance, you may consider using
              an instance of <see cref="T:Troschuetz.Random.Distributions.Continuous.WeibullDistribution" /> for each group of parameters. 
            </remarks>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="AreValidParams(alpha, lambda)" vb="AreValidParams(alpha, lambda)">Troschuetz.Random.Distributions.Continuous.WeibullDistribution&lt;TGen&gt;.AreValidParams(alpha, lambda)</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">!Troschuetz.Random.Distributions.Continuous.WeibullDistribution&lt;TGen&gt;.AreValidParams(alpha, lambda)</exception>
    </member>
    <member name="T:Troschuetz.Random.TRandom">
      <summary>
              A random generator class similar to the one Python offers, 
              providing functions similar to the ones found in <see cref="T:System.Random" />
              and functions returning random numbers according to a particular kind of distribution.
            </summary>
    </member>
    <member name="M:Troschuetz.Random.TRandom.#ctor">
      <summary>
              Constructs a new instance with <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> as underlying generator
              and the default seed (which corresponds to <see cref="P:System.Environment.TickCount" />).
            </summary>
    </member>
    <member name="M:Troschuetz.Random.TRandom.#ctor(System.Int32)">
      <summary>
              Constructs a new instance with <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> as underlying generator
              and the specified seed.
            </summary>
      <param name="seed">The seed used to initialize the generator.</param>
    </member>
    <member name="M:Troschuetz.Random.TRandom.#ctor(System.UInt32)">
      <summary>
              Constructs a new instance with <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> as underlying generator
              and the specified seed.
            </summary>
      <param name="seed">The seed used to initialize the generator.</param>
    </member>
    <member name="M:Troschuetz.Random.TRandom.#ctor(Troschuetz.Random.IGenerator)">
      <summary>
              Constructs a new instance with the specified generator.
            </summary>
      <param name="generator">The generator used to produce random numbers.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="generator" /> is null.</exception>
    </member>
    <member name="M:Troschuetz.Random.TRandom.New">
      <summary>
              Constructs a new instance with <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> as underlying generator
              and the default seed (which corresponds to <see cref="P:System.Environment.TickCount" />).
            </summary>
    </member>
    <member name="M:Troschuetz.Random.TRandom.New(System.Int32)">
      <summary>
              Constructs a new instance with <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> as underlying generator
              and the specified seed.
            </summary>
      <param name="seed">The seed used to initialize the generator.</param>
    </member>
    <member name="M:Troschuetz.Random.TRandom.New(System.UInt32)">
      <summary>
              Constructs a new instance with <see cref="T:Troschuetz.Random.Generators.XorShift128Generator" /> as underlying generator
              and the specified seed.
            </summary>
      <param name="seed">The seed used to initialize the generator.</param>
    </member>
    <member name="M:Troschuetz.Random.TRandom.New``1(``0)">
      <summary>
              Constructs a new instance with the specified generator.
            </summary>
      <param name="generator">The generator used to produce random numbers.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="generator" /> is null.</exception>
    </member>
    <member name="M:Troschuetz.Random.Generators.MT19937Generator.Reset">
      <ensures inheritedFrom="M:Troschuetz.Random.IGenerator.Reset" inheritedFromTypeName="IGenerator" csharp="result == this.CanReset" vb="result = Me.CanReset">result == this.CanReset</ensures>
    </member>
    <member name="M:Troschuetz.Random.Generators.MT19937Generator.Next">
      <ensures inheritedFrom="M:Troschuetz.Random.IGenerator.Next" inheritedFromTypeName="IGenerator" csharp="result &gt;= 0 &amp;&amp; result &lt; int.MaxValue" vb="result &gt;= 0 AndAlso result &lt; int.MaxValue">result &gt;= 0 &amp;&amp; result &lt; int.MaxValue</ensures>
    </member>
    <member name="M:Troschuetz.Random.Generators.MT19937Generator.NextInclusiveMaxValue">
      <ensures inheritedFrom="M:Troschuetz.Random.IGenerator.NextInclusiveMaxValue" inheritedFromTypeName="IGenerator" csharp="result &gt;= 0 &amp;&amp; !(result &gt; int.MaxValue)" vb="result &gt;= 0 AndAlso Not result &gt; int.MaxValue">result &gt;= 0 &amp;&amp; !(result &gt; int.MaxValue)</ensures>
    </member>
    <member name="M:Troschuetz.Random.Generators.MT19937Generator.Next(System.Int32)">
      <requires inheritedFrom="M:Troschuetz.Random.IGenerator.Next(System.Int32)" inheritedFromTypeName="IGenerator" exception="T:System.ArgumentOutOfRangeException" csharp="maxValue &gt;= 0" vb="maxValue &gt;= 0">maxValue &gt;= 0</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">maxValue &lt; 0</exception>
      <ensures inheritedFrom="M:Troschuetz.Random.IGenerator.Next(System.Int32)" inheritedFromTypeName="IGenerator" csharp="result &gt;= 0 &amp;&amp; result &lt; maxValue" vb="result &gt;= 0 AndAlso result &lt; maxValue">result &gt;= 0 &amp;&amp; result &lt; maxValue</ensures>
    </member>
    <member name="M:Troschuetz.Random.Generators.MT19937Generator.Next(System.Int32,System.Int32)">
      <requires inheritedFrom="M:Troschuetz.Random.IGenerator.Next(System.Int32,System.Int32)" inheritedFromTypeName="IGenerator" exception="T:System.ArgumentOutOfRangeException" csharp="maxValue &gt;= minValue" vb="maxValue &gt;= minValue">maxValue &gt;= minValue</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">maxValue &lt; minValue</exception>
      <ensures inheritedFrom="M:Troschuetz.Random.IGenerator.Next(System.Int32,System.Int32)" inheritedFromTypeName="IGenerator" csharp="result &gt;= minValue &amp;&amp; result &lt; maxValue" vb="result &gt;= minValue AndAlso result &lt; maxValue">result &gt;= minValue &amp;&amp; result &lt; maxValue</ensures>
    </member>
    <member name="M:Troschuetz.Random.Generators.MT19937Generator.NextDouble">
      <ensures inheritedFrom="M:Troschuetz.Random.IGenerator.NextDouble" inheritedFromTypeName="IGenerator" csharp="result &gt;= 0.0 &amp;&amp; result &lt; 1.0" vb="result &gt;= 0 AndAlso result &lt; 1">result &gt;= 0.0 &amp;&amp; result &lt; 1.0</ensures>
    </member>
    <member name="M:Troschuetz.Random.Generators.MT19937Generator.NextDouble(System.Double)">
      <requires inheritedFrom="M:Troschuetz.Random.IGenerator.NextDouble(System.Double)" inheritedFromTypeName="IGenerator" exception="T:System.ArgumentOutOfRangeException" csharp="maxValue &gt;= 0.0" vb="maxValue &gt;= 0">maxValue &gt;= 0.0</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">maxValue &lt; 0.0</exception>
      <requires inheritedFrom="M:Troschuetz.Random.IGenerator.NextDouble(System.Double)" inheritedFromTypeName="IGenerator" exception="T:System.ArgumentException" csharp="!IsPositiveInfinity(maxValue)" vb="Not IsPositiveInfinity(maxValue)">!double.IsPositiveInfinity(maxValue)</requires>
      <exception cref="T:System.ArgumentException">double.IsPositiveInfinity(maxValue)</exception>
      <ensures inheritedFrom="M:Troschuetz.Random.IGenerator.NextDouble(System.Double)" inheritedFromTypeName="IGenerator" csharp="result &gt;= 0.0 &amp;&amp; result &lt; maxValue" vb="result &gt;= 0 AndAlso result &lt; maxValue">result &gt;= 0.0 &amp;&amp; result &lt; maxValue</ensures>
    </member>
    <member name="M:Troschuetz.Random.Generators.MT19937Generator.NextDouble(System.Double,System.Double)">
      <requires inheritedFrom="M:Troschuetz.Random.IGenerator.NextDouble(System.Double,System.Double)" inheritedFromTypeName="IGenerator" exception="T:System.ArgumentOutOfRangeException" csharp="maxValue &gt;= minValue" vb="maxValue &gt;= minValue">maxValue &gt;= minValue</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">maxValue &lt; minValue</exception>
      <requires inheritedFrom="M:Troschuetz.Random.IGenerator.NextDouble(System.Double,System.Double)" inheritedFromTypeName="IGenerator" exception="T:System.ArgumentException" csharp="!IsPositiveInfinity((maxValue - minValue))" vb="Not IsPositiveInfinity(maxValue - minValue)">!double.IsPositiveInfinity((maxValue - minValue))</requires>
      <exception cref="T:System.ArgumentException">double.IsPositiveInfinity(maxValue - minValue)</exception>
      <ensures inheritedFrom="M:Troschuetz.Random.IGenerator.NextDouble(System.Double,System.Double)" inheritedFromTypeName="IGenerator" csharp="result &gt;= minValue &amp;&amp; result &lt; maxValue" vb="result &gt;= minValue AndAlso result &lt; maxValue">result &gt;= minValue &amp;&amp; result &lt; maxValue</ensures>
    </member>
    <member name="M:Troschuetz.Random.Generators.MT19937Generator.NextUInt">
      <ensures inheritedFrom="M:Troschuetz.Random.IGenerator.NextUInt" inheritedFromTypeName="IGenerator" csharp="result &lt;= -1" vb="result &lt;= -1">result &lt;= -1</ensures>
    </member>
    <member name="M:Troschuetz.Random.Generators.MT19937Generator.NextUInt(System.UInt32)">
      <ensures inheritedFrom="M:Troschuetz.Random.IGenerator.NextUInt(System.UInt32)" inheritedFromTypeName="IGenerator" csharp="result &lt; maxValue" vb="result &lt; maxValue">result &lt; maxValue</ensures>
    </member>
    <member name="M:Troschuetz.Random.Generators.MT19937Generator.NextUInt(System.UInt32,System.UInt32)">
      <requires inheritedFrom="M:Troschuetz.Random.IGenerator.NextUInt(System.UInt32,System.UInt32)" inheritedFromTypeName="IGenerator" exception="T:System.ArgumentOutOfRangeException" csharp="maxValue &gt;= minValue" vb="maxValue &gt;= minValue">maxValue &gt;= minValue</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">maxValue &lt; minValue</exception>
      <ensures inheritedFrom="M:Troschuetz.Random.IGenerator.NextUInt(System.UInt32,System.UInt32)" inheritedFromTypeName="IGenerator" csharp="result &gt;= minValue &amp;&amp; result &lt; maxValue" vb="result &gt;= minValue AndAlso result &lt; maxValue">result &gt;= minValue &amp;&amp; result &lt; maxValue</ensures>
    </member>
    <member name="M:Troschuetz.Random.Generators.MT19937Generator.NextBytes(System.Byte[])">
      <requires inheritedFrom="M:Troschuetz.Random.IGenerator.NextBytes(System.Byte[])" inheritedFromTypeName="IGenerator" exception="T:System.ArgumentNullException" csharp="buffer != null" vb="buffer &lt;&gt; Nothing">buffer != null</requires>
      <exception cref="T:System.ArgumentNullException">buffer == null</exception>
    </member>
    <member name="M:Troschuetz.Random.Generators.ALFGenerator.Reset">
      <ensures inheritedFrom="M:Troschuetz.Random.IGenerator.Reset" inheritedFromTypeName="IGenerator" csharp="result == this.CanReset" vb="result = Me.CanReset">result == this.CanReset</ensures>
    </member>
    <member name="M:Troschuetz.Random.Generators.ALFGenerator.Next">
      <ensures inheritedFrom="M:Troschuetz.Random.IGenerator.Next" inheritedFromTypeName="IGenerator" csharp="result &gt;= 0 &amp;&amp; result &lt; int.MaxValue" vb="result &gt;= 0 AndAlso result &lt; int.MaxValue">result &gt;= 0 &amp;&amp; result &lt; int.MaxValue</ensures>
    </member>
    <member name="M:Troschuetz.Random.Generators.ALFGenerator.NextInclusiveMaxValue">
      <ensures inheritedFrom="M:Troschuetz.Random.IGenerator.NextInclusiveMaxValue" inheritedFromTypeName="IGenerator" csharp="result &gt;= 0 &amp;&amp; !(result &gt; int.MaxValue)" vb="result &gt;= 0 AndAlso Not result &gt; int.MaxValue">result &gt;= 0 &amp;&amp; !(result &gt; int.MaxValue)</ensures>
    </member>
    <member name="M:Troschuetz.Random.Generators.ALFGenerator.Next(System.Int32)">
      <requires inheritedFrom="M:Troschuetz.Random.IGenerator.Next(System.Int32)" inheritedFromTypeName="IGenerator" exception="T:System.ArgumentOutOfRangeException" csharp="maxValue &gt;= 0" vb="maxValue &gt;= 0">maxValue &gt;= 0</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">maxValue &lt; 0</exception>
      <ensures inheritedFrom="M:Troschuetz.Random.IGenerator.Next(System.Int32)" inheritedFromTypeName="IGenerator" csharp="result &gt;= 0 &amp;&amp; result &lt; maxValue" vb="result &gt;= 0 AndAlso result &lt; maxValue">result &gt;= 0 &amp;&amp; result &lt; maxValue</ensures>
    </member>
    <member name="M:Troschuetz.Random.Generators.ALFGenerator.Next(System.Int32,System.Int32)">
      <requires inheritedFrom="M:Troschuetz.Random.IGenerator.Next(System.Int32,System.Int32)" inheritedFromTypeName="IGenerator" exception="T:System.ArgumentOutOfRangeException" csharp="maxValue &gt;= minValue" vb="maxValue &gt;= minValue">maxValue &gt;= minValue</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">maxValue &lt; minValue</exception>
      <ensures inheritedFrom="M:Troschuetz.Random.IGenerator.Next(System.Int32,System.Int32)" inheritedFromTypeName="IGenerator" csharp="result &gt;= minValue &amp;&amp; result &lt; maxValue" vb="result &gt;= minValue AndAlso result &lt; maxValue">result &gt;= minValue &amp;&amp; result &lt; maxValue</ensures>
    </member>
    <member name="M:Troschuetz.Random.Generators.ALFGenerator.NextDouble">
      <ensures inheritedFrom="M:Troschuetz.Random.IGenerator.NextDouble" inheritedFromTypeName="IGenerator" csharp="result &gt;= 0.0 &amp;&amp; result &lt; 1.0" vb="result &gt;= 0 AndAlso result &lt; 1">result &gt;= 0.0 &amp;&amp; result &lt; 1.0</ensures>
    </member>
    <member name="M:Troschuetz.Random.Generators.ALFGenerator.NextDouble(System.Double)">
      <requires inheritedFrom="M:Troschuetz.Random.IGenerator.NextDouble(System.Double)" inheritedFromTypeName="IGenerator" exception="T:System.ArgumentOutOfRangeException" csharp="maxValue &gt;= 0.0" vb="maxValue &gt;= 0">maxValue &gt;= 0.0</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">maxValue &lt; 0.0</exception>
      <requires inheritedFrom="M:Troschuetz.Random.IGenerator.NextDouble(System.Double)" inheritedFromTypeName="IGenerator" exception="T:System.ArgumentException" csharp="!IsPositiveInfinity(maxValue)" vb="Not IsPositiveInfinity(maxValue)">!double.IsPositiveInfinity(maxValue)</requires>
      <exception cref="T:System.ArgumentException">double.IsPositiveInfinity(maxValue)</exception>
      <ensures inheritedFrom="M:Troschuetz.Random.IGenerator.NextDouble(System.Double)" inheritedFromTypeName="IGenerator" csharp="result &gt;= 0.0 &amp;&amp; result &lt; maxValue" vb="result &gt;= 0 AndAlso result &lt; maxValue">result &gt;= 0.0 &amp;&amp; result &lt; maxValue</ensures>
    </member>
    <member name="M:Troschuetz.Random.Generators.ALFGenerator.NextDouble(System.Double,System.Double)">
      <requires inheritedFrom="M:Troschuetz.Random.IGenerator.NextDouble(System.Double,System.Double)" inheritedFromTypeName="IGenerator" exception="T:System.ArgumentOutOfRangeException" csharp="maxValue &gt;= minValue" vb="maxValue &gt;= minValue">maxValue &gt;= minValue</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">maxValue &lt; minValue</exception>
      <requires inheritedFrom="M:Troschuetz.Random.IGenerator.NextDouble(System.Double,System.Double)" inheritedFromTypeName="IGenerator" exception="T:System.ArgumentException" csharp="!IsPositiveInfinity((maxValue - minValue))" vb="Not IsPositiveInfinity(maxValue - minValue)">!double.IsPositiveInfinity((maxValue - minValue))</requires>
      <exception cref="T:System.ArgumentException">double.IsPositiveInfinity(maxValue - minValue)</exception>
      <ensures inheritedFrom="M:Troschuetz.Random.IGenerator.NextDouble(System.Double,System.Double)" inheritedFromTypeName="IGenerator" csharp="result &gt;= minValue &amp;&amp; result &lt; maxValue" vb="result &gt;= minValue AndAlso result &lt; maxValue">result &gt;= minValue &amp;&amp; result &lt; maxValue</ensures>
    </member>
    <member name="M:Troschuetz.Random.Generators.ALFGenerator.NextUInt">
      <ensures inheritedFrom="M:Troschuetz.Random.IGenerator.NextUInt" inheritedFromTypeName="IGenerator" csharp="result &lt;= -1" vb="result &lt;= -1">result &lt;= -1</ensures>
    </member>
    <member name="M:Troschuetz.Random.Generators.ALFGenerator.NextUInt(System.UInt32)">
      <ensures inheritedFrom="M:Troschuetz.Random.IGenerator.NextUInt(System.UInt32)" inheritedFromTypeName="IGenerator" csharp="result &lt; maxValue" vb="result &lt; maxValue">result &lt; maxValue</ensures>
    </member>
    <member name="M:Troschuetz.Random.Generators.ALFGenerator.NextUInt(System.UInt32,System.UInt32)">
      <requires inheritedFrom="M:Troschuetz.Random.IGenerator.NextUInt(System.UInt32,System.UInt32)" inheritedFromTypeName="IGenerator" exception="T:System.ArgumentOutOfRangeException" csharp="maxValue &gt;= minValue" vb="maxValue &gt;= minValue">maxValue &gt;= minValue</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">maxValue &lt; minValue</exception>
      <ensures inheritedFrom="M:Troschuetz.Random.IGenerator.NextUInt(System.UInt32,System.UInt32)" inheritedFromTypeName="IGenerator" csharp="result &gt;= minValue &amp;&amp; result &lt; maxValue" vb="result &gt;= minValue AndAlso result &lt; maxValue">result &gt;= minValue &amp;&amp; result &lt; maxValue</ensures>
    </member>
    <member name="M:Troschuetz.Random.Generators.ALFGenerator.NextBytes(System.Byte[])">
      <requires inheritedFrom="M:Troschuetz.Random.IGenerator.NextBytes(System.Byte[])" inheritedFromTypeName="IGenerator" exception="T:System.ArgumentNullException" csharp="buffer != null" vb="buffer &lt;&gt; Nothing">buffer != null</requires>
      <exception cref="T:System.ArgumentNullException">buffer == null</exception>
    </member>
    <member name="M:Troschuetz.Random.Generators.XorShift128Generator.Reset">
      <ensures inheritedFrom="M:Troschuetz.Random.IGenerator.Reset" inheritedFromTypeName="IGenerator" csharp="result == this.CanReset" vb="result = Me.CanReset">result == this.CanReset</ensures>
    </member>
    <member name="M:Troschuetz.Random.Generators.XorShift128Generator.Next">
      <ensures inheritedFrom="M:Troschuetz.Random.IGenerator.Next" inheritedFromTypeName="IGenerator" csharp="result &gt;= 0 &amp;&amp; result &lt; int.MaxValue" vb="result &gt;= 0 AndAlso result &lt; int.MaxValue">result &gt;= 0 &amp;&amp; result &lt; int.MaxValue</ensures>
    </member>
    <member name="M:Troschuetz.Random.Generators.XorShift128Generator.NextInclusiveMaxValue">
      <ensures inheritedFrom="M:Troschuetz.Random.IGenerator.NextInclusiveMaxValue" inheritedFromTypeName="IGenerator" csharp="result &gt;= 0 &amp;&amp; !(result &gt; int.MaxValue)" vb="result &gt;= 0 AndAlso Not result &gt; int.MaxValue">result &gt;= 0 &amp;&amp; !(result &gt; int.MaxValue)</ensures>
    </member>
    <member name="M:Troschuetz.Random.Generators.XorShift128Generator.Next(System.Int32)">
      <requires inheritedFrom="M:Troschuetz.Random.IGenerator.Next(System.Int32)" inheritedFromTypeName="IGenerator" exception="T:System.ArgumentOutOfRangeException" csharp="maxValue &gt;= 0" vb="maxValue &gt;= 0">maxValue &gt;= 0</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">maxValue &lt; 0</exception>
      <ensures inheritedFrom="M:Troschuetz.Random.IGenerator.Next(System.Int32)" inheritedFromTypeName="IGenerator" csharp="result &gt;= 0 &amp;&amp; result &lt; maxValue" vb="result &gt;= 0 AndAlso result &lt; maxValue">result &gt;= 0 &amp;&amp; result &lt; maxValue</ensures>
    </member>
    <member name="M:Troschuetz.Random.Generators.XorShift128Generator.Next(System.Int32,System.Int32)">
      <requires inheritedFrom="M:Troschuetz.Random.IGenerator.Next(System.Int32,System.Int32)" inheritedFromTypeName="IGenerator" exception="T:System.ArgumentOutOfRangeException" csharp="maxValue &gt;= minValue" vb="maxValue &gt;= minValue">maxValue &gt;= minValue</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">maxValue &lt; minValue</exception>
      <ensures inheritedFrom="M:Troschuetz.Random.IGenerator.Next(System.Int32,System.Int32)" inheritedFromTypeName="IGenerator" csharp="result &gt;= minValue &amp;&amp; result &lt; maxValue" vb="result &gt;= minValue AndAlso result &lt; maxValue">result &gt;= minValue &amp;&amp; result &lt; maxValue</ensures>
    </member>
    <member name="M:Troschuetz.Random.Generators.XorShift128Generator.NextDouble">
      <ensures inheritedFrom="M:Troschuetz.Random.IGenerator.NextDouble" inheritedFromTypeName="IGenerator" csharp="result &gt;= 0.0 &amp;&amp; result &lt; 1.0" vb="result &gt;= 0 AndAlso result &lt; 1">result &gt;= 0.0 &amp;&amp; result &lt; 1.0</ensures>
    </member>
    <member name="M:Troschuetz.Random.Generators.XorShift128Generator.NextDouble(System.Double)">
      <requires inheritedFrom="M:Troschuetz.Random.IGenerator.NextDouble(System.Double)" inheritedFromTypeName="IGenerator" exception="T:System.ArgumentOutOfRangeException" csharp="maxValue &gt;= 0.0" vb="maxValue &gt;= 0">maxValue &gt;= 0.0</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">maxValue &lt; 0.0</exception>
      <requires inheritedFrom="M:Troschuetz.Random.IGenerator.NextDouble(System.Double)" inheritedFromTypeName="IGenerator" exception="T:System.ArgumentException" csharp="!IsPositiveInfinity(maxValue)" vb="Not IsPositiveInfinity(maxValue)">!double.IsPositiveInfinity(maxValue)</requires>
      <exception cref="T:System.ArgumentException">double.IsPositiveInfinity(maxValue)</exception>
      <ensures inheritedFrom="M:Troschuetz.Random.IGenerator.NextDouble(System.Double)" inheritedFromTypeName="IGenerator" csharp="result &gt;= 0.0 &amp;&amp; result &lt; maxValue" vb="result &gt;= 0 AndAlso result &lt; maxValue">result &gt;= 0.0 &amp;&amp; result &lt; maxValue</ensures>
    </member>
    <member name="M:Troschuetz.Random.Generators.XorShift128Generator.NextDouble(System.Double,System.Double)">
      <requires inheritedFrom="M:Troschuetz.Random.IGenerator.NextDouble(System.Double,System.Double)" inheritedFromTypeName="IGenerator" exception="T:System.ArgumentOutOfRangeException" csharp="maxValue &gt;= minValue" vb="maxValue &gt;= minValue">maxValue &gt;= minValue</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">maxValue &lt; minValue</exception>
      <requires inheritedFrom="M:Troschuetz.Random.IGenerator.NextDouble(System.Double,System.Double)" inheritedFromTypeName="IGenerator" exception="T:System.ArgumentException" csharp="!IsPositiveInfinity((maxValue - minValue))" vb="Not IsPositiveInfinity(maxValue - minValue)">!double.IsPositiveInfinity((maxValue - minValue))</requires>
      <exception cref="T:System.ArgumentException">double.IsPositiveInfinity(maxValue - minValue)</exception>
      <ensures inheritedFrom="M:Troschuetz.Random.IGenerator.NextDouble(System.Double,System.Double)" inheritedFromTypeName="IGenerator" csharp="result &gt;= minValue &amp;&amp; result &lt; maxValue" vb="result &gt;= minValue AndAlso result &lt; maxValue">result &gt;= minValue &amp;&amp; result &lt; maxValue</ensures>
    </member>
    <member name="M:Troschuetz.Random.Generators.XorShift128Generator.NextUInt">
      <ensures inheritedFrom="M:Troschuetz.Random.IGenerator.NextUInt" inheritedFromTypeName="IGenerator" csharp="result &lt;= -1" vb="result &lt;= -1">result &lt;= -1</ensures>
    </member>
    <member name="M:Troschuetz.Random.Generators.XorShift128Generator.NextUInt(System.UInt32)">
      <ensures inheritedFrom="M:Troschuetz.Random.IGenerator.NextUInt(System.UInt32)" inheritedFromTypeName="IGenerator" csharp="result &lt; maxValue" vb="result &lt; maxValue">result &lt; maxValue</ensures>
    </member>
    <member name="M:Troschuetz.Random.Generators.XorShift128Generator.NextUInt(System.UInt32,System.UInt32)">
      <requires inheritedFrom="M:Troschuetz.Random.IGenerator.NextUInt(System.UInt32,System.UInt32)" inheritedFromTypeName="IGenerator" exception="T:System.ArgumentOutOfRangeException" csharp="maxValue &gt;= minValue" vb="maxValue &gt;= minValue">maxValue &gt;= minValue</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">maxValue &lt; minValue</exception>
      <ensures inheritedFrom="M:Troschuetz.Random.IGenerator.NextUInt(System.UInt32,System.UInt32)" inheritedFromTypeName="IGenerator" csharp="result &gt;= minValue &amp;&amp; result &lt; maxValue" vb="result &gt;= minValue AndAlso result &lt; maxValue">result &gt;= minValue &amp;&amp; result &lt; maxValue</ensures>
    </member>
    <member name="M:Troschuetz.Random.Generators.XorShift128Generator.NextBytes(System.Byte[])">
      <requires inheritedFrom="M:Troschuetz.Random.IGenerator.NextBytes(System.Byte[])" inheritedFromTypeName="IGenerator" exception="T:System.ArgumentNullException" csharp="buffer != null" vb="buffer &lt;&gt; Nothing">buffer != null</requires>
      <exception cref="T:System.ArgumentNullException">buffer == null</exception>
    </member>
    <member name="M:Troschuetz.Random.Generators.StandardGenerator.Reset">
      <ensures inheritedFrom="M:Troschuetz.Random.IGenerator.Reset" inheritedFromTypeName="IGenerator" csharp="result == this.CanReset" vb="result = Me.CanReset">result == this.CanReset</ensures>
    </member>
    <member name="M:Troschuetz.Random.Generators.StandardGenerator.Next">
      <ensures inheritedFrom="M:Troschuetz.Random.IGenerator.Next" inheritedFromTypeName="IGenerator" csharp="result &gt;= 0 &amp;&amp; result &lt; int.MaxValue" vb="result &gt;= 0 AndAlso result &lt; int.MaxValue">result &gt;= 0 &amp;&amp; result &lt; int.MaxValue</ensures>
    </member>
    <member name="M:Troschuetz.Random.Generators.StandardGenerator.NextInclusiveMaxValue">
      <ensures inheritedFrom="M:Troschuetz.Random.IGenerator.NextInclusiveMaxValue" inheritedFromTypeName="IGenerator" csharp="result &gt;= 0 &amp;&amp; !(result &gt; int.MaxValue)" vb="result &gt;= 0 AndAlso Not result &gt; int.MaxValue">result &gt;= 0 &amp;&amp; !(result &gt; int.MaxValue)</ensures>
    </member>
    <member name="M:Troschuetz.Random.Generators.StandardGenerator.Next(System.Int32)">
      <requires inheritedFrom="M:Troschuetz.Random.IGenerator.Next(System.Int32)" inheritedFromTypeName="IGenerator" exception="T:System.ArgumentOutOfRangeException" csharp="maxValue &gt;= 0" vb="maxValue &gt;= 0">maxValue &gt;= 0</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">maxValue &lt; 0</exception>
      <ensures inheritedFrom="M:Troschuetz.Random.IGenerator.Next(System.Int32)" inheritedFromTypeName="IGenerator" csharp="result &gt;= 0 &amp;&amp; result &lt; maxValue" vb="result &gt;= 0 AndAlso result &lt; maxValue">result &gt;= 0 &amp;&amp; result &lt; maxValue</ensures>
    </member>
    <member name="M:Troschuetz.Random.Generators.StandardGenerator.Next(System.Int32,System.Int32)">
      <requires inheritedFrom="M:Troschuetz.Random.IGenerator.Next(System.Int32,System.Int32)" inheritedFromTypeName="IGenerator" exception="T:System.ArgumentOutOfRangeException" csharp="maxValue &gt;= minValue" vb="maxValue &gt;= minValue">maxValue &gt;= minValue</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">maxValue &lt; minValue</exception>
      <ensures inheritedFrom="M:Troschuetz.Random.IGenerator.Next(System.Int32,System.Int32)" inheritedFromTypeName="IGenerator" csharp="result &gt;= minValue &amp;&amp; result &lt; maxValue" vb="result &gt;= minValue AndAlso result &lt; maxValue">result &gt;= minValue &amp;&amp; result &lt; maxValue</ensures>
    </member>
    <member name="M:Troschuetz.Random.Generators.StandardGenerator.NextDouble">
      <ensures inheritedFrom="M:Troschuetz.Random.IGenerator.NextDouble" inheritedFromTypeName="IGenerator" csharp="result &gt;= 0.0 &amp;&amp; result &lt; 1.0" vb="result &gt;= 0 AndAlso result &lt; 1">result &gt;= 0.0 &amp;&amp; result &lt; 1.0</ensures>
    </member>
    <member name="M:Troschuetz.Random.Generators.StandardGenerator.NextDouble(System.Double)">
      <requires inheritedFrom="M:Troschuetz.Random.IGenerator.NextDouble(System.Double)" inheritedFromTypeName="IGenerator" exception="T:System.ArgumentOutOfRangeException" csharp="maxValue &gt;= 0.0" vb="maxValue &gt;= 0">maxValue &gt;= 0.0</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">maxValue &lt; 0.0</exception>
      <requires inheritedFrom="M:Troschuetz.Random.IGenerator.NextDouble(System.Double)" inheritedFromTypeName="IGenerator" exception="T:System.ArgumentException" csharp="!IsPositiveInfinity(maxValue)" vb="Not IsPositiveInfinity(maxValue)">!double.IsPositiveInfinity(maxValue)</requires>
      <exception cref="T:System.ArgumentException">double.IsPositiveInfinity(maxValue)</exception>
      <ensures inheritedFrom="M:Troschuetz.Random.IGenerator.NextDouble(System.Double)" inheritedFromTypeName="IGenerator" csharp="result &gt;= 0.0 &amp;&amp; result &lt; maxValue" vb="result &gt;= 0 AndAlso result &lt; maxValue">result &gt;= 0.0 &amp;&amp; result &lt; maxValue</ensures>
    </member>
    <member name="M:Troschuetz.Random.Generators.StandardGenerator.NextDouble(System.Double,System.Double)">
      <requires inheritedFrom="M:Troschuetz.Random.IGenerator.NextDouble(System.Double,System.Double)" inheritedFromTypeName="IGenerator" exception="T:System.ArgumentOutOfRangeException" csharp="maxValue &gt;= minValue" vb="maxValue &gt;= minValue">maxValue &gt;= minValue</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">maxValue &lt; minValue</exception>
      <requires inheritedFrom="M:Troschuetz.Random.IGenerator.NextDouble(System.Double,System.Double)" inheritedFromTypeName="IGenerator" exception="T:System.ArgumentException" csharp="!IsPositiveInfinity((maxValue - minValue))" vb="Not IsPositiveInfinity(maxValue - minValue)">!double.IsPositiveInfinity((maxValue - minValue))</requires>
      <exception cref="T:System.ArgumentException">double.IsPositiveInfinity(maxValue - minValue)</exception>
      <ensures inheritedFrom="M:Troschuetz.Random.IGenerator.NextDouble(System.Double,System.Double)" inheritedFromTypeName="IGenerator" csharp="result &gt;= minValue &amp;&amp; result &lt; maxValue" vb="result &gt;= minValue AndAlso result &lt; maxValue">result &gt;= minValue &amp;&amp; result &lt; maxValue</ensures>
    </member>
    <member name="M:Troschuetz.Random.Generators.StandardGenerator.NextUInt">
      <ensures inheritedFrom="M:Troschuetz.Random.IGenerator.NextUInt" inheritedFromTypeName="IGenerator" csharp="result &lt;= -1" vb="result &lt;= -1">result &lt;= -1</ensures>
    </member>
    <member name="M:Troschuetz.Random.Generators.StandardGenerator.NextUInt(System.UInt32)">
      <ensures inheritedFrom="M:Troschuetz.Random.IGenerator.NextUInt(System.UInt32)" inheritedFromTypeName="IGenerator" csharp="result &lt; maxValue" vb="result &lt; maxValue">result &lt; maxValue</ensures>
    </member>
    <member name="M:Troschuetz.Random.Generators.StandardGenerator.NextUInt(System.UInt32,System.UInt32)">
      <requires inheritedFrom="M:Troschuetz.Random.IGenerator.NextUInt(System.UInt32,System.UInt32)" inheritedFromTypeName="IGenerator" exception="T:System.ArgumentOutOfRangeException" csharp="maxValue &gt;= minValue" vb="maxValue &gt;= minValue">maxValue &gt;= minValue</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">maxValue &lt; minValue</exception>
      <ensures inheritedFrom="M:Troschuetz.Random.IGenerator.NextUInt(System.UInt32,System.UInt32)" inheritedFromTypeName="IGenerator" csharp="result &gt;= minValue &amp;&amp; result &lt; maxValue" vb="result &gt;= minValue AndAlso result &lt; maxValue">result &gt;= minValue &amp;&amp; result &lt; maxValue</ensures>
    </member>
    <member name="M:Troschuetz.Random.Generators.StandardGenerator.NextBytes(System.Byte[])">
      <requires inheritedFrom="M:Troschuetz.Random.IGenerator.NextBytes(System.Byte[])" inheritedFromTypeName="IGenerator" exception="T:System.ArgumentNullException" csharp="buffer != null" vb="buffer &lt;&gt; Nothing">buffer != null</requires>
      <exception cref="T:System.ArgumentNullException">buffer == null</exception>
    </member>
    <member name="M:Troschuetz.Random.Generators.StandardGenerator.ToString">
      <ensures inheritedFrom="M:System.Object.ToString" inheritedFromTypeName="Object" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.TriangularDistribution`1.NextDouble">
      <ensures inheritedFrom="M:Troschuetz.Random.IDistribution.NextDouble" inheritedFromTypeName="IDistribution" csharp="result &gt;= this.Minimum &amp;&amp; !!(result &lt;= this.Maximum)" vb="result &gt;= Me.Minimum AndAlso Not !(result &lt;= Me.Maximum)">result &gt;= this.Minimum &amp;&amp; !!(result &lt;= this.Maximum)</ensures>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.ChiSquareDistribution`1.NextDouble">
      <ensures inheritedFrom="M:Troschuetz.Random.IDistribution.NextDouble" inheritedFromTypeName="IDistribution" csharp="result &gt;= this.Minimum &amp;&amp; !!(result &lt;= this.Maximum)" vb="result &gt;= Me.Minimum AndAlso Not !(result &lt;= Me.Maximum)">result &gt;= this.Minimum &amp;&amp; !!(result &lt;= this.Maximum)</ensures>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.ContinuousUniformDistribution`1.NextDouble">
      <ensures inheritedFrom="M:Troschuetz.Random.IDistribution.NextDouble" inheritedFromTypeName="IDistribution" csharp="result &gt;= this.Minimum &amp;&amp; !!(result &lt;= this.Maximum)" vb="result &gt;= Me.Minimum AndAlso Not !(result &lt;= Me.Maximum)">result &gt;= this.Minimum &amp;&amp; !!(result &lt;= this.Maximum)</ensures>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.ExponentialDistribution`1.NextDouble">
      <ensures inheritedFrom="M:Troschuetz.Random.IDistribution.NextDouble" inheritedFromTypeName="IDistribution" csharp="result &gt;= this.Minimum &amp;&amp; !!(result &lt;= this.Maximum)" vb="result &gt;= Me.Minimum AndAlso Not !(result &lt;= Me.Maximum)">result &gt;= this.Minimum &amp;&amp; !!(result &lt;= this.Maximum)</ensures>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.ChiDistribution`1.NextDouble">
      <ensures inheritedFrom="M:Troschuetz.Random.IDistribution.NextDouble" inheritedFromTypeName="IDistribution" csharp="result &gt;= this.Minimum &amp;&amp; !!(result &lt;= this.Maximum)" vb="result &gt;= Me.Minimum AndAlso Not !(result &lt;= Me.Maximum)">result &gt;= this.Minimum &amp;&amp; !!(result &lt;= this.Maximum)</ensures>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.BetaDistribution`1.NextDouble">
      <ensures inheritedFrom="M:Troschuetz.Random.IDistribution.NextDouble" inheritedFromTypeName="IDistribution" csharp="result &gt;= this.Minimum &amp;&amp; !!(result &lt;= this.Maximum)" vb="result &gt;= Me.Minimum AndAlso Not !(result &lt;= Me.Maximum)">result &gt;= this.Minimum &amp;&amp; !!(result &lt;= this.Maximum)</ensures>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.FisherTippettDistribution`1.NextDouble">
      <ensures inheritedFrom="M:Troschuetz.Random.IDistribution.NextDouble" inheritedFromTypeName="IDistribution" csharp="result &gt;= this.Minimum &amp;&amp; !!(result &lt;= this.Maximum)" vb="result &gt;= Me.Minimum AndAlso Not !(result &lt;= Me.Maximum)">result &gt;= this.Minimum &amp;&amp; !!(result &lt;= this.Maximum)</ensures>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.CauchyDistribution`1.NextDouble">
      <ensures inheritedFrom="M:Troschuetz.Random.IDistribution.NextDouble" inheritedFromTypeName="IDistribution" csharp="result &gt;= this.Minimum &amp;&amp; !!(result &lt;= this.Maximum)" vb="result &gt;= Me.Minimum AndAlso Not !(result &lt;= Me.Maximum)">result &gt;= this.Minimum &amp;&amp; !!(result &lt;= this.Maximum)</ensures>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.RayleighDistribution`1.NextDouble">
      <ensures inheritedFrom="M:Troschuetz.Random.IDistribution.NextDouble" inheritedFromTypeName="IDistribution" csharp="result &gt;= this.Minimum &amp;&amp; !!(result &lt;= this.Maximum)" vb="result &gt;= Me.Minimum AndAlso Not !(result &lt;= Me.Maximum)">result &gt;= this.Minimum &amp;&amp; !!(result &lt;= this.Maximum)</ensures>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.BetaPrimeDistribution`1.NextDouble">
      <ensures inheritedFrom="M:Troschuetz.Random.IDistribution.NextDouble" inheritedFromTypeName="IDistribution" csharp="result &gt;= this.Minimum &amp;&amp; !!(result &lt;= this.Maximum)" vb="result &gt;= Me.Minimum AndAlso Not !(result &lt;= Me.Maximum)">result &gt;= this.Minimum &amp;&amp; !!(result &lt;= this.Maximum)</ensures>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.FisherSnedecorDistribution`1.NextDouble">
      <ensures inheritedFrom="M:Troschuetz.Random.IDistribution.NextDouble" inheritedFromTypeName="IDistribution" csharp="result &gt;= this.Minimum &amp;&amp; !!(result &lt;= this.Maximum)" vb="result &gt;= Me.Minimum AndAlso Not !(result &lt;= Me.Maximum)">result &gt;= this.Minimum &amp;&amp; !!(result &lt;= this.Maximum)</ensures>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.LaplaceDistribution`1.NextDouble">
      <ensures inheritedFrom="M:Troschuetz.Random.IDistribution.NextDouble" inheritedFromTypeName="IDistribution" csharp="result &gt;= this.Minimum &amp;&amp; !!(result &lt;= this.Maximum)" vb="result &gt;= Me.Minimum AndAlso Not !(result &lt;= Me.Maximum)">result &gt;= this.Minimum &amp;&amp; !!(result &lt;= this.Maximum)</ensures>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.GammaDistribution`1.NextDouble">
      <ensures inheritedFrom="M:Troschuetz.Random.IDistribution.NextDouble" inheritedFromTypeName="IDistribution" csharp="result &gt;= this.Minimum &amp;&amp; !!(result &lt;= this.Maximum)" vb="result &gt;= Me.Minimum AndAlso Not !(result &lt;= Me.Maximum)">result &gt;= this.Minimum &amp;&amp; !!(result &lt;= this.Maximum)</ensures>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.WeibullDistribution`1.NextDouble">
      <ensures inheritedFrom="M:Troschuetz.Random.IDistribution.NextDouble" inheritedFromTypeName="IDistribution" csharp="result &gt;= this.Minimum &amp;&amp; !!(result &lt;= this.Maximum)" vb="result &gt;= Me.Minimum AndAlso Not !(result &lt;= Me.Maximum)">result &gt;= this.Minimum &amp;&amp; !!(result &lt;= this.Maximum)</ensures>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.ParetoDistribution`1.NextDouble">
      <ensures inheritedFrom="M:Troschuetz.Random.IDistribution.NextDouble" inheritedFromTypeName="IDistribution" csharp="result &gt;= this.Minimum &amp;&amp; !!(result &lt;= this.Maximum)" vb="result &gt;= Me.Minimum AndAlso Not !(result &lt;= Me.Maximum)">result &gt;= this.Minimum &amp;&amp; !!(result &lt;= this.Maximum)</ensures>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.StudentsTDistribution`1.NextDouble">
      <ensures inheritedFrom="M:Troschuetz.Random.IDistribution.NextDouble" inheritedFromTypeName="IDistribution" csharp="result &gt;= this.Minimum &amp;&amp; !!(result &lt;= this.Maximum)" vb="result &gt;= Me.Minimum AndAlso Not !(result &lt;= Me.Maximum)">result &gt;= this.Minimum &amp;&amp; !!(result &lt;= this.Maximum)</ensures>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.NormalDistribution`1.NextDouble">
      <ensures inheritedFrom="M:Troschuetz.Random.IDistribution.NextDouble" inheritedFromTypeName="IDistribution" csharp="result &gt;= this.Minimum &amp;&amp; !!(result &lt;= this.Maximum)" vb="result &gt;= Me.Minimum AndAlso Not !(result &lt;= Me.Maximum)">result &gt;= this.Minimum &amp;&amp; !!(result &lt;= this.Maximum)</ensures>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.PowerDistribution`1.NextDouble">
      <ensures inheritedFrom="M:Troschuetz.Random.IDistribution.NextDouble" inheritedFromTypeName="IDistribution" csharp="result &gt;= this.Minimum &amp;&amp; !!(result &lt;= this.Maximum)" vb="result &gt;= Me.Minimum AndAlso Not !(result &lt;= Me.Maximum)">result &gt;= this.Minimum &amp;&amp; !!(result &lt;= this.Maximum)</ensures>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.LognormalDistribution`1.NextDouble">
      <ensures inheritedFrom="M:Troschuetz.Random.IDistribution.NextDouble" inheritedFromTypeName="IDistribution" csharp="result &gt;= this.Minimum &amp;&amp; !!(result &lt;= this.Maximum)" vb="result &gt;= Me.Minimum AndAlso Not !(result &lt;= Me.Maximum)">result &gt;= this.Minimum &amp;&amp; !!(result &lt;= this.Maximum)</ensures>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Continuous.ErlangDistribution`1.NextDouble">
      <ensures inheritedFrom="M:Troschuetz.Random.IDistribution.NextDouble" inheritedFromTypeName="IDistribution" csharp="result &gt;= this.Minimum &amp;&amp; !!(result &lt;= this.Maximum)" vb="result &gt;= Me.Minimum AndAlso Not !(result &lt;= Me.Maximum)">result &gt;= this.Minimum &amp;&amp; !!(result &lt;= this.Maximum)</ensures>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Discrete.BernoulliDistribution`1.NextDouble">
      <ensures inheritedFrom="M:Troschuetz.Random.IDistribution.NextDouble" inheritedFromTypeName="IDistribution" csharp="result &gt;= this.Minimum &amp;&amp; !!(result &lt;= this.Maximum)" vb="result &gt;= Me.Minimum AndAlso Not !(result &lt;= Me.Maximum)">result &gt;= this.Minimum &amp;&amp; !!(result &lt;= this.Maximum)</ensures>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Discrete.DiscreteUniformDistribution`1.NextDouble">
      <ensures inheritedFrom="M:Troschuetz.Random.IDistribution.NextDouble" inheritedFromTypeName="IDistribution" csharp="result &gt;= this.Minimum &amp;&amp; !!(result &lt;= this.Maximum)" vb="result &gt;= Me.Minimum AndAlso Not !(result &lt;= Me.Maximum)">result &gt;= this.Minimum &amp;&amp; !!(result &lt;= this.Maximum)</ensures>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Discrete.GeometricDistribution`1.NextDouble">
      <ensures inheritedFrom="M:Troschuetz.Random.IDistribution.NextDouble" inheritedFromTypeName="IDistribution" csharp="result &gt;= this.Minimum &amp;&amp; !!(result &lt;= this.Maximum)" vb="result &gt;= Me.Minimum AndAlso Not !(result &lt;= Me.Maximum)">result &gt;= this.Minimum &amp;&amp; !!(result &lt;= this.Maximum)</ensures>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Discrete.CategoricalDistribution`1.NextDouble">
      <ensures inheritedFrom="M:Troschuetz.Random.IDistribution.NextDouble" inheritedFromTypeName="IDistribution" csharp="result &gt;= this.Minimum &amp;&amp; !!(result &lt;= this.Maximum)" vb="result &gt;= Me.Minimum AndAlso Not !(result &lt;= Me.Maximum)">result &gt;= this.Minimum &amp;&amp; !!(result &lt;= this.Maximum)</ensures>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Discrete.CategoricalDistribution`1.ToString">
      <ensures inheritedFrom="M:System.Object.ToString" inheritedFromTypeName="Object" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Discrete.PoissonDistribution`1.NextDouble">
      <ensures inheritedFrom="M:Troschuetz.Random.IDistribution.NextDouble" inheritedFromTypeName="IDistribution" csharp="result &gt;= this.Minimum &amp;&amp; !!(result &lt;= this.Maximum)" vb="result &gt;= Me.Minimum AndAlso Not !(result &lt;= Me.Maximum)">result &gt;= this.Minimum &amp;&amp; !!(result &lt;= this.Maximum)</ensures>
    </member>
    <member name="M:Troschuetz.Random.Distributions.Discrete.BinomialDistribution`1.NextDouble">
      <ensures inheritedFrom="M:Troschuetz.Random.IDistribution.NextDouble" inheritedFromTypeName="IDistribution" csharp="result &gt;= this.Minimum &amp;&amp; !!(result &lt;= this.Maximum)" vb="result &gt;= Me.Minimum AndAlso Not !(result &lt;= Me.Maximum)">result &gt;= this.Minimum &amp;&amp; !!(result &lt;= this.Maximum)</ensures>
    </member>
    <member name="M:Troschuetz.Random.TRandom`1.Reset">
      <ensures inheritedFrom="M:Troschuetz.Random.IGenerator.Reset" inheritedFromTypeName="IGenerator" csharp="result == this.CanReset" vb="result = Me.CanReset">result == this.CanReset</ensures>
    </member>
    <member name="M:Troschuetz.Random.TRandom`1.Next">
      <ensures inheritedFrom="M:Troschuetz.Random.IGenerator.Next" inheritedFromTypeName="IGenerator" csharp="result &gt;= 0 &amp;&amp; result &lt; int.MaxValue" vb="result &gt;= 0 AndAlso result &lt; int.MaxValue">result &gt;= 0 &amp;&amp; result &lt; int.MaxValue</ensures>
    </member>
    <member name="M:Troschuetz.Random.TRandom`1.NextInclusiveMaxValue">
      <ensures inheritedFrom="M:Troschuetz.Random.IGenerator.NextInclusiveMaxValue" inheritedFromTypeName="IGenerator" csharp="result &gt;= 0 &amp;&amp; !(result &gt; int.MaxValue)" vb="result &gt;= 0 AndAlso Not result &gt; int.MaxValue">result &gt;= 0 &amp;&amp; !(result &gt; int.MaxValue)</ensures>
    </member>
    <member name="M:Troschuetz.Random.TRandom`1.Next(System.Int32)">
      <requires inheritedFrom="M:Troschuetz.Random.IGenerator.Next(System.Int32)" inheritedFromTypeName="IGenerator" exception="T:System.ArgumentOutOfRangeException" csharp="maxValue &gt;= 0" vb="maxValue &gt;= 0">maxValue &gt;= 0</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">maxValue &lt; 0</exception>
      <ensures inheritedFrom="M:Troschuetz.Random.IGenerator.Next(System.Int32)" inheritedFromTypeName="IGenerator" csharp="result &gt;= 0 &amp;&amp; result &lt; maxValue" vb="result &gt;= 0 AndAlso result &lt; maxValue">result &gt;= 0 &amp;&amp; result &lt; maxValue</ensures>
    </member>
    <member name="M:Troschuetz.Random.TRandom`1.Next(System.Int32,System.Int32)">
      <requires inheritedFrom="M:Troschuetz.Random.IGenerator.Next(System.Int32,System.Int32)" inheritedFromTypeName="IGenerator" exception="T:System.ArgumentOutOfRangeException" csharp="maxValue &gt;= minValue" vb="maxValue &gt;= minValue">maxValue &gt;= minValue</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">maxValue &lt; minValue</exception>
      <ensures inheritedFrom="M:Troschuetz.Random.IGenerator.Next(System.Int32,System.Int32)" inheritedFromTypeName="IGenerator" csharp="result &gt;= minValue &amp;&amp; result &lt; maxValue" vb="result &gt;= minValue AndAlso result &lt; maxValue">result &gt;= minValue &amp;&amp; result &lt; maxValue</ensures>
    </member>
    <member name="M:Troschuetz.Random.TRandom`1.NextDouble">
      <ensures inheritedFrom="M:Troschuetz.Random.IGenerator.NextDouble" inheritedFromTypeName="IGenerator" csharp="result &gt;= 0.0 &amp;&amp; result &lt; 1.0" vb="result &gt;= 0 AndAlso result &lt; 1">result &gt;= 0.0 &amp;&amp; result &lt; 1.0</ensures>
    </member>
    <member name="M:Troschuetz.Random.TRandom`1.NextDouble(System.Double)">
      <requires inheritedFrom="M:Troschuetz.Random.IGenerator.NextDouble(System.Double)" inheritedFromTypeName="IGenerator" exception="T:System.ArgumentOutOfRangeException" csharp="maxValue &gt;= 0.0" vb="maxValue &gt;= 0">maxValue &gt;= 0.0</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">maxValue &lt; 0.0</exception>
      <requires inheritedFrom="M:Troschuetz.Random.IGenerator.NextDouble(System.Double)" inheritedFromTypeName="IGenerator" exception="T:System.ArgumentException" csharp="!IsPositiveInfinity(maxValue)" vb="Not IsPositiveInfinity(maxValue)">!double.IsPositiveInfinity(maxValue)</requires>
      <exception cref="T:System.ArgumentException">double.IsPositiveInfinity(maxValue)</exception>
      <ensures inheritedFrom="M:Troschuetz.Random.IGenerator.NextDouble(System.Double)" inheritedFromTypeName="IGenerator" csharp="result &gt;= 0.0 &amp;&amp; result &lt; maxValue" vb="result &gt;= 0 AndAlso result &lt; maxValue">result &gt;= 0.0 &amp;&amp; result &lt; maxValue</ensures>
    </member>
    <member name="M:Troschuetz.Random.TRandom`1.NextDouble(System.Double,System.Double)">
      <requires inheritedFrom="M:Troschuetz.Random.IGenerator.NextDouble(System.Double,System.Double)" inheritedFromTypeName="IGenerator" exception="T:System.ArgumentOutOfRangeException" csharp="maxValue &gt;= minValue" vb="maxValue &gt;= minValue">maxValue &gt;= minValue</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">maxValue &lt; minValue</exception>
      <requires inheritedFrom="M:Troschuetz.Random.IGenerator.NextDouble(System.Double,System.Double)" inheritedFromTypeName="IGenerator" exception="T:System.ArgumentException" csharp="!IsPositiveInfinity((maxValue - minValue))" vb="Not IsPositiveInfinity(maxValue - minValue)">!double.IsPositiveInfinity((maxValue - minValue))</requires>
      <exception cref="T:System.ArgumentException">double.IsPositiveInfinity(maxValue - minValue)</exception>
      <ensures inheritedFrom="M:Troschuetz.Random.IGenerator.NextDouble(System.Double,System.Double)" inheritedFromTypeName="IGenerator" csharp="result &gt;= minValue &amp;&amp; result &lt; maxValue" vb="result &gt;= minValue AndAlso result &lt; maxValue">result &gt;= minValue &amp;&amp; result &lt; maxValue</ensures>
    </member>
    <member name="M:Troschuetz.Random.TRandom`1.NextUInt">
      <ensures inheritedFrom="M:Troschuetz.Random.IGenerator.NextUInt" inheritedFromTypeName="IGenerator" csharp="result &lt;= -1" vb="result &lt;= -1">result &lt;= -1</ensures>
    </member>
    <member name="M:Troschuetz.Random.TRandom`1.NextUIntExclusiveMaxValue">
      <ensures inheritedFrom="M:Troschuetz.Random.IGenerator.NextUIntExclusiveMaxValue" inheritedFromTypeName="IGenerator" csharp="result &lt; uint-1" vb="result &lt; UInteger -1">result &lt; uint-1</ensures>
    </member>
    <member name="M:Troschuetz.Random.TRandom`1.NextUInt(System.UInt32)">
      <ensures inheritedFrom="M:Troschuetz.Random.IGenerator.NextUInt(System.UInt32)" inheritedFromTypeName="IGenerator" csharp="result &lt; maxValue" vb="result &lt; maxValue">result &lt; maxValue</ensures>
    </member>
    <member name="M:Troschuetz.Random.TRandom`1.NextUInt(System.UInt32,System.UInt32)">
      <requires inheritedFrom="M:Troschuetz.Random.IGenerator.NextUInt(System.UInt32,System.UInt32)" inheritedFromTypeName="IGenerator" exception="T:System.ArgumentOutOfRangeException" csharp="maxValue &gt;= minValue" vb="maxValue &gt;= minValue">maxValue &gt;= minValue</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">maxValue &lt; minValue</exception>
      <ensures inheritedFrom="M:Troschuetz.Random.IGenerator.NextUInt(System.UInt32,System.UInt32)" inheritedFromTypeName="IGenerator" csharp="result &gt;= minValue &amp;&amp; result &lt; maxValue" vb="result &gt;= minValue AndAlso result &lt; maxValue">result &gt;= minValue &amp;&amp; result &lt; maxValue</ensures>
    </member>
    <member name="M:Troschuetz.Random.TRandom`1.NextBytes(System.Byte[])">
      <requires inheritedFrom="M:Troschuetz.Random.IGenerator.NextBytes(System.Byte[])" inheritedFromTypeName="IGenerator" exception="T:System.ArgumentNullException" csharp="buffer != null" vb="buffer &lt;&gt; Nothing">buffer != null</requires>
      <exception cref="T:System.ArgumentNullException">buffer == null</exception>
    </member>
    <member name="M:Troschuetz.Random.TRandom`1.ToString">
      <ensures inheritedFrom="M:System.Object.ToString" inheritedFromTypeName="Object" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
  </members>
</doc>